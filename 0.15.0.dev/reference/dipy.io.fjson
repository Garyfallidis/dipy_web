{"parents": [{"link": "../../documentation/", "title": "Documentation"}, {"link": "../", "title": "API Reference"}], "prev": null, "next": null, "title": "<code class=\"docutils literal notranslate\"><span class=\"pre\">io</span></code>", "meta": {}, "body": "<div class=\"section\" id=\"module-dipy.io\">\n<span id=\"io\"></span><h1><a class=\"reference external\" href=\"https://docs.python.org/3/library/io.html#module-io\" title=\"(in Python v3.7)\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">io</span></code></a><a class=\"headerlink\" href=\"#module-dipy.io\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.io.Dpy\" title=\"dipy.io.Dpy\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Dpy</span></code></a>(fname[,&nbsp;mode,&nbsp;compression])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.io.load_pickle\" title=\"dipy.io.load_pickle\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">load_pickle</span></code></a>(fname)</td>\n<td>Load object from pickle file <cite>fname</cite></td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.io.orientation_from_string\" title=\"dipy.io.orientation_from_string\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">orientation_from_string</span></code></a>(string_ornt)</td>\n<td>Returns an array representation of an ornt string</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.io.orientation_to_string\" title=\"dipy.io.orientation_to_string\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">orientation_to_string</span></code></a>(ornt)</td>\n<td>Returns a string representation of a 3d ornt</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.io.ornt_mapping\" title=\"dipy.io.ornt_mapping\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">ornt_mapping</span></code></a>(ornt1,&nbsp;ornt2)</td>\n<td>Calculates the mapping needing to get from orn1 to orn2</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.io.read_bvals_bvecs\" title=\"dipy.io.read_bvals_bvecs\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">read_bvals_bvecs</span></code></a>(fbvals,&nbsp;fbvecs)</td>\n<td>Read b-values and b-vectors from disk</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.io.read_bvec_file\" title=\"dipy.io.read_bvec_file\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">read_bvec_file</span></code></a>(filename[,&nbsp;atol])</td>\n<td>Read gradient table information from a pair of files with extentions .bvec and .bval.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.io.reorient_on_axis\" title=\"dipy.io.reorient_on_axis\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">reorient_on_axis</span></code></a>(input,&nbsp;current_ornt,&nbsp;new_ornt)</td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.io.reorient_vectors\" title=\"dipy.io.reorient_vectors\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">reorient_vectors</span></code></a>(input,&nbsp;current_ornt,&nbsp;new_ornt)</td>\n<td>Changes the orientation of a gradients or other vectors</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.io.save_pickle\" title=\"dipy.io.save_pickle\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">save_pickle</span></code></a>(fname,&nbsp;dix)</td>\n<td>Save <cite>dix</cite> to <cite>fname</cite> as pickle</td>\n</tr>\n</tbody>\n</table>\n<div class=\"section\" id=\"module-dipy.io.bvectxt\">\n<span id=\"module-io-bvectxt\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">io.bvectxt</span></code><a class=\"headerlink\" href=\"#module-dipy.io.bvectxt\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.io.bvectxt.orientation_from_string\" title=\"dipy.io.bvectxt.orientation_from_string\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">orientation_from_string</span></code></a>(string_ornt)</td>\n<td>Returns an array representation of an ornt string</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.io.bvectxt.orientation_to_string\" title=\"dipy.io.bvectxt.orientation_to_string\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">orientation_to_string</span></code></a>(ornt)</td>\n<td>Returns a string representation of a 3d ornt</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.io.bvectxt.ornt_mapping\" title=\"dipy.io.bvectxt.ornt_mapping\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">ornt_mapping</span></code></a>(ornt1,&nbsp;ornt2)</td>\n<td>Calculates the mapping needing to get from orn1 to orn2</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.io.bvectxt.read_bvec_file\" title=\"dipy.io.bvectxt.read_bvec_file\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">read_bvec_file</span></code></a>(filename[,&nbsp;atol])</td>\n<td>Read gradient table information from a pair of files with extentions .bvec and .bval.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.io.bvectxt.reorient_on_axis\" title=\"dipy.io.bvectxt.reorient_on_axis\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">reorient_on_axis</span></code></a>(input,&nbsp;current_ornt,&nbsp;new_ornt)</td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.io.bvectxt.reorient_vectors\" title=\"dipy.io.bvectxt.reorient_vectors\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">reorient_vectors</span></code></a>(input,&nbsp;current_ornt,&nbsp;new_ornt)</td>\n<td>Changes the orientation of a gradients or other vectors</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.io.bvectxt.splitext\" title=\"dipy.io.bvectxt.splitext\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">splitext</span></code></a>(p)</td>\n<td>Split the extension from a pathname.</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.io.dpy\">\n<span id=\"module-io-dpy\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">io.dpy</span></code><a class=\"headerlink\" href=\"#module-dipy.io.dpy\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>A class for handling large tractography datasets.</p>\n<p>It is built using the h5py which in turn implement\nkey features of the HDF5 (hierachical data format) API <a class=\"reference internal\" href=\"#r223c5a1ac171-1\" id=\"id1\">[R223c5a1ac171-1]</a>.</p>\n<div class=\"section\" id=\"references\">\n<h3>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<table class=\"docutils citation\" frame=\"void\" id=\"r223c5a1ac171-1\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\"><a class=\"fn-backref\" href=\"#id1\">[R223c5a1ac171-1]</a></td><td><a class=\"reference external\" href=\"http://www.hdfgroup.org/HDF5/doc/H5.intro.html\">http://www.hdfgroup.org/HDF5/doc/H5.intro.html</a></td></tr>\n</tbody>\n</table>\n</div>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.io.dpy.Dpy\" title=\"dipy.io.dpy.Dpy\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Dpy</span></code></a>(fname[,&nbsp;mode,&nbsp;compression])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.io.dpy.Streamlines\" title=\"dipy.io.dpy.Streamlines\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Streamlines</span></code></a></td>\n<td>alias of <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">nibabel.streamlines.array_sequence.ArraySequence</span></code></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.io.gradients\">\n<span id=\"module-io-gradients\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">io.gradients</span></code><a class=\"headerlink\" href=\"#module-dipy.io.gradients\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.io.gradients.InTemporaryDirectory\" title=\"dipy.io.gradients.InTemporaryDirectory\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">InTemporaryDirectory</span></code></a>([suffix,&nbsp;prefix,&nbsp;dir])</td>\n<td>Create, return, and change directory to a temporary directory</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.io.gradients.read_bvals_bvecs\" title=\"dipy.io.gradients.read_bvals_bvecs\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">read_bvals_bvecs</span></code></a>(fbvals,&nbsp;fbvecs)</td>\n<td>Read b-values and b-vectors from disk</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.io.gradients.splitext\" title=\"dipy.io.gradients.splitext\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">splitext</span></code></a>(p)</td>\n<td>Split the extension from a pathname.</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.io.image\">\n<span id=\"module-io-image\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">io.image</span></code><a class=\"headerlink\" href=\"#module-dipy.io.image\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.io.image.load_nifti\" title=\"dipy.io.image.load_nifti\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">load_nifti</span></code></a>(fname[,&nbsp;return_img,&nbsp;\u2026])</td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.io.image.save_nifti\" title=\"dipy.io.image.save_nifti\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">save_nifti</span></code></a>(fname,&nbsp;data,&nbsp;affine[,&nbsp;hdr])</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.io.peaks\">\n<span id=\"module-io-peaks\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">io.peaks</span></code><a class=\"headerlink\" href=\"#module-dipy.io.peaks\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.io.peaks.PeaksAndMetrics\" title=\"dipy.io.peaks.PeaksAndMetrics\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">PeaksAndMetrics</span></code></a></td>\n<td><table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Attributes:</th><td class=\"field-body\"></td>\n</tr>\n</tbody>\n</table>\n</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.io.peaks.Sphere\" title=\"dipy.io.peaks.Sphere\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Sphere</span></code></a>([x,&nbsp;y,&nbsp;z,&nbsp;theta,&nbsp;phi,&nbsp;xyz,&nbsp;faces,&nbsp;edges])</td>\n<td>Points on the unit sphere.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.io.peaks.load_peaks\" title=\"dipy.io.peaks.load_peaks\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">load_peaks</span></code></a>(fname[,&nbsp;verbose])</td>\n<td>Load a PeaksAndMetrics HDF5 file (PAM5)</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.io.peaks.peaks_to_niftis\" title=\"dipy.io.peaks.peaks_to_niftis\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">peaks_to_niftis</span></code></a>(pam,&nbsp;fname_shm,&nbsp;fname_dirs,&nbsp;\u2026)</td>\n<td>Save SH, directions, indices and values of peaks to Nifti.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.io.peaks.reshape_peaks_for_visualization\" title=\"dipy.io.peaks.reshape_peaks_for_visualization\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">reshape_peaks_for_visualization</span></code></a>(peaks)</td>\n<td>Reshape peaks for visualization.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.io.peaks.save_nifti\" title=\"dipy.io.peaks.save_nifti\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">save_nifti</span></code></a>(fname,&nbsp;data,&nbsp;affine[,&nbsp;hdr])</td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.io.peaks.save_peaks\" title=\"dipy.io.peaks.save_peaks\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">save_peaks</span></code></a>(fname,&nbsp;pam[,&nbsp;affine,&nbsp;verbose])</td>\n<td>Save all important attributes of object PeaksAndMetrics in a PAM5 file (HDF5).</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.io.pickles\">\n<span id=\"module-io-pickles\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">io.pickles</span></code><a class=\"headerlink\" href=\"#module-dipy.io.pickles\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Load and save pickles</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.io.pickles.load_pickle\" title=\"dipy.io.pickles.load_pickle\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">load_pickle</span></code></a>(fname)</td>\n<td>Load object from pickle file <cite>fname</cite></td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.io.pickles.save_pickle\" title=\"dipy.io.pickles.save_pickle\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">save_pickle</span></code></a>(fname,&nbsp;dix)</td>\n<td>Save <cite>dix</cite> to <cite>fname</cite> as pickle</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.io.streamline\">\n<span id=\"module-io-streamline\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">io.streamline</span></code><a class=\"headerlink\" href=\"#module-dipy.io.streamline\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.io.streamline.Dpy\" title=\"dipy.io.streamline.Dpy\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Dpy</span></code></a>(fname[,&nbsp;mode,&nbsp;compression])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.io.streamline.Field\" title=\"dipy.io.streamline.Field\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Field</span></code></a></td>\n<td>Header fields common to multiple streamline file formats.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.io.streamline.LazyTractogram\" title=\"dipy.io.streamline.LazyTractogram\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">LazyTractogram</span></code></a>([streamlines,&nbsp;\u2026])</td>\n<td>Lazy container for streamlines and their data information.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.io.streamline.Streamlines\" title=\"dipy.io.streamline.Streamlines\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Streamlines</span></code></a></td>\n<td>alias of <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">nibabel.streamlines.array_sequence.ArraySequence</span></code></td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.io.streamline.TckFile\" title=\"dipy.io.streamline.TckFile\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">TckFile</span></code></a>(tractogram[,&nbsp;header])</td>\n<td>Convenience class to encapsulate TCK file format.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.io.streamline.Tractogram\" title=\"dipy.io.streamline.Tractogram\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Tractogram</span></code></a>([streamlines,&nbsp;\u2026])</td>\n<td>Container for streamlines and their data information.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.io.streamline.TrkFile\" title=\"dipy.io.streamline.TrkFile\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">TrkFile</span></code></a>(tractogram[,&nbsp;header])</td>\n<td>Convenience class to encapsulate TRK file format.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.io.streamline.partial\" title=\"dipy.io.streamline.partial\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">partial</span></code></a></td>\n<td>partial(func, <a href=\"#id2\"><span class=\"problematic\" id=\"id3\">*</span></a>args, <a href=\"#id4\"><span class=\"problematic\" id=\"id5\">**</span></a>keywords) - new function with partial application of the given arguments and keywords.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.io.streamline.aff2axcodes\" title=\"dipy.io.streamline.aff2axcodes\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">aff2axcodes</span></code></a>(aff[,&nbsp;labels,&nbsp;tol])</td>\n<td>axis direction codes for affine <cite>aff</cite></td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.io.streamline.detect_format\" title=\"dipy.io.streamline.detect_format\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">detect_format</span></code></a>(fileobj)</td>\n<td>Returns the StreamlinesFile object guessed from the file-like object.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.io.streamline.load_dpy\" title=\"dipy.io.streamline.load_dpy\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">load_dpy</span></code></a>(filename[,&nbsp;lazy_load])</td>\n<td>Loads tractogram files (<a href=\"#id6\"><span class=\"problematic\" id=\"id7\">*</span></a>.tck)</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.io.streamline.load_tck\" title=\"dipy.io.streamline.load_tck\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">load_tck</span></code></a>(filename[,&nbsp;lazy_load])</td>\n<td>Loads tractogram files (<a href=\"#id8\"><span class=\"problematic\" id=\"id9\">*</span></a>.tck)</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.io.streamline.load_tractogram\" title=\"dipy.io.streamline.load_tractogram\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">load_tractogram</span></code></a>(filename[,&nbsp;lazy_load])</td>\n<td>Loads tractogram files (<a href=\"#id10\"><span class=\"problematic\" id=\"id11\">*</span></a>.tck)</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.io.streamline.load_trk\" title=\"dipy.io.streamline.load_trk\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">load_trk</span></code></a>(filename[,&nbsp;lazy_load])</td>\n<td>Loads tractogram files (<a href=\"#id12\"><span class=\"problematic\" id=\"id13\">*</span></a>.tck)</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.io.streamline.save_tractogram\" title=\"dipy.io.streamline.save_tractogram\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">save_tractogram</span></code></a>(fname,&nbsp;streamlines,&nbsp;affine)</td>\n<td>Saves tractogram files (<a href=\"#id14\"><span class=\"problematic\" id=\"id15\">*</span></a>.trk or <a href=\"#id16\"><span class=\"problematic\" id=\"id17\">*</span></a>.tck or <a href=\"#id18\"><span class=\"problematic\" id=\"id19\">*</span></a>.dpy)</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.io.trackvis\">\n<span id=\"module-io-trackvis\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">io.trackvis</span></code><a class=\"headerlink\" href=\"#module-dipy.io.trackvis\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.io.trackvis.save_trk\" title=\"dipy.io.trackvis.save_trk\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">save_trk</span></code></a>(filename,&nbsp;points,&nbsp;vox_to_ras,&nbsp;shape)</td>\n<td>A temporary helper function for saving trk files.</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.io.utils\">\n<span id=\"module-io-utils\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">io.utils</span></code><a class=\"headerlink\" href=\"#module-dipy.io.utils\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Utility functions for file formats</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.io.utils.Nifti1Image\" title=\"dipy.io.utils.Nifti1Image\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Nifti1Image</span></code></a>(dataobj,&nbsp;affine[,&nbsp;header,&nbsp;\u2026])</td>\n<td>Class for single file NIfTI1 format image</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.io.utils.decfa\" title=\"dipy.io.utils.decfa\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">decfa</span></code></a>(img_orig)</td>\n<td>Create a nifti-compliant directional-encoded color FA file.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.io.utils.make5d\" title=\"dipy.io.utils.make5d\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">make5d</span></code></a>(input)</td>\n<td>reshapes the input to have 5 dimensions, adds extra dimensions just before the last dimession</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.io.utils.nifti1_symmat\" title=\"dipy.io.utils.nifti1_symmat\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">nifti1_symmat</span></code></a>(image_data,&nbsp;*args,&nbsp;**kwargs)</td>\n<td>Returns a Nifti1Image with a symmetric matrix intent</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.io.vtk\">\n<span id=\"module-io-vtk\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">io.vtk</span></code><a class=\"headerlink\" href=\"#module-dipy.io.vtk\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.io.vtk.load_polydata\" title=\"dipy.io.vtk.load_polydata\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">load_polydata</span></code></a>(file_name)</td>\n<td>Load a vtk polydata to a supported format file.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.io.vtk.optional_package\" title=\"dipy.io.vtk.optional_package\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">optional_package</span></code></a>(name[,&nbsp;trip_msg])</td>\n<td>Return package-like thing and module setup for package <cite>name</cite></td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.io.vtk.save_polydata\" title=\"dipy.io.vtk.save_polydata\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">save_polydata</span></code></a>(polydata,&nbsp;file_name[,&nbsp;binary,&nbsp;\u2026])</td>\n<td>Save a vtk polydata to a supported format file.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.io.vtk.setup_module\" title=\"dipy.io.vtk.setup_module\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">setup_module</span></code></a>()</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<div class=\"section\" id=\"dpy\">\n<h3><a class=\"reference internal\" href=\"#dipy.io.Dpy\" title=\"dipy.io.Dpy\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Dpy</span></code></a><a class=\"headerlink\" href=\"#dpy\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.io.Dpy\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.io.</code><code class=\"descname\">Dpy</code><span class=\"sig-paren\">(</span><em>fname</em>, <em>mode='r'</em>, <em>compression=0</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.Dpy\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.7)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.io.Dpy.read_track\" title=\"dipy.io.Dpy.read_track\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">read_track</span></code></a>()</td>\n<td>read one track each time</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.io.Dpy.read_tracks\" title=\"dipy.io.Dpy.read_tracks\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">read_tracks</span></code></a>()</td>\n<td>read the entire tractography</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.io.Dpy.read_tracksi\" title=\"dipy.io.Dpy.read_tracksi\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">read_tracksi</span></code></a>(indices)</td>\n<td>read tracks with specific indices</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.io.Dpy.write_track\" title=\"dipy.io.Dpy.write_track\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">write_track</span></code></a>(track)</td>\n<td>write on track each time</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.io.Dpy.write_tracks\" title=\"dipy.io.Dpy.write_tracks\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">write_tracks</span></code></a>(tracks)</td>\n<td>write many tracks together</td>\n</tr>\n</tbody>\n</table>\n<table border=\"1\" class=\"docutils\">\n<colgroup>\n<col width=\"52%\" />\n<col width=\"48%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><strong>close</strong></td>\n<td>&#160;</td>\n</tr>\n<tr class=\"row-even\"><td><strong>version</strong></td>\n<td>&#160;</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.io.Dpy.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>fname</em>, <em>mode='r'</em>, <em>compression=0</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.Dpy.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Advanced storage system for tractography based on HDF5</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>fname</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">str, full filename</span></dt>\n<dd></dd>\n<dt><strong>mode</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">\u2018r\u2019 read</span></dt>\n<dd><p class=\"first last\">\u2018w\u2019 write\n\u2018r+\u2019 read and write only if file already exists</p>\n</dd>\n<dt><strong>compression</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">0 no compression to 9 maximum compression</span></dt>\n<dd></dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">tempfile</span> <span class=\"k\">import</span> <span class=\"n\">mkstemp</span> <span class=\"c1\">#temp file</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">dipy.io.dpy</span> <span class=\"k\">import</span> <span class=\"n\">Dpy</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">def</span> <span class=\"nf\">dpy_example</span><span class=\"p\">():</span>\n<span class=\"gp\">... </span>    <span class=\"n\">fd</span><span class=\"p\">,</span><span class=\"n\">fname</span> <span class=\"o\">=</span> <span class=\"n\">mkstemp</span><span class=\"p\">()</span>\n<span class=\"gp\">... </span>    <span class=\"n\">fname</span> <span class=\"o\">+=</span> <span class=\"s1\">&#39;.dpy&#39;</span><span class=\"c1\">#add correct extension</span>\n<span class=\"gp\">... </span>    <span class=\"n\">dpw</span> <span class=\"o\">=</span> <span class=\"n\">Dpy</span><span class=\"p\">(</span><span class=\"n\">fname</span><span class=\"p\">,</span><span class=\"s1\">&#39;w&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span>    <span class=\"n\">A</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">((</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"gp\">... </span>    <span class=\"n\">B</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">A</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n<span class=\"gp\">... </span>    <span class=\"n\">C</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"o\">*</span><span class=\"n\">A</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n<span class=\"gp\">... </span>    <span class=\"n\">dpw</span><span class=\"o\">.</span><span class=\"n\">write_track</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span>    <span class=\"n\">dpw</span><span class=\"o\">.</span><span class=\"n\">write_track</span><span class=\"p\">(</span><span class=\"n\">B</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span>    <span class=\"n\">dpw</span><span class=\"o\">.</span><span class=\"n\">write_track</span><span class=\"p\">(</span><span class=\"n\">C</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span>    <span class=\"n\">dpw</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n<span class=\"gp\">... </span>    <span class=\"n\">dpr</span> <span class=\"o\">=</span> <span class=\"n\">Dpy</span><span class=\"p\">(</span><span class=\"n\">fname</span><span class=\"p\">,</span><span class=\"s1\">&#39;r&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span>    <span class=\"n\">dpr</span><span class=\"o\">.</span><span class=\"n\">read_track</span><span class=\"p\">()</span>\n<span class=\"gp\">... </span>    <span class=\"n\">dpr</span><span class=\"o\">.</span><span class=\"n\">read_track</span><span class=\"p\">()</span>\n<span class=\"gp\">... </span>    <span class=\"n\">dpr</span><span class=\"o\">.</span><span class=\"n\">read_tracksi</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">])</span>\n<span class=\"gp\">... </span>    <span class=\"n\">dpr</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n<span class=\"gp\">... </span>    <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"n\">fname</span><span class=\"p\">)</span> <span class=\"c1\">#delete file from disk</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dpy_example</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.Dpy.close\">\n<code class=\"descname\">close</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.Dpy.close\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.Dpy.read_track\">\n<code class=\"descname\">read_track</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.Dpy.read_track\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>read one track each time</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.Dpy.read_tracks\">\n<code class=\"descname\">read_tracks</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.Dpy.read_tracks\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>read the entire tractography</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.Dpy.read_tracksi\">\n<code class=\"descname\">read_tracksi</code><span class=\"sig-paren\">(</span><em>indices</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.Dpy.read_tracksi\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>read tracks with specific indices</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.Dpy.version\">\n<code class=\"descname\">version</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.Dpy.version\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.Dpy.write_track\">\n<code class=\"descname\">write_track</code><span class=\"sig-paren\">(</span><em>track</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.Dpy.write_track\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>write on track each time</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.Dpy.write_tracks\">\n<code class=\"descname\">write_tracks</code><span class=\"sig-paren\">(</span><em>tracks</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.Dpy.write_tracks\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>write many tracks together</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"load-pickle\">\n<h3>load_pickle<a class=\"headerlink\" href=\"#load-pickle\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.load_pickle\">\n<code class=\"descclassname\">dipy.io.</code><code class=\"descname\">load_pickle</code><span class=\"sig-paren\">(</span><em>fname</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.load_pickle\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Load object from pickle file <cite>fname</cite></p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>fname</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">str</span></dt>\n<dd><p class=\"first last\">filename to load dict or other python object</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>dix</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">object</span></dt>\n<dd><p class=\"first last\">dictionary or other object</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Examples</p>\n<p>dipy.io.pickles.save_pickle</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"orientation-from-string\">\n<h3>orientation_from_string<a class=\"headerlink\" href=\"#orientation-from-string\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.orientation_from_string\">\n<code class=\"descclassname\">dipy.io.</code><code class=\"descname\">orientation_from_string</code><span class=\"sig-paren\">(</span><em>string_ornt</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.orientation_from_string\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns an array representation of an ornt string</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"orientation-to-string\">\n<h3>orientation_to_string<a class=\"headerlink\" href=\"#orientation-to-string\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.orientation_to_string\">\n<code class=\"descclassname\">dipy.io.</code><code class=\"descname\">orientation_to_string</code><span class=\"sig-paren\">(</span><em>ornt</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.orientation_to_string\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns a string representation of a 3d ornt</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"ornt-mapping\">\n<h3>ornt_mapping<a class=\"headerlink\" href=\"#ornt-mapping\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.ornt_mapping\">\n<code class=\"descclassname\">dipy.io.</code><code class=\"descname\">ornt_mapping</code><span class=\"sig-paren\">(</span><em>ornt1</em>, <em>ornt2</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.ornt_mapping\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Calculates the mapping needing to get from orn1 to orn2</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"read-bvals-bvecs\">\n<h3>read_bvals_bvecs<a class=\"headerlink\" href=\"#read-bvals-bvecs\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.read_bvals_bvecs\">\n<code class=\"descclassname\">dipy.io.</code><code class=\"descname\">read_bvals_bvecs</code><span class=\"sig-paren\">(</span><em>fbvals</em>, <em>fbvecs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.read_bvals_bvecs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Read b-values and b-vectors from disk</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>fbvals</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">str</span></dt>\n<dd><p class=\"first last\">Full path to file with b-values. None to not read bvals.</p>\n</dd>\n<dt><strong>fbvecs</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">str</span></dt>\n<dd><p class=\"first last\">Full path of file with b-vectors. None to not read bvecs.</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>bvals</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, (N,) or None</span></dt>\n<dd></dd>\n<dt><strong>bvecs</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, (N, 3) or None</span></dt>\n<dd></dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Notes</p>\n<p>Files can be either \u2018.bvals\u2019/\u2019.bvecs\u2019 or \u2018.txt\u2019 or \u2018.npy\u2019 (containing\narrays stored with the appropriate values).</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"read-bvec-file\">\n<h3>read_bvec_file<a class=\"headerlink\" href=\"#read-bvec-file\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.read_bvec_file\">\n<code class=\"descclassname\">dipy.io.</code><code class=\"descname\">read_bvec_file</code><span class=\"sig-paren\">(</span><em>filename</em>, <em>atol=0.001</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.read_bvec_file\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Read gradient table information from a pair of files with extentions\n.bvec and .bval. The bval file should have one row of values\nrepresenting the bvalues of each volume in the dwi data set. The bvec\nfile should have three rows, where the rows are the x, y, and z\ncomponents of the normalized gradient direction for each of the\nvolumes.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>filename :</strong></dt>\n<dd><p class=\"first last\">The path to the either the bvec or bval file</p>\n</dd>\n<dt><strong>atol</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float, optional</span></dt>\n<dd><p class=\"first last\">The tolorance used to check all the gradient directions are\nnormalized. Defult is .001</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"reorient-on-axis\">\n<h3>reorient_on_axis<a class=\"headerlink\" href=\"#reorient-on-axis\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.reorient_on_axis\">\n<code class=\"descclassname\">dipy.io.</code><code class=\"descname\">reorient_on_axis</code><span class=\"sig-paren\">(</span><em>input</em>, <em>current_ornt</em>, <em>new_ornt</em>, <em>axis=0</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.reorient_on_axis\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</div>\n<div class=\"section\" id=\"reorient-vectors\">\n<h3>reorient_vectors<a class=\"headerlink\" href=\"#reorient-vectors\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.reorient_vectors\">\n<code class=\"descclassname\">dipy.io.</code><code class=\"descname\">reorient_vectors</code><span class=\"sig-paren\">(</span><em>input</em>, <em>current_ornt</em>, <em>new_ornt</em>, <em>axis=0</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.reorient_vectors\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Changes the orientation of a gradients or other vectors</p>\n<p>Moves vectors, storted along axis, from current_ornt to new_ornt. For\nexample the vector [x, y, z] in \u201cRAS\u201d will be [-x, -y, z] in \u201cLPS\u201d.</p>\n<p>R: Right\nA: Anterior\nS: Superior\nL: Left\nP: Posterior\nI: Inferior</p>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">gtab</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">reorient_vectors</span><span class=\"p\">(</span><span class=\"n\">gtab</span><span class=\"p\">,</span> <span class=\"s1\">&#39;ras&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;asr&#39;</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">array([[1, 1, 1],</span>\n<span class=\"go\">       [2, 3, 1]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">reorient_vectors</span><span class=\"p\">(</span><span class=\"n\">gtab</span><span class=\"p\">,</span> <span class=\"s1\">&#39;ras&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;lps&#39;</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">array([[-1, -1,  1],</span>\n<span class=\"go\">       [-1, -2,  3]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">bvec</span> <span class=\"o\">=</span> <span class=\"n\">gtab</span><span class=\"o\">.</span><span class=\"n\">T</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">reorient_vectors</span><span class=\"p\">(</span><span class=\"n\">bvec</span><span class=\"p\">,</span> <span class=\"s1\">&#39;ras&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;lps&#39;</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"go\">array([[-1, -1],</span>\n<span class=\"go\">       [-1, -2],</span>\n<span class=\"go\">       [ 1,  3]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">reorient_vectors</span><span class=\"p\">(</span><span class=\"n\">bvec</span><span class=\"p\">,</span> <span class=\"s1\">&#39;ras&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;lsp&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">array([[-1, -1],</span>\n<span class=\"go\">       [ 1,  3],</span>\n<span class=\"go\">       [-1, -2]])</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"save-pickle\">\n<h3>save_pickle<a class=\"headerlink\" href=\"#save-pickle\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.save_pickle\">\n<code class=\"descclassname\">dipy.io.</code><code class=\"descname\">save_pickle</code><span class=\"sig-paren\">(</span><em>fname</em>, <em>dix</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.save_pickle\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Save <cite>dix</cite> to <cite>fname</cite> as pickle</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>fname</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">str</span></dt>\n<dd><p class=\"first last\">filename to save object e.g. a dictionary</p>\n</dd>\n<dt><strong>dix</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">str</span></dt>\n<dd><p class=\"first last\">dictionary or other object</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<div class=\"admonition seealso\">\n<p class=\"first admonition-title\">See also</p>\n<p class=\"last\"><a class=\"reference internal\" href=\"#dipy.io.pickles.load_pickle\" title=\"dipy.io.pickles.load_pickle\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">dipy.io.pickles.load_pickle</span></code></a></p>\n</div>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">tempfile</span> <span class=\"k\">import</span> <span class=\"n\">mkstemp</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">fd</span><span class=\"p\">,</span> <span class=\"n\">fname</span> <span class=\"o\">=</span> <span class=\"n\">mkstemp</span><span class=\"p\">()</span> <span class=\"c1\"># make temporary file (opened, attached to fh)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">d</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:{</span><span class=\"s1\">&#39;d&#39;</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">}}</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">save_pickle</span><span class=\"p\">(</span><span class=\"n\">fname</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">d2</span><span class=\"o\">=</span><span class=\"n\">load_pickle</span><span class=\"p\">(</span><span class=\"n\">fname</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>We remove the temporary file we created for neatness</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">)</span> <span class=\"c1\"># the file is still open, we need to close the fh</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"n\">fname</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id20\">\n<h3>orientation_from_string<a class=\"headerlink\" href=\"#id20\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.bvectxt.orientation_from_string\">\n<code class=\"descclassname\">dipy.io.bvectxt.</code><code class=\"descname\">orientation_from_string</code><span class=\"sig-paren\">(</span><em>string_ornt</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.bvectxt.orientation_from_string\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns an array representation of an ornt string</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id21\">\n<h3>orientation_to_string<a class=\"headerlink\" href=\"#id21\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.bvectxt.orientation_to_string\">\n<code class=\"descclassname\">dipy.io.bvectxt.</code><code class=\"descname\">orientation_to_string</code><span class=\"sig-paren\">(</span><em>ornt</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.bvectxt.orientation_to_string\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns a string representation of a 3d ornt</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id22\">\n<h3>ornt_mapping<a class=\"headerlink\" href=\"#id22\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.bvectxt.ornt_mapping\">\n<code class=\"descclassname\">dipy.io.bvectxt.</code><code class=\"descname\">ornt_mapping</code><span class=\"sig-paren\">(</span><em>ornt1</em>, <em>ornt2</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.bvectxt.ornt_mapping\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Calculates the mapping needing to get from orn1 to orn2</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id23\">\n<h3>read_bvec_file<a class=\"headerlink\" href=\"#id23\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.bvectxt.read_bvec_file\">\n<code class=\"descclassname\">dipy.io.bvectxt.</code><code class=\"descname\">read_bvec_file</code><span class=\"sig-paren\">(</span><em>filename</em>, <em>atol=0.001</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.bvectxt.read_bvec_file\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Read gradient table information from a pair of files with extentions\n.bvec and .bval. The bval file should have one row of values\nrepresenting the bvalues of each volume in the dwi data set. The bvec\nfile should have three rows, where the rows are the x, y, and z\ncomponents of the normalized gradient direction for each of the\nvolumes.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>filename :</strong></dt>\n<dd><p class=\"first last\">The path to the either the bvec or bval file</p>\n</dd>\n<dt><strong>atol</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float, optional</span></dt>\n<dd><p class=\"first last\">The tolorance used to check all the gradient directions are\nnormalized. Defult is .001</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id24\">\n<h3>reorient_on_axis<a class=\"headerlink\" href=\"#id24\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.bvectxt.reorient_on_axis\">\n<code class=\"descclassname\">dipy.io.bvectxt.</code><code class=\"descname\">reorient_on_axis</code><span class=\"sig-paren\">(</span><em>input</em>, <em>current_ornt</em>, <em>new_ornt</em>, <em>axis=0</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.bvectxt.reorient_on_axis\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</div>\n<div class=\"section\" id=\"id25\">\n<h3>reorient_vectors<a class=\"headerlink\" href=\"#id25\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.bvectxt.reorient_vectors\">\n<code class=\"descclassname\">dipy.io.bvectxt.</code><code class=\"descname\">reorient_vectors</code><span class=\"sig-paren\">(</span><em>input</em>, <em>current_ornt</em>, <em>new_ornt</em>, <em>axis=0</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.bvectxt.reorient_vectors\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Changes the orientation of a gradients or other vectors</p>\n<p>Moves vectors, storted along axis, from current_ornt to new_ornt. For\nexample the vector [x, y, z] in \u201cRAS\u201d will be [-x, -y, z] in \u201cLPS\u201d.</p>\n<p>R: Right\nA: Anterior\nS: Superior\nL: Left\nP: Posterior\nI: Inferior</p>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">gtab</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">reorient_vectors</span><span class=\"p\">(</span><span class=\"n\">gtab</span><span class=\"p\">,</span> <span class=\"s1\">&#39;ras&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;asr&#39;</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">array([[1, 1, 1],</span>\n<span class=\"go\">       [2, 3, 1]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">reorient_vectors</span><span class=\"p\">(</span><span class=\"n\">gtab</span><span class=\"p\">,</span> <span class=\"s1\">&#39;ras&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;lps&#39;</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">array([[-1, -1,  1],</span>\n<span class=\"go\">       [-1, -2,  3]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">bvec</span> <span class=\"o\">=</span> <span class=\"n\">gtab</span><span class=\"o\">.</span><span class=\"n\">T</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">reorient_vectors</span><span class=\"p\">(</span><span class=\"n\">bvec</span><span class=\"p\">,</span> <span class=\"s1\">&#39;ras&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;lps&#39;</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"go\">array([[-1, -1],</span>\n<span class=\"go\">       [-1, -2],</span>\n<span class=\"go\">       [ 1,  3]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">reorient_vectors</span><span class=\"p\">(</span><span class=\"n\">bvec</span><span class=\"p\">,</span> <span class=\"s1\">&#39;ras&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;lsp&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">array([[-1, -1],</span>\n<span class=\"go\">       [ 1,  3],</span>\n<span class=\"go\">       [-1, -2]])</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"splitext\">\n<h3>splitext<a class=\"headerlink\" href=\"#splitext\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.bvectxt.splitext\">\n<code class=\"descclassname\">dipy.io.bvectxt.</code><code class=\"descname\">splitext</code><span class=\"sig-paren\">(</span><em>p</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.bvectxt.splitext\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Split the extension from a pathname.</p>\n<p>Extension is everything from the last dot to the end, ignoring\nleading dots.  Returns \u201c(root, ext)\u201d; ext may be empty.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id26\">\n<h3><a class=\"reference internal\" href=\"#dipy.io.dpy.Dpy\" title=\"dipy.io.dpy.Dpy\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Dpy</span></code></a><a class=\"headerlink\" href=\"#id26\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.io.dpy.Dpy\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.io.dpy.</code><code class=\"descname\">Dpy</code><span class=\"sig-paren\">(</span><em>fname</em>, <em>mode='r'</em>, <em>compression=0</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.dpy.Dpy\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.7)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.io.dpy.Dpy.read_track\" title=\"dipy.io.dpy.Dpy.read_track\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">read_track</span></code></a>()</td>\n<td>read one track each time</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.io.dpy.Dpy.read_tracks\" title=\"dipy.io.dpy.Dpy.read_tracks\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">read_tracks</span></code></a>()</td>\n<td>read the entire tractography</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.io.dpy.Dpy.read_tracksi\" title=\"dipy.io.dpy.Dpy.read_tracksi\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">read_tracksi</span></code></a>(indices)</td>\n<td>read tracks with specific indices</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.io.dpy.Dpy.write_track\" title=\"dipy.io.dpy.Dpy.write_track\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">write_track</span></code></a>(track)</td>\n<td>write on track each time</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.io.dpy.Dpy.write_tracks\" title=\"dipy.io.dpy.Dpy.write_tracks\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">write_tracks</span></code></a>(tracks)</td>\n<td>write many tracks together</td>\n</tr>\n</tbody>\n</table>\n<table border=\"1\" class=\"docutils\">\n<colgroup>\n<col width=\"52%\" />\n<col width=\"48%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><strong>close</strong></td>\n<td>&#160;</td>\n</tr>\n<tr class=\"row-even\"><td><strong>version</strong></td>\n<td>&#160;</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.io.dpy.Dpy.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>fname</em>, <em>mode='r'</em>, <em>compression=0</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.dpy.Dpy.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Advanced storage system for tractography based on HDF5</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>fname</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">str, full filename</span></dt>\n<dd></dd>\n<dt><strong>mode</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">\u2018r\u2019 read</span></dt>\n<dd><p class=\"first last\">\u2018w\u2019 write\n\u2018r+\u2019 read and write only if file already exists</p>\n</dd>\n<dt><strong>compression</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">0 no compression to 9 maximum compression</span></dt>\n<dd></dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">tempfile</span> <span class=\"k\">import</span> <span class=\"n\">mkstemp</span> <span class=\"c1\">#temp file</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">dipy.io.dpy</span> <span class=\"k\">import</span> <span class=\"n\">Dpy</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">def</span> <span class=\"nf\">dpy_example</span><span class=\"p\">():</span>\n<span class=\"gp\">... </span>    <span class=\"n\">fd</span><span class=\"p\">,</span><span class=\"n\">fname</span> <span class=\"o\">=</span> <span class=\"n\">mkstemp</span><span class=\"p\">()</span>\n<span class=\"gp\">... </span>    <span class=\"n\">fname</span> <span class=\"o\">+=</span> <span class=\"s1\">&#39;.dpy&#39;</span><span class=\"c1\">#add correct extension</span>\n<span class=\"gp\">... </span>    <span class=\"n\">dpw</span> <span class=\"o\">=</span> <span class=\"n\">Dpy</span><span class=\"p\">(</span><span class=\"n\">fname</span><span class=\"p\">,</span><span class=\"s1\">&#39;w&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span>    <span class=\"n\">A</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">((</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"gp\">... </span>    <span class=\"n\">B</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">A</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n<span class=\"gp\">... </span>    <span class=\"n\">C</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"o\">*</span><span class=\"n\">A</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n<span class=\"gp\">... </span>    <span class=\"n\">dpw</span><span class=\"o\">.</span><span class=\"n\">write_track</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span>    <span class=\"n\">dpw</span><span class=\"o\">.</span><span class=\"n\">write_track</span><span class=\"p\">(</span><span class=\"n\">B</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span>    <span class=\"n\">dpw</span><span class=\"o\">.</span><span class=\"n\">write_track</span><span class=\"p\">(</span><span class=\"n\">C</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span>    <span class=\"n\">dpw</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n<span class=\"gp\">... </span>    <span class=\"n\">dpr</span> <span class=\"o\">=</span> <span class=\"n\">Dpy</span><span class=\"p\">(</span><span class=\"n\">fname</span><span class=\"p\">,</span><span class=\"s1\">&#39;r&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span>    <span class=\"n\">dpr</span><span class=\"o\">.</span><span class=\"n\">read_track</span><span class=\"p\">()</span>\n<span class=\"gp\">... </span>    <span class=\"n\">dpr</span><span class=\"o\">.</span><span class=\"n\">read_track</span><span class=\"p\">()</span>\n<span class=\"gp\">... </span>    <span class=\"n\">dpr</span><span class=\"o\">.</span><span class=\"n\">read_tracksi</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">])</span>\n<span class=\"gp\">... </span>    <span class=\"n\">dpr</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n<span class=\"gp\">... </span>    <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"n\">fname</span><span class=\"p\">)</span> <span class=\"c1\">#delete file from disk</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dpy_example</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.dpy.Dpy.close\">\n<code class=\"descname\">close</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.dpy.Dpy.close\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.dpy.Dpy.read_track\">\n<code class=\"descname\">read_track</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.dpy.Dpy.read_track\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>read one track each time</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.dpy.Dpy.read_tracks\">\n<code class=\"descname\">read_tracks</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.dpy.Dpy.read_tracks\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>read the entire tractography</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.dpy.Dpy.read_tracksi\">\n<code class=\"descname\">read_tracksi</code><span class=\"sig-paren\">(</span><em>indices</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.dpy.Dpy.read_tracksi\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>read tracks with specific indices</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.dpy.Dpy.version\">\n<code class=\"descname\">version</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.dpy.Dpy.version\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.dpy.Dpy.write_track\">\n<code class=\"descname\">write_track</code><span class=\"sig-paren\">(</span><em>track</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.dpy.Dpy.write_track\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>write on track each time</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.dpy.Dpy.write_tracks\">\n<code class=\"descname\">write_tracks</code><span class=\"sig-paren\">(</span><em>tracks</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.dpy.Dpy.write_tracks\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>write many tracks together</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"streamlines\">\n<h3><a class=\"reference internal\" href=\"#dipy.io.dpy.Streamlines\" title=\"dipy.io.dpy.Streamlines\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Streamlines</span></code></a><a class=\"headerlink\" href=\"#streamlines\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"attribute\">\n<dt id=\"dipy.io.dpy.Streamlines\">\n<code class=\"descclassname\">dipy.io.dpy.</code><code class=\"descname\">Streamlines</code><a class=\"headerlink\" href=\"#dipy.io.dpy.Streamlines\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>alias of <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">nibabel.streamlines.array_sequence.ArraySequence</span></code></p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"intemporarydirectory\">\n<h3><a class=\"reference internal\" href=\"#dipy.io.gradients.InTemporaryDirectory\" title=\"dipy.io.gradients.InTemporaryDirectory\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">InTemporaryDirectory</span></code></a><a class=\"headerlink\" href=\"#intemporarydirectory\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.io.gradients.InTemporaryDirectory\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.io.gradients.</code><code class=\"descname\">InTemporaryDirectory</code><span class=\"sig-paren\">(</span><em>suffix=''</em>, <em>prefix='tmp'</em>, <em>dir=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.gradients.InTemporaryDirectory\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">nibabel.tmpdirs.TemporaryDirectory</span></code></p>\n<p>Create, return, and change directory to a temporary directory</p>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">my_cwd</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getcwd</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">with</span> <span class=\"n\">InTemporaryDirectory</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">tmpdir</span><span class=\"p\">:</span>\n<span class=\"gp\">... </span>    <span class=\"n\">_</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">&#39;test.txt&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;wt&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s1\">&#39;some text&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span>    <span class=\"k\">assert</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">isfile</span><span class=\"p\">(</span><span class=\"s1\">&#39;test.txt&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span>    <span class=\"k\">assert</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">isfile</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">tmpdir</span><span class=\"p\">,</span> <span class=\"s1\">&#39;test.txt&#39;</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"n\">tmpdir</span><span class=\"p\">)</span>\n<span class=\"go\">False</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getcwd</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">my_cwd</span>\n<span class=\"go\">True</span>\n</pre></div>\n</div>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"docutils\">\n<colgroup>\n<col width=\"52%\" />\n<col width=\"48%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><strong>cleanup</strong></td>\n<td>&#160;</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.io.gradients.InTemporaryDirectory.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>suffix=''</em>, <em>prefix='tmp'</em>, <em>dir=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.gradients.InTemporaryDirectory.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize self.  See help(type(self)) for accurate signature.</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id27\">\n<h3>read_bvals_bvecs<a class=\"headerlink\" href=\"#id27\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.gradients.read_bvals_bvecs\">\n<code class=\"descclassname\">dipy.io.gradients.</code><code class=\"descname\">read_bvals_bvecs</code><span class=\"sig-paren\">(</span><em>fbvals</em>, <em>fbvecs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.gradients.read_bvals_bvecs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Read b-values and b-vectors from disk</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>fbvals</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">str</span></dt>\n<dd><p class=\"first last\">Full path to file with b-values. None to not read bvals.</p>\n</dd>\n<dt><strong>fbvecs</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">str</span></dt>\n<dd><p class=\"first last\">Full path of file with b-vectors. None to not read bvecs.</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>bvals</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, (N,) or None</span></dt>\n<dd></dd>\n<dt><strong>bvecs</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, (N, 3) or None</span></dt>\n<dd></dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Notes</p>\n<p>Files can be either \u2018.bvals\u2019/\u2019.bvecs\u2019 or \u2018.txt\u2019 or \u2018.npy\u2019 (containing\narrays stored with the appropriate values).</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id28\">\n<h3>splitext<a class=\"headerlink\" href=\"#id28\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.gradients.splitext\">\n<code class=\"descclassname\">dipy.io.gradients.</code><code class=\"descname\">splitext</code><span class=\"sig-paren\">(</span><em>p</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.gradients.splitext\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Split the extension from a pathname.</p>\n<p>Extension is everything from the last dot to the end, ignoring\nleading dots.  Returns \u201c(root, ext)\u201d; ext may be empty.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"load-nifti\">\n<h3>load_nifti<a class=\"headerlink\" href=\"#load-nifti\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.image.load_nifti\">\n<code class=\"descclassname\">dipy.io.image.</code><code class=\"descname\">load_nifti</code><span class=\"sig-paren\">(</span><em>fname</em>, <em>return_img=False</em>, <em>return_voxsize=False</em>, <em>return_coords=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.image.load_nifti\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</div>\n<div class=\"section\" id=\"save-nifti\">\n<h3>save_nifti<a class=\"headerlink\" href=\"#save-nifti\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.image.save_nifti\">\n<code class=\"descclassname\">dipy.io.image.</code><code class=\"descname\">save_nifti</code><span class=\"sig-paren\">(</span><em>fname</em>, <em>data</em>, <em>affine</em>, <em>hdr=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.image.save_nifti\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</div>\n<div class=\"section\" id=\"peaksandmetrics\">\n<h3><a class=\"reference internal\" href=\"#dipy.io.peaks.PeaksAndMetrics\" title=\"dipy.io.peaks.PeaksAndMetrics\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">PeaksAndMetrics</span></code></a><a class=\"headerlink\" href=\"#peaksandmetrics\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.io.peaks.PeaksAndMetrics\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.io.peaks.</code><code class=\"descname\">PeaksAndMetrics</code><a class=\"headerlink\" href=\"#dipy.io.peaks.PeaksAndMetrics\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.reconst.peak_direction_getter.PeaksAndMetricsDirectionGetter</span></code></p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Attributes:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>ang_thr</strong></dt>\n<dd></dd>\n<dt><strong>qa_thr</strong></dt>\n<dd></dd>\n<dt><strong>total_weight</strong></dt>\n<dd></dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">initial_direction</span></code></td>\n<td>The best starting directions for fiber tracking from point</td>\n</tr>\n</tbody>\n</table>\n<table border=\"1\" class=\"docutils\">\n<colgroup>\n<col width=\"63%\" />\n<col width=\"37%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><strong>get_direction</strong></td>\n<td>&#160;</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.io.peaks.PeaksAndMetrics.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>$self</em>, <em>/</em>, <em>*args</em>, <em>**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.peaks.PeaksAndMetrics.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize self.  See help(type(self)) for accurate signature.</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"sphere\">\n<h3><a class=\"reference internal\" href=\"#dipy.io.peaks.Sphere\" title=\"dipy.io.peaks.Sphere\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Sphere</span></code></a><a class=\"headerlink\" href=\"#sphere\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.io.peaks.Sphere\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.io.peaks.</code><code class=\"descname\">Sphere</code><span class=\"sig-paren\">(</span><em>x=None</em>, <em>y=None</em>, <em>z=None</em>, <em>theta=None</em>, <em>phi=None</em>, <em>xyz=None</em>, <em>faces=None</em>, <em>edges=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.peaks.Sphere\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.7)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p>Points on the unit sphere.</p>\n<p>The sphere can be constructed using one of three conventions:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Sphere</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">)</span>\n<span class=\"n\">Sphere</span><span class=\"p\">(</span><span class=\"n\">xyz</span><span class=\"o\">=</span><span class=\"n\">xyz</span><span class=\"p\">)</span>\n<span class=\"n\">Sphere</span><span class=\"p\">(</span><span class=\"n\">theta</span><span class=\"o\">=</span><span class=\"n\">theta</span><span class=\"p\">,</span> <span class=\"n\">phi</span><span class=\"o\">=</span><span class=\"n\">phi</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>x, y, z</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">1-D array_like</span></dt>\n<dd><p class=\"first last\">Vertices as x-y-z coordinates.</p>\n</dd>\n<dt><strong>theta, phi</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">1-D array_like</span></dt>\n<dd><p class=\"first last\">Vertices as spherical coordinates.  Theta and phi are the inclination\nand azimuth angles respectively.</p>\n</dd>\n<dt><strong>xyz</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">(N, 3) ndarray</span></dt>\n<dd><p class=\"first last\">Vertices as x-y-z coordinates.</p>\n</dd>\n<dt><strong>faces</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">(N, 3) ndarray</span></dt>\n<dd><p class=\"first last\">Indices into vertices that form triangular faces.  If unspecified,\nthe faces are computed using a Delaunay triangulation.</p>\n</dd>\n<dt><strong>edges</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">(N, 2) ndarray</span></dt>\n<dd><p class=\"first last\">Edges between vertices.  If unspecified, the edges are\nderived from the faces.</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Attributes:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>x</strong></dt>\n<dd></dd>\n<dt><strong>y</strong></dt>\n<dd></dd>\n<dt><strong>z</strong></dt>\n<dd></dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.io.peaks.Sphere.find_closest\" title=\"dipy.io.peaks.Sphere.find_closest\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">find_closest</span></code></a>(xyz)</td>\n<td>Find the index of the vertex in the Sphere closest to the input vector</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.io.peaks.Sphere.subdivide\" title=\"dipy.io.peaks.Sphere.subdivide\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">subdivide</span></code></a>([n])</td>\n<td>Subdivides each face of the sphere into four new faces.</td>\n</tr>\n</tbody>\n</table>\n<table border=\"1\" class=\"docutils\">\n<colgroup>\n<col width=\"55%\" />\n<col width=\"45%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><strong>edges</strong></td>\n<td>&#160;</td>\n</tr>\n<tr class=\"row-even\"><td><strong>faces</strong></td>\n<td>&#160;</td>\n</tr>\n<tr class=\"row-odd\"><td><strong>vertices</strong></td>\n<td>&#160;</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.io.peaks.Sphere.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>x=None</em>, <em>y=None</em>, <em>z=None</em>, <em>theta=None</em>, <em>phi=None</em>, <em>xyz=None</em>, <em>faces=None</em>, <em>edges=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.peaks.Sphere.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize self.  See help(type(self)) for accurate signature.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.peaks.Sphere.edges\">\n<code class=\"descname\">edges</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.peaks.Sphere.edges\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.peaks.Sphere.faces\">\n<code class=\"descname\">faces</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.peaks.Sphere.faces\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.peaks.Sphere.find_closest\">\n<code class=\"descname\">find_closest</code><span class=\"sig-paren\">(</span><em>xyz</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.peaks.Sphere.find_closest\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Find the index of the vertex in the Sphere closest to the input vector</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>xyz</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array-like, 3 elements</span></dt>\n<dd><p class=\"first last\">A unit vector</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.peaks.Sphere.subdivide\">\n<code class=\"descname\">subdivide</code><span class=\"sig-paren\">(</span><em>n=1</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.peaks.Sphere.subdivide\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Subdivides each face of the sphere into four new faces.</p>\n<p>New vertices are created at a, b, and c. Then each face [x, y, z] is\ndivided into faces [x, a, c], [y, a, b], [z, b, c], and [a, b, c].</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span>   y\n   /               /               a/____\b\n/\\    /            /  \\  /             /____\\/____          x      c     z\n</pre></div>\n</div>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>n</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int, optional</span></dt>\n<dd><p class=\"first last\">The number of subdivisions to preform.</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>new_sphere</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">Sphere</span></dt>\n<dd><p class=\"first last\">The subdivided sphere.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.peaks.Sphere.vertices\">\n<code class=\"descname\">vertices</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.peaks.Sphere.vertices\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.io.peaks.Sphere.x\">\n<code class=\"descname\">x</code><a class=\"headerlink\" href=\"#dipy.io.peaks.Sphere.x\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.io.peaks.Sphere.y\">\n<code class=\"descname\">y</code><a class=\"headerlink\" href=\"#dipy.io.peaks.Sphere.y\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.io.peaks.Sphere.z\">\n<code class=\"descname\">z</code><a class=\"headerlink\" href=\"#dipy.io.peaks.Sphere.z\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"load-peaks\">\n<h3>load_peaks<a class=\"headerlink\" href=\"#load-peaks\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.peaks.load_peaks\">\n<code class=\"descclassname\">dipy.io.peaks.</code><code class=\"descname\">load_peaks</code><span class=\"sig-paren\">(</span><em>fname</em>, <em>verbose=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.peaks.load_peaks\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Load a PeaksAndMetrics HDF5 file (PAM5)</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>fname</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">Filename of PAM5 file.</p>\n</dd>\n<dt><strong>verbose</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool</span></dt>\n<dd><p class=\"first last\">Print summary information about the loaded file.</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>pam</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">PeaksAndMetrics object</span></dt>\n<dd></dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"peaks-to-niftis\">\n<h3>peaks_to_niftis<a class=\"headerlink\" href=\"#peaks-to-niftis\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.peaks.peaks_to_niftis\">\n<code class=\"descclassname\">dipy.io.peaks.</code><code class=\"descname\">peaks_to_niftis</code><span class=\"sig-paren\">(</span><em>pam</em>, <em>fname_shm</em>, <em>fname_dirs</em>, <em>fname_values</em>, <em>fname_indices</em>, <em>fname_gfa</em>, <em>reshape_dirs=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.peaks.peaks_to_niftis\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Save SH, directions, indices and values of peaks to Nifti.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"reshape-peaks-for-visualization\">\n<h3>reshape_peaks_for_visualization<a class=\"headerlink\" href=\"#reshape-peaks-for-visualization\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.peaks.reshape_peaks_for_visualization\">\n<code class=\"descclassname\">dipy.io.peaks.</code><code class=\"descname\">reshape_peaks_for_visualization</code><span class=\"sig-paren\">(</span><em>peaks</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.peaks.reshape_peaks_for_visualization\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Reshape peaks for visualization.</p>\n<p>Reshape and convert to float32 a set of peaks for visualisation with mrtrix\nor the fibernavigator.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id29\">\n<h3>save_nifti<a class=\"headerlink\" href=\"#id29\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.peaks.save_nifti\">\n<code class=\"descclassname\">dipy.io.peaks.</code><code class=\"descname\">save_nifti</code><span class=\"sig-paren\">(</span><em>fname</em>, <em>data</em>, <em>affine</em>, <em>hdr=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.peaks.save_nifti\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</div>\n<div class=\"section\" id=\"save-peaks\">\n<h3>save_peaks<a class=\"headerlink\" href=\"#save-peaks\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.peaks.save_peaks\">\n<code class=\"descclassname\">dipy.io.peaks.</code><code class=\"descname\">save_peaks</code><span class=\"sig-paren\">(</span><em>fname</em>, <em>pam</em>, <em>affine=None</em>, <em>verbose=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.peaks.save_peaks\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Save all important attributes of object PeaksAndMetrics in a PAM5 file\n(HDF5).</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>fname</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">Filename of PAM5 file</p>\n</dd>\n<dt><strong>pam</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">PeaksAndMetrics</span></dt>\n<dd><p class=\"first last\">Object holding peak_dirs, shm_coeffs and other attributes</p>\n</dd>\n<dt><strong>affine</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array</span></dt>\n<dd><p class=\"first last\">The 4x4 matrix transforming the date from native to world coordinates.\nPeaksAndMetrics should have that attribute but if not it can be\nprovided here. Default None.</p>\n</dd>\n<dt><strong>verbose</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool</span></dt>\n<dd><p class=\"first last\">Print summary information about the saved file.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id30\">\n<h3>load_pickle<a class=\"headerlink\" href=\"#id30\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.pickles.load_pickle\">\n<code class=\"descclassname\">dipy.io.pickles.</code><code class=\"descname\">load_pickle</code><span class=\"sig-paren\">(</span><em>fname</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.pickles.load_pickle\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Load object from pickle file <cite>fname</cite></p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>fname</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">str</span></dt>\n<dd><p class=\"first last\">filename to load dict or other python object</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>dix</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">object</span></dt>\n<dd><p class=\"first last\">dictionary or other object</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Examples</p>\n<p>dipy.io.pickles.save_pickle</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id31\">\n<h3>save_pickle<a class=\"headerlink\" href=\"#id31\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.pickles.save_pickle\">\n<code class=\"descclassname\">dipy.io.pickles.</code><code class=\"descname\">save_pickle</code><span class=\"sig-paren\">(</span><em>fname</em>, <em>dix</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.pickles.save_pickle\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Save <cite>dix</cite> to <cite>fname</cite> as pickle</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>fname</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">str</span></dt>\n<dd><p class=\"first last\">filename to save object e.g. a dictionary</p>\n</dd>\n<dt><strong>dix</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">str</span></dt>\n<dd><p class=\"first last\">dictionary or other object</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<div class=\"admonition seealso\">\n<p class=\"first admonition-title\">See also</p>\n<p class=\"last\"><a class=\"reference internal\" href=\"#dipy.io.pickles.load_pickle\" title=\"dipy.io.pickles.load_pickle\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">dipy.io.pickles.load_pickle</span></code></a></p>\n</div>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">tempfile</span> <span class=\"k\">import</span> <span class=\"n\">mkstemp</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">fd</span><span class=\"p\">,</span> <span class=\"n\">fname</span> <span class=\"o\">=</span> <span class=\"n\">mkstemp</span><span class=\"p\">()</span> <span class=\"c1\"># make temporary file (opened, attached to fh)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">d</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:{</span><span class=\"s1\">&#39;d&#39;</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">}}</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">save_pickle</span><span class=\"p\">(</span><span class=\"n\">fname</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">d2</span><span class=\"o\">=</span><span class=\"n\">load_pickle</span><span class=\"p\">(</span><span class=\"n\">fname</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>We remove the temporary file we created for neatness</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">)</span> <span class=\"c1\"># the file is still open, we need to close the fh</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"n\">fname</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id32\">\n<h3><a class=\"reference internal\" href=\"#dipy.io.streamline.Dpy\" title=\"dipy.io.streamline.Dpy\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Dpy</span></code></a><a class=\"headerlink\" href=\"#id32\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.io.streamline.Dpy\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.io.streamline.</code><code class=\"descname\">Dpy</code><span class=\"sig-paren\">(</span><em>fname</em>, <em>mode='r'</em>, <em>compression=0</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.Dpy\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.7)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.io.streamline.Dpy.read_track\" title=\"dipy.io.streamline.Dpy.read_track\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">read_track</span></code></a>()</td>\n<td>read one track each time</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.io.streamline.Dpy.read_tracks\" title=\"dipy.io.streamline.Dpy.read_tracks\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">read_tracks</span></code></a>()</td>\n<td>read the entire tractography</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.io.streamline.Dpy.read_tracksi\" title=\"dipy.io.streamline.Dpy.read_tracksi\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">read_tracksi</span></code></a>(indices)</td>\n<td>read tracks with specific indices</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.io.streamline.Dpy.write_track\" title=\"dipy.io.streamline.Dpy.write_track\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">write_track</span></code></a>(track)</td>\n<td>write on track each time</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.io.streamline.Dpy.write_tracks\" title=\"dipy.io.streamline.Dpy.write_tracks\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">write_tracks</span></code></a>(tracks)</td>\n<td>write many tracks together</td>\n</tr>\n</tbody>\n</table>\n<table border=\"1\" class=\"docutils\">\n<colgroup>\n<col width=\"52%\" />\n<col width=\"48%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><strong>close</strong></td>\n<td>&#160;</td>\n</tr>\n<tr class=\"row-even\"><td><strong>version</strong></td>\n<td>&#160;</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.io.streamline.Dpy.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>fname</em>, <em>mode='r'</em>, <em>compression=0</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.Dpy.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Advanced storage system for tractography based on HDF5</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>fname</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">str, full filename</span></dt>\n<dd></dd>\n<dt><strong>mode</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">\u2018r\u2019 read</span></dt>\n<dd><p class=\"first last\">\u2018w\u2019 write\n\u2018r+\u2019 read and write only if file already exists</p>\n</dd>\n<dt><strong>compression</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">0 no compression to 9 maximum compression</span></dt>\n<dd></dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">tempfile</span> <span class=\"k\">import</span> <span class=\"n\">mkstemp</span> <span class=\"c1\">#temp file</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">dipy.io.dpy</span> <span class=\"k\">import</span> <span class=\"n\">Dpy</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">def</span> <span class=\"nf\">dpy_example</span><span class=\"p\">():</span>\n<span class=\"gp\">... </span>    <span class=\"n\">fd</span><span class=\"p\">,</span><span class=\"n\">fname</span> <span class=\"o\">=</span> <span class=\"n\">mkstemp</span><span class=\"p\">()</span>\n<span class=\"gp\">... </span>    <span class=\"n\">fname</span> <span class=\"o\">+=</span> <span class=\"s1\">&#39;.dpy&#39;</span><span class=\"c1\">#add correct extension</span>\n<span class=\"gp\">... </span>    <span class=\"n\">dpw</span> <span class=\"o\">=</span> <span class=\"n\">Dpy</span><span class=\"p\">(</span><span class=\"n\">fname</span><span class=\"p\">,</span><span class=\"s1\">&#39;w&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span>    <span class=\"n\">A</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">((</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"gp\">... </span>    <span class=\"n\">B</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">A</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n<span class=\"gp\">... </span>    <span class=\"n\">C</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"o\">*</span><span class=\"n\">A</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n<span class=\"gp\">... </span>    <span class=\"n\">dpw</span><span class=\"o\">.</span><span class=\"n\">write_track</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span>    <span class=\"n\">dpw</span><span class=\"o\">.</span><span class=\"n\">write_track</span><span class=\"p\">(</span><span class=\"n\">B</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span>    <span class=\"n\">dpw</span><span class=\"o\">.</span><span class=\"n\">write_track</span><span class=\"p\">(</span><span class=\"n\">C</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span>    <span class=\"n\">dpw</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n<span class=\"gp\">... </span>    <span class=\"n\">dpr</span> <span class=\"o\">=</span> <span class=\"n\">Dpy</span><span class=\"p\">(</span><span class=\"n\">fname</span><span class=\"p\">,</span><span class=\"s1\">&#39;r&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span>    <span class=\"n\">dpr</span><span class=\"o\">.</span><span class=\"n\">read_track</span><span class=\"p\">()</span>\n<span class=\"gp\">... </span>    <span class=\"n\">dpr</span><span class=\"o\">.</span><span class=\"n\">read_track</span><span class=\"p\">()</span>\n<span class=\"gp\">... </span>    <span class=\"n\">dpr</span><span class=\"o\">.</span><span class=\"n\">read_tracksi</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">])</span>\n<span class=\"gp\">... </span>    <span class=\"n\">dpr</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n<span class=\"gp\">... </span>    <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"n\">fname</span><span class=\"p\">)</span> <span class=\"c1\">#delete file from disk</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dpy_example</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.streamline.Dpy.close\">\n<code class=\"descname\">close</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.Dpy.close\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.streamline.Dpy.read_track\">\n<code class=\"descname\">read_track</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.Dpy.read_track\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>read one track each time</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.streamline.Dpy.read_tracks\">\n<code class=\"descname\">read_tracks</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.Dpy.read_tracks\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>read the entire tractography</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.streamline.Dpy.read_tracksi\">\n<code class=\"descname\">read_tracksi</code><span class=\"sig-paren\">(</span><em>indices</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.Dpy.read_tracksi\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>read tracks with specific indices</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.streamline.Dpy.version\">\n<code class=\"descname\">version</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.Dpy.version\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.streamline.Dpy.write_track\">\n<code class=\"descname\">write_track</code><span class=\"sig-paren\">(</span><em>track</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.Dpy.write_track\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>write on track each time</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.streamline.Dpy.write_tracks\">\n<code class=\"descname\">write_tracks</code><span class=\"sig-paren\">(</span><em>tracks</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.Dpy.write_tracks\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>write many tracks together</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"field\">\n<h3><a class=\"reference internal\" href=\"#dipy.io.streamline.Field\" title=\"dipy.io.streamline.Field\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Field</span></code></a><a class=\"headerlink\" href=\"#field\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.io.streamline.Field\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.io.streamline.</code><code class=\"descname\">Field</code><a class=\"headerlink\" href=\"#dipy.io.streamline.Field\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.7)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p>Header fields common to multiple streamline file formats.</p>\n<p>In IPython, use <cite>nibabel.streamlines.Field??</cite> to list them.</p>\n<dl class=\"method\">\n<dt id=\"dipy.io.streamline.Field.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>$self</em>, <em>/</em>, <em>*args</em>, <em>**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.Field.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize self.  See help(type(self)) for accurate signature.</p>\n</dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.io.streamline.Field.DIMENSIONS\">\n<code class=\"descname\">DIMENSIONS</code><em class=\"property\"> = 'dimensions'</em><a class=\"headerlink\" href=\"#dipy.io.streamline.Field.DIMENSIONS\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.io.streamline.Field.ENDIANNESS\">\n<code class=\"descname\">ENDIANNESS</code><em class=\"property\"> = 'endianness'</em><a class=\"headerlink\" href=\"#dipy.io.streamline.Field.ENDIANNESS\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.io.streamline.Field.MAGIC_NUMBER\">\n<code class=\"descname\">MAGIC_NUMBER</code><em class=\"property\"> = 'magic_number'</em><a class=\"headerlink\" href=\"#dipy.io.streamline.Field.MAGIC_NUMBER\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.io.streamline.Field.METHOD\">\n<code class=\"descname\">METHOD</code><em class=\"property\"> = 'method'</em><a class=\"headerlink\" href=\"#dipy.io.streamline.Field.METHOD\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.io.streamline.Field.NB_POINTS\">\n<code class=\"descname\">NB_POINTS</code><em class=\"property\"> = 'nb_points'</em><a class=\"headerlink\" href=\"#dipy.io.streamline.Field.NB_POINTS\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.io.streamline.Field.NB_PROPERTIES_PER_STREAMLINE\">\n<code class=\"descname\">NB_PROPERTIES_PER_STREAMLINE</code><em class=\"property\"> = 'nb_properties_per_streamline'</em><a class=\"headerlink\" href=\"#dipy.io.streamline.Field.NB_PROPERTIES_PER_STREAMLINE\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.io.streamline.Field.NB_SCALARS_PER_POINT\">\n<code class=\"descname\">NB_SCALARS_PER_POINT</code><em class=\"property\"> = 'nb_scalars_per_point'</em><a class=\"headerlink\" href=\"#dipy.io.streamline.Field.NB_SCALARS_PER_POINT\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.io.streamline.Field.NB_STREAMLINES\">\n<code class=\"descname\">NB_STREAMLINES</code><em class=\"property\"> = 'nb_streamlines'</em><a class=\"headerlink\" href=\"#dipy.io.streamline.Field.NB_STREAMLINES\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.io.streamline.Field.ORIGIN\">\n<code class=\"descname\">ORIGIN</code><em class=\"property\"> = 'origin'</em><a class=\"headerlink\" href=\"#dipy.io.streamline.Field.ORIGIN\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.io.streamline.Field.STEP_SIZE\">\n<code class=\"descname\">STEP_SIZE</code><em class=\"property\"> = 'step_size'</em><a class=\"headerlink\" href=\"#dipy.io.streamline.Field.STEP_SIZE\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.io.streamline.Field.VOXEL_ORDER\">\n<code class=\"descname\">VOXEL_ORDER</code><em class=\"property\"> = 'voxel_order'</em><a class=\"headerlink\" href=\"#dipy.io.streamline.Field.VOXEL_ORDER\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.io.streamline.Field.VOXEL_SIZES\">\n<code class=\"descname\">VOXEL_SIZES</code><em class=\"property\"> = 'voxel_sizes'</em><a class=\"headerlink\" href=\"#dipy.io.streamline.Field.VOXEL_SIZES\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.io.streamline.Field.VOXEL_TO_RASMM\">\n<code class=\"descname\">VOXEL_TO_RASMM</code><em class=\"property\"> = 'voxel_to_rasmm'</em><a class=\"headerlink\" href=\"#dipy.io.streamline.Field.VOXEL_TO_RASMM\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"lazytractogram\">\n<h3><a class=\"reference internal\" href=\"#dipy.io.streamline.LazyTractogram\" title=\"dipy.io.streamline.LazyTractogram\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">LazyTractogram</span></code></a><a class=\"headerlink\" href=\"#lazytractogram\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.io.streamline.LazyTractogram\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.io.streamline.</code><code class=\"descname\">LazyTractogram</code><span class=\"sig-paren\">(</span><em>streamlines=None</em>, <em>data_per_streamline=None</em>, <em>data_per_point=None</em>, <em>affine_to_rasmm=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.LazyTractogram\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">nibabel.streamlines.tractogram.Tractogram</span></code></p>\n<p>Lazy container for streamlines and their data information.</p>\n<p>This container behaves lazily as it uses generator functions to manage\nstreamlines and their data information. This container is thus memory\nfriendly since it doesn\u2019t require having all this data loaded in memory.</p>\n<p>Streamlines of a tractogram can be in any coordinate system of your\nchoice as long as you provide the correct <cite>affine_to_rasmm</cite> matrix, at\nconstruction time. When applied to streamlines coordinates, that\ntransformation matrix should bring the streamlines back to world space\n(RAS+ and mm space) <a href=\"#id60\"><span class=\"problematic\" id=\"id33\">[1]_</span></a>.</p>\n<p>Moreover, when streamlines are mapped back to voxel space <a href=\"#id61\"><span class=\"problematic\" id=\"id34\">[2]_</span></a>, a\nstreamline point located at an integer coordinate (i,j,k) is considered\nto be at the center of the corresponding voxel. This is in contrast with\nother conventions where it might have referred to a corner.</p>\n<p class=\"rubric\">Notes</p>\n<p>LazyTractogram objects do not support indexing currently.\nLazyTractogram objects are suited for operations that can be linearized\nsuch as applying an affine transformation or converting streamlines from\none file format to another.</p>\n<p class=\"rubric\">References</p>\n<p>[1] <a class=\"reference external\" href=\"http://nipy.org/nibabel/coordinate_systems.html#naming-reference-spaces\">http://nipy.org/nibabel/coordinate_systems.html#naming-reference-spaces</a>\n[2] <a class=\"reference external\" href=\"http://nipy.org/nibabel/coordinate_systems.html#voxel-coordinates-are-in-voxel-space\">http://nipy.org/nibabel/coordinate_systems.html#voxel-coordinates-are-in-voxel-space</a></p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Attributes:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>streamlines</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">generator function</span></dt>\n<dd><p class=\"first last\">Generator function yielding streamlines. Each streamline is an\nndarray of shape (<span class=\"math notranslate nohighlight\">\\(N_t\\)</span>, 3) where <span class=\"math notranslate nohighlight\">\\(N_t\\)</span> is the number of points of\nstreamline <span class=\"math notranslate nohighlight\">\\(t\\)</span>.</p>\n</dd>\n<dt><strong>data_per_streamline</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">instance of <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">LazyDict</span></code></span></dt>\n<dd><p class=\"first last\">Dictionary where the items are (str, instantiated generator).\nEach key represents a piece of information <span class=\"math notranslate nohighlight\">\\(i\\)</span> to be kept alongside\nevery streamline, and its associated value is a generator function\nyielding that information via ndarrays of shape (<span class=\"math notranslate nohighlight\">\\(P_i\\)</span>,) where <span class=\"math notranslate nohighlight\">\\(P_i\\)</span> is\nthe number of values to store for that particular piece of information\n<span class=\"math notranslate nohighlight\">\\(i\\)</span>.</p>\n</dd>\n<dt><strong>data_per_point</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">LazyDict</span></code> object</span></dt>\n<dd><p class=\"first last\">Dictionary where the items are (str, instantiated generator).  Each key\nrepresents a piece of information <span class=\"math notranslate nohighlight\">\\(i\\)</span> to be kept alongside every point\nof every streamline, and its associated value is a generator function\nyielding that information via ndarrays of shape (<span class=\"math notranslate nohighlight\">\\(N_t\\)</span>, <span class=\"math notranslate nohighlight\">\\(M_i\\)</span>) where\n<span class=\"math notranslate nohighlight\">\\(N_t\\)</span> is the number of points for a particular streamline <span class=\"math notranslate nohighlight\">\\(t\\)</span> and <span class=\"math notranslate nohighlight\">\\(M_i\\)</span>\nis the number of values to store for that particular piece of\ninformation <span class=\"math notranslate nohighlight\">\\(i\\)</span>.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.io.streamline.LazyTractogram.apply_affine\" title=\"dipy.io.streamline.LazyTractogram.apply_affine\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">apply_affine</span></code></a>(affine[,&nbsp;lazy])</td>\n<td>Applies an affine transformation to the streamlines.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.io.streamline.LazyTractogram.copy\" title=\"dipy.io.streamline.LazyTractogram.copy\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">copy</span></code></a>()</td>\n<td>Returns a copy of this <a class=\"reference internal\" href=\"#dipy.io.streamline.LazyTractogram\" title=\"dipy.io.streamline.LazyTractogram\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">LazyTractogram</span></code></a> object.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.io.streamline.LazyTractogram.extend\" title=\"dipy.io.streamline.LazyTractogram.extend\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">extend</span></code></a>(other)</td>\n<td>Appends the data of another <a class=\"reference internal\" href=\"#dipy.io.streamline.Tractogram\" title=\"dipy.io.streamline.Tractogram\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Tractogram</span></code></a>.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.io.streamline.LazyTractogram.from_data_func\" title=\"dipy.io.streamline.LazyTractogram.from_data_func\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">from_data_func</span></code></a>(data_func)</td>\n<td>Creates an instance from a generator function.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.io.streamline.LazyTractogram.from_tractogram\" title=\"dipy.io.streamline.LazyTractogram.from_tractogram\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">from_tractogram</span></code></a>(tractogram)</td>\n<td>Creates a <a class=\"reference internal\" href=\"#dipy.io.streamline.LazyTractogram\" title=\"dipy.io.streamline.LazyTractogram\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">LazyTractogram</span></code></a> object from a <a class=\"reference internal\" href=\"#dipy.io.streamline.Tractogram\" title=\"dipy.io.streamline.Tractogram\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Tractogram</span></code></a> object.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.io.streamline.LazyTractogram.to_world\" title=\"dipy.io.streamline.LazyTractogram.to_world\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">to_world</span></code></a>([lazy])</td>\n<td>Brings the streamlines to world space (i.e.</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.io.streamline.LazyTractogram.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>streamlines=None</em>, <em>data_per_streamline=None</em>, <em>data_per_point=None</em>, <em>affine_to_rasmm=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.LazyTractogram.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>streamlines</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">generator function, optional</span></dt>\n<dd><p class=\"first last\">Generator function yielding streamlines. Each streamline is an\nndarray of shape (<span class=\"math notranslate nohighlight\">\\(N_t\\)</span>, 3) where <span class=\"math notranslate nohighlight\">\\(N_t\\)</span> is the number of points of\nstreamline <span class=\"math notranslate nohighlight\">\\(t\\)</span>.</p>\n</dd>\n<dt><strong>data_per_streamline</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">dict of generator functions, optional</span></dt>\n<dd><p class=\"first last\">Dictionary where the items are (str, generator function).\nEach key represents an information <span class=\"math notranslate nohighlight\">\\(i\\)</span> to be kept alongside every\nstreamline, and its associated value is a generator function\nyielding that information via ndarrays of shape (<span class=\"math notranslate nohighlight\">\\(P_i\\)</span>,) where\n<span class=\"math notranslate nohighlight\">\\(P_i\\)</span> is the number of values to store for that particular\ninformation <span class=\"math notranslate nohighlight\">\\(i\\)</span>.</p>\n</dd>\n<dt><strong>data_per_point</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">dict of generator functions, optional</span></dt>\n<dd><p class=\"first last\">Dictionary where the items are (str, generator function).\nEach key represents an information <span class=\"math notranslate nohighlight\">\\(i\\)</span> to be kept alongside every\npoint of every streamline, and its associated value is a generator\nfunction yielding that information via ndarrays of shape\n(<span class=\"math notranslate nohighlight\">\\(N_t\\)</span>, <span class=\"math notranslate nohighlight\">\\(M_i\\)</span>) where <span class=\"math notranslate nohighlight\">\\(N_t\\)</span> is the number of points for a particular\nstreamline <span class=\"math notranslate nohighlight\">\\(t\\)</span> and <span class=\"math notranslate nohighlight\">\\(M_i\\)</span> is the number of values to store for\nthat particular information <span class=\"math notranslate nohighlight\">\\(i\\)</span>.</p>\n</dd>\n<dt><strong>affine_to_rasmm</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">ndarray of shape (4, 4) or None, optional</span></dt>\n<dd><p class=\"first last\">Transformation matrix that brings the streamlines contained in\nthis tractogram to <em>RAS+</em> and <em>mm</em> space where coordinate (0,0,0)\nrefers to the center of the voxel. By default, the streamlines\nare in an unknown space, i.e. affine_to_rasmm is None.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.streamline.LazyTractogram.apply_affine\">\n<code class=\"descname\">apply_affine</code><span class=\"sig-paren\">(</span><em>affine</em>, <em>lazy=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.LazyTractogram.apply_affine\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Applies an affine transformation to the streamlines.</p>\n<p>The transformation given by the <cite>affine</cite> matrix is applied after any\nother pending transformations to the streamline points.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>affine</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">2D array (4,4)</span></dt>\n<dd><p class=\"first last\">Transformation matrix that will be applied on each streamline.</p>\n</dd>\n<dt><strong>lazy</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">True, optional</span></dt>\n<dd><p class=\"first last\">Should always be True for <a class=\"reference internal\" href=\"#dipy.io.streamline.LazyTractogram\" title=\"dipy.io.streamline.LazyTractogram\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">LazyTractogram</span></code></a> object. Doing\notherwise will raise a ValueError.</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>lazy_tractogram</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\"><a class=\"reference internal\" href=\"#dipy.io.streamline.LazyTractogram\" title=\"dipy.io.streamline.LazyTractogram\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">LazyTractogram</span></code></a> object</span></dt>\n<dd><p class=\"first last\">A copy of this <a class=\"reference internal\" href=\"#dipy.io.streamline.LazyTractogram\" title=\"dipy.io.streamline.LazyTractogram\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">LazyTractogram</span></code></a> instance but with a\ntransformation to be applied on the streamlines.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.streamline.LazyTractogram.copy\">\n<code class=\"descname\">copy</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.LazyTractogram.copy\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns a copy of this <a class=\"reference internal\" href=\"#dipy.io.streamline.LazyTractogram\" title=\"dipy.io.streamline.LazyTractogram\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">LazyTractogram</span></code></a> object.</p>\n</dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.io.streamline.LazyTractogram.data\">\n<code class=\"descname\">data</code><a class=\"headerlink\" href=\"#dipy.io.streamline.LazyTractogram.data\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.io.streamline.LazyTractogram.data_per_point\">\n<code class=\"descname\">data_per_point</code><a class=\"headerlink\" href=\"#dipy.io.streamline.LazyTractogram.data_per_point\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.io.streamline.LazyTractogram.data_per_streamline\">\n<code class=\"descname\">data_per_streamline</code><a class=\"headerlink\" href=\"#dipy.io.streamline.LazyTractogram.data_per_streamline\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.streamline.LazyTractogram.extend\">\n<code class=\"descname\">extend</code><span class=\"sig-paren\">(</span><em>other</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.LazyTractogram.extend\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Appends the data of another <a class=\"reference internal\" href=\"#dipy.io.streamline.Tractogram\" title=\"dipy.io.streamline.Tractogram\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Tractogram</span></code></a>.</p>\n<p>Data that will be appended includes the streamlines and the content\nof both dictionaries <cite>data_per_streamline</cite> and <cite>data_per_point</cite>.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>other</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\"><a class=\"reference internal\" href=\"#dipy.io.streamline.Tractogram\" title=\"dipy.io.streamline.Tractogram\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Tractogram</span></code></a> object</span></dt>\n<dd><p class=\"first last\">Its data will be appended to the data of this tractogram.</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>None</strong></dt>\n<dd></dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Notes</p>\n<p>The entries in both dictionaries <cite>self.data_per_streamline</cite> and\n<cite>self.data_per_point</cite> must match respectively those contained in\nthe other tractogram.</p>\n</dd></dl>\n\n<dl class=\"classmethod\">\n<dt id=\"dipy.io.streamline.LazyTractogram.from_data_func\">\n<em class=\"property\">classmethod </em><code class=\"descname\">from_data_func</code><span class=\"sig-paren\">(</span><em>data_func</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.LazyTractogram.from_data_func\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Creates an instance from a generator function.</p>\n<p>The generator function must yield <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TractogramItem</span></code> objects.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>data_func</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">generator function yielding <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TractogramItem</span></code> objects</span></dt>\n<dd><p class=\"first last\">Generator function that whenever is called starts yielding\n<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TractogramItem</span></code> objects that will be used to instantiate a\n<a class=\"reference internal\" href=\"#dipy.io.streamline.LazyTractogram\" title=\"dipy.io.streamline.LazyTractogram\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">LazyTractogram</span></code></a>.</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>lazy_tractogram</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\"><a class=\"reference internal\" href=\"#dipy.io.streamline.LazyTractogram\" title=\"dipy.io.streamline.LazyTractogram\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">LazyTractogram</span></code></a> object</span></dt>\n<dd><p class=\"first last\">New lazy tractogram.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"classmethod\">\n<dt id=\"dipy.io.streamline.LazyTractogram.from_tractogram\">\n<em class=\"property\">classmethod </em><code class=\"descname\">from_tractogram</code><span class=\"sig-paren\">(</span><em>tractogram</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.LazyTractogram.from_tractogram\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Creates a <a class=\"reference internal\" href=\"#dipy.io.streamline.LazyTractogram\" title=\"dipy.io.streamline.LazyTractogram\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">LazyTractogram</span></code></a> object from a <a class=\"reference internal\" href=\"#dipy.io.streamline.Tractogram\" title=\"dipy.io.streamline.Tractogram\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Tractogram</span></code></a> object.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>tractogram</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Tractgogram</span></code> object</span></dt>\n<dd><p class=\"first last\">Tractogram from which to create a <a class=\"reference internal\" href=\"#dipy.io.streamline.LazyTractogram\" title=\"dipy.io.streamline.LazyTractogram\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">LazyTractogram</span></code></a> object.</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>lazy_tractogram</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\"><a class=\"reference internal\" href=\"#dipy.io.streamline.LazyTractogram\" title=\"dipy.io.streamline.LazyTractogram\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">LazyTractogram</span></code></a> object</span></dt>\n<dd><p class=\"first last\">New lazy tractogram.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.io.streamline.LazyTractogram.streamlines\">\n<code class=\"descname\">streamlines</code><a class=\"headerlink\" href=\"#dipy.io.streamline.LazyTractogram.streamlines\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.streamline.LazyTractogram.to_world\">\n<code class=\"descname\">to_world</code><span class=\"sig-paren\">(</span><em>lazy=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.LazyTractogram.to_world\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Brings the streamlines to world space (i.e. RAS+ and mm).</p>\n<p>The transformation is applied after any other pending transformations\nto the streamline points.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>lazy</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">True, optional</span></dt>\n<dd><p class=\"first last\">Should always be True for <a class=\"reference internal\" href=\"#dipy.io.streamline.LazyTractogram\" title=\"dipy.io.streamline.LazyTractogram\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">LazyTractogram</span></code></a> object. Doing\notherwise will raise a ValueError.</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>lazy_tractogram</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\"><a class=\"reference internal\" href=\"#dipy.io.streamline.LazyTractogram\" title=\"dipy.io.streamline.LazyTractogram\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">LazyTractogram</span></code></a> object</span></dt>\n<dd><p class=\"first last\">A copy of this <a class=\"reference internal\" href=\"#dipy.io.streamline.LazyTractogram\" title=\"dipy.io.streamline.LazyTractogram\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">LazyTractogram</span></code></a> instance but with a\ntransformation to be applied on the streamlines.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id35\">\n<h3><a class=\"reference internal\" href=\"#dipy.io.streamline.Streamlines\" title=\"dipy.io.streamline.Streamlines\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Streamlines</span></code></a><a class=\"headerlink\" href=\"#id35\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"attribute\">\n<dt id=\"dipy.io.streamline.Streamlines\">\n<code class=\"descclassname\">dipy.io.streamline.</code><code class=\"descname\">Streamlines</code><a class=\"headerlink\" href=\"#dipy.io.streamline.Streamlines\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>alias of <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">nibabel.streamlines.array_sequence.ArraySequence</span></code></p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"tckfile\">\n<h3><a class=\"reference internal\" href=\"#dipy.io.streamline.TckFile\" title=\"dipy.io.streamline.TckFile\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TckFile</span></code></a><a class=\"headerlink\" href=\"#tckfile\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.io.streamline.TckFile\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.io.streamline.</code><code class=\"descname\">TckFile</code><span class=\"sig-paren\">(</span><em>tractogram</em>, <em>header=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.TckFile\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">nibabel.streamlines.tractogram_file.TractogramFile</span></code></p>\n<p>Convenience class to encapsulate TCK file format.</p>\n<p class=\"rubric\">Notes</p>\n<p>MRtrix (so its file format: TCK) considers streamlines coordinates\nto be in world space (RAS+ and mm space). MRtrix refers to that space\nas the \u201creal\u201d or \u201cscanner\u201d space <a href=\"#id62\"><span class=\"problematic\" id=\"id36\">[1]_</span></a>.</p>\n<p>Moreover, when streamlines are mapped back to voxel space <a href=\"#id63\"><span class=\"problematic\" id=\"id37\">[2]_</span></a>, a\nstreamline point located at an integer coordinate (i,j,k) is considered\nto be at the center of the corresponding voxel. This is in contrast with\nTRK\u2019s internal convention where it would have referred to a corner.</p>\n<p>NiBabel\u2019s streamlines internal representation follows the same\nconvention as MRtrix.</p>\n<p class=\"rubric\">References</p>\n<p>[1] <a class=\"reference external\" href=\"http://www.nitrc.org/pipermail/mrtrix-discussion/2014-January/000859.html\">http://www.nitrc.org/pipermail/mrtrix-discussion/2014-January/000859.html</a>\n[2] <a class=\"reference external\" href=\"http://nipy.org/nibabel/coordinate_systems.html#voxel-coordinates-are-in-voxel-space\">http://nipy.org/nibabel/coordinate_systems.html#voxel-coordinates-are-in-voxel-space</a></p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Attributes:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">affine</span></code></dt>\n<dd><p class=\"first last\">voxmm -&gt; rasmm affine.</p>\n</dd>\n<dt><strong>header</strong></dt>\n<dd></dd>\n<dt><strong>streamlines</strong></dt>\n<dd></dd>\n<dt><strong>tractogram</strong></dt>\n<dd></dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.io.streamline.TckFile.create_empty_header\" title=\"dipy.io.streamline.TckFile.create_empty_header\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">create_empty_header</span></code></a>()</td>\n<td>Return an empty compliant TCK header as dict</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.io.streamline.TckFile.is_correct_format\" title=\"dipy.io.streamline.TckFile.is_correct_format\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">is_correct_format</span></code></a>(fileobj)</td>\n<td>Check if the file is in TCK format.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.io.streamline.TckFile.load\" title=\"dipy.io.streamline.TckFile.load\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">load</span></code></a>(fileobj[,&nbsp;lazy_load])</td>\n<td>Loads streamlines from a filename or file-like object.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.io.streamline.TckFile.save\" title=\"dipy.io.streamline.TckFile.save\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">save</span></code></a>(fileobj)</td>\n<td>Save tractogram to a filename or file-like object using TCK format.</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.io.streamline.TckFile.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>tractogram</em>, <em>header=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.TckFile.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>tractogram</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\"><a class=\"reference internal\" href=\"#dipy.io.streamline.Tractogram\" title=\"dipy.io.streamline.Tractogram\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Tractogram</span></code></a> object</span></dt>\n<dd><p class=\"first last\">Tractogram that will be contained in this <a class=\"reference internal\" href=\"#dipy.io.streamline.TckFile\" title=\"dipy.io.streamline.TckFile\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TckFile</span></code></a>.</p>\n</dd>\n<dt><strong>header</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">None or dict, optional</span></dt>\n<dd><p class=\"first last\">Metadata associated to this tractogram file. If None, make\ndefault empty header.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Notes</p>\n<p>Streamlines of the tractogram are assumed to be in <em>RAS+</em> and <em>mm</em>\nspace. It is also assumed that when streamlines are mapped back to\nvoxel space, a streamline point located at an integer coordinate\n(i,j,k) is considered to be at the center of the corresponding voxel.\nThis is in contrast with TRK\u2019s internal convention where it would\nhave referred to a corner.</p>\n</dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.io.streamline.TckFile.EOF_DELIMITER\">\n<code class=\"descname\">EOF_DELIMITER</code><em class=\"property\"> = array([[inf, inf, inf]], dtype=float32)</em><a class=\"headerlink\" href=\"#dipy.io.streamline.TckFile.EOF_DELIMITER\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.io.streamline.TckFile.FIBER_DELIMITER\">\n<code class=\"descname\">FIBER_DELIMITER</code><em class=\"property\"> = array([[nan, nan, nan]], dtype=float32)</em><a class=\"headerlink\" href=\"#dipy.io.streamline.TckFile.FIBER_DELIMITER\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.io.streamline.TckFile.MAGIC_NUMBER\">\n<code class=\"descname\">MAGIC_NUMBER</code><em class=\"property\"> = 'mrtrix tracks'</em><a class=\"headerlink\" href=\"#dipy.io.streamline.TckFile.MAGIC_NUMBER\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.io.streamline.TckFile.SUPPORTS_DATA_PER_POINT\">\n<code class=\"descname\">SUPPORTS_DATA_PER_POINT</code><em class=\"property\"> = False</em><a class=\"headerlink\" href=\"#dipy.io.streamline.TckFile.SUPPORTS_DATA_PER_POINT\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.io.streamline.TckFile.SUPPORTS_DATA_PER_STREAMLINE\">\n<code class=\"descname\">SUPPORTS_DATA_PER_STREAMLINE</code><em class=\"property\"> = False</em><a class=\"headerlink\" href=\"#dipy.io.streamline.TckFile.SUPPORTS_DATA_PER_STREAMLINE\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"classmethod\">\n<dt id=\"dipy.io.streamline.TckFile.create_empty_header\">\n<em class=\"property\">classmethod </em><code class=\"descname\">create_empty_header</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.TckFile.create_empty_header\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return an empty compliant TCK header as dict</p>\n</dd></dl>\n\n<dl class=\"classmethod\">\n<dt id=\"dipy.io.streamline.TckFile.is_correct_format\">\n<em class=\"property\">classmethod </em><code class=\"descname\">is_correct_format</code><span class=\"sig-paren\">(</span><em>fileobj</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.TckFile.is_correct_format\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Check if the file is in TCK format.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>fileobj</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string or file-like object</span></dt>\n<dd><p class=\"first last\">If string, a filename; otherwise an open file-like object in\nbinary mode pointing to TCK file (and ready to read from the\nbeginning of the TCK header). Note that calling this function\ndoes not change the file position.</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>is_correct_format</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">{True, False}</span></dt>\n<dd><p class=\"first last\">Returns True if <cite>fileobj</cite> is compatible with TCK format,\notherwise returns False.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"classmethod\">\n<dt id=\"dipy.io.streamline.TckFile.load\">\n<em class=\"property\">classmethod </em><code class=\"descname\">load</code><span class=\"sig-paren\">(</span><em>fileobj</em>, <em>lazy_load=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.TckFile.load\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Loads streamlines from a filename or file-like object.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>fileobj</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string or file-like object</span></dt>\n<dd><p class=\"first last\">If string, a filename; otherwise an open file-like object in\nbinary mode pointing to TCK file (and ready to read from the\nbeginning of the TCK header). Note that calling this function\ndoes not change the file position.</p>\n</dd>\n<dt><strong>lazy_load</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">{False, True}, optional</span></dt>\n<dd><p class=\"first last\">If True, load streamlines in a lazy manner i.e. they will not be\nkept in memory. Otherwise, load all streamlines in memory.</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>tck_file</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\"><a class=\"reference internal\" href=\"#dipy.io.streamline.TckFile\" title=\"dipy.io.streamline.TckFile\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TckFile</span></code></a> object</span></dt>\n<dd><p class=\"first last\">Returns an object containing tractogram data and header\ninformation.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Notes</p>\n<p>Streamlines of the tractogram are assumed to be in <em>RAS+</em> and <em>mm</em>\nspace. It is also assumed that when streamlines are mapped back to\nvoxel space, a streamline point located at an integer coordinate\n(i,j,k) is considered to be at the center of the corresponding voxel.\nThis is in contrast with TRK\u2019s internal convention where it would\nhave referred to a corner.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.streamline.TckFile.save\">\n<code class=\"descname\">save</code><span class=\"sig-paren\">(</span><em>fileobj</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.TckFile.save\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Save tractogram to a filename or file-like object using TCK format.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>fileobj</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string or file-like object</span></dt>\n<dd><p class=\"first last\">If string, a filename; otherwise an open file-like object in\nbinary mode pointing to TCK file (and ready to write from the\nbeginning of the TCK header data).</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"tractogram\">\n<h3><a class=\"reference internal\" href=\"#dipy.io.streamline.Tractogram\" title=\"dipy.io.streamline.Tractogram\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Tractogram</span></code></a><a class=\"headerlink\" href=\"#tractogram\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.io.streamline.Tractogram\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.io.streamline.</code><code class=\"descname\">Tractogram</code><span class=\"sig-paren\">(</span><em>streamlines=None</em>, <em>data_per_streamline=None</em>, <em>data_per_point=None</em>, <em>affine_to_rasmm=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.Tractogram\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.7)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p>Container for streamlines and their data information.</p>\n<p>Streamlines of a tractogram can be in any coordinate system of your\nchoice as long as you provide the correct <cite>affine_to_rasmm</cite> matrix, at\nconstruction time. When applied to streamlines coordinates, that\ntransformation matrix should bring the streamlines back to world space\n(RAS+ and mm space) <a href=\"#id64\"><span class=\"problematic\" id=\"id38\">[1]_</span></a>.</p>\n<p>Moreover, when streamlines are mapped back to voxel space <a href=\"#id65\"><span class=\"problematic\" id=\"id39\">[2]_</span></a>, a\nstreamline point located at an integer coordinate (i,j,k) is considered\nto be at the center of the corresponding voxel. This is in contrast with\nother conventions where it might have referred to a corner.</p>\n<p class=\"rubric\">References</p>\n<p>[1] <a class=\"reference external\" href=\"http://nipy.org/nibabel/coordinate_systems.html#naming-reference-spaces\">http://nipy.org/nibabel/coordinate_systems.html#naming-reference-spaces</a>\n[2] <a class=\"reference external\" href=\"http://nipy.org/nibabel/coordinate_systems.html#voxel-coordinates-are-in-voxel-space\">http://nipy.org/nibabel/coordinate_systems.html#voxel-coordinates-are-in-voxel-space</a></p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Attributes:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>streamlines</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ArraySequence</span></code> object</span></dt>\n<dd><p class=\"first last\">Sequence of <span class=\"math notranslate nohighlight\">\\(T\\)</span> streamlines. Each streamline is an ndarray of\nshape (<span class=\"math notranslate nohighlight\">\\(N_t\\)</span>, 3) where <span class=\"math notranslate nohighlight\">\\(N_t\\)</span> is the number of points of\nstreamline <span class=\"math notranslate nohighlight\">\\(t\\)</span>.</p>\n</dd>\n<dt><strong>data_per_streamline</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">PerArrayDict</span></code> object</span></dt>\n<dd><p class=\"first last\">Dictionary where the items are (str, 2D array).  Each key represents a\npiece of information <span class=\"math notranslate nohighlight\">\\(i\\)</span> to be kept alongside every streamline, and its\nassociated value is a 2D array of shape (<span class=\"math notranslate nohighlight\">\\(T\\)</span>, <span class=\"math notranslate nohighlight\">\\(P_i\\)</span>) where <span class=\"math notranslate nohighlight\">\\(T\\)</span> is the\nnumber of streamlines and <span class=\"math notranslate nohighlight\">\\(P_i\\)</span> is the number of values to store for\nthat particular piece of information <span class=\"math notranslate nohighlight\">\\(i\\)</span>.</p>\n</dd>\n<dt><strong>data_per_point</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">PerArraySequenceDict</span></code> object</span></dt>\n<dd><p class=\"first last\">Dictionary where the items are (str, <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ArraySequence</span></code>).  Each key\nrepresents a piece of information <span class=\"math notranslate nohighlight\">\\(i\\)</span> to be kept alongside every point\nof every streamline, and its associated value is an iterable of\nndarrays of shape (<span class=\"math notranslate nohighlight\">\\(N_t\\)</span>, <span class=\"math notranslate nohighlight\">\\(M_i\\)</span>) where <span class=\"math notranslate nohighlight\">\\(N_t\\)</span> is the number of points\nfor a particular streamline <span class=\"math notranslate nohighlight\">\\(t\\)</span> and <span class=\"math notranslate nohighlight\">\\(M_i\\)</span> is the number values to store\nfor that particular piece of information <span class=\"math notranslate nohighlight\">\\(i\\)</span>.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.io.streamline.Tractogram.apply_affine\" title=\"dipy.io.streamline.Tractogram.apply_affine\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">apply_affine</span></code></a>(affine[,&nbsp;lazy])</td>\n<td>Applies an affine transformation on the points of each streamline.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.io.streamline.Tractogram.copy\" title=\"dipy.io.streamline.Tractogram.copy\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">copy</span></code></a>()</td>\n<td>Returns a copy of this <a class=\"reference internal\" href=\"#dipy.io.streamline.Tractogram\" title=\"dipy.io.streamline.Tractogram\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Tractogram</span></code></a> object.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.io.streamline.Tractogram.extend\" title=\"dipy.io.streamline.Tractogram.extend\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">extend</span></code></a>(other)</td>\n<td>Appends the data of another <a class=\"reference internal\" href=\"#dipy.io.streamline.Tractogram\" title=\"dipy.io.streamline.Tractogram\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Tractogram</span></code></a>.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.io.streamline.Tractogram.to_world\" title=\"dipy.io.streamline.Tractogram.to_world\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">to_world</span></code></a>([lazy])</td>\n<td>Brings the streamlines to world space (i.e.</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.io.streamline.Tractogram.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>streamlines=None</em>, <em>data_per_streamline=None</em>, <em>data_per_point=None</em>, <em>affine_to_rasmm=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.Tractogram.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>streamlines</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">iterable of ndarrays or <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ArraySequence</span></code>, optional</span></dt>\n<dd><p class=\"first last\">Sequence of <span class=\"math notranslate nohighlight\">\\(T\\)</span> streamlines. Each streamline is an ndarray of\nshape (<span class=\"math notranslate nohighlight\">\\(N_t\\)</span>, 3) where <span class=\"math notranslate nohighlight\">\\(N_t\\)</span> is the number of points of\nstreamline <span class=\"math notranslate nohighlight\">\\(t\\)</span>.</p>\n</dd>\n<dt><strong>data_per_streamline</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">dict of iterable of ndarrays, optional</span></dt>\n<dd><p class=\"first last\">Dictionary where the items are (str, iterable).\nEach key represents an information <span class=\"math notranslate nohighlight\">\\(i\\)</span> to be kept alongside every\nstreamline, and its associated value is an iterable of ndarrays of\nshape (<span class=\"math notranslate nohighlight\">\\(P_i\\)</span>,) where <span class=\"math notranslate nohighlight\">\\(P_i\\)</span> is the number of scalar values to store\nfor that particular information <span class=\"math notranslate nohighlight\">\\(i\\)</span>.</p>\n</dd>\n<dt><strong>data_per_point</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">dict of iterable of ndarrays, optional</span></dt>\n<dd><p class=\"first last\">Dictionary where the items are (str, iterable).\nEach key represents an information <span class=\"math notranslate nohighlight\">\\(i\\)</span> to be kept alongside every\npoint of every streamline, and its associated value is an iterable\nof ndarrays of shape (<span class=\"math notranslate nohighlight\">\\(N_t\\)</span>, <span class=\"math notranslate nohighlight\">\\(M_i\\)</span>) where <span class=\"math notranslate nohighlight\">\\(N_t\\)</span> is the number of\npoints for a particular streamline <span class=\"math notranslate nohighlight\">\\(t\\)</span> and <span class=\"math notranslate nohighlight\">\\(M_i\\)</span> is the number\nscalar values to store for that particular information <span class=\"math notranslate nohighlight\">\\(i\\)</span>.</p>\n</dd>\n<dt><strong>affine_to_rasmm</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">ndarray of shape (4, 4) or None, optional</span></dt>\n<dd><p class=\"first last\">Transformation matrix that brings the streamlines contained in\nthis tractogram to <em>RAS+</em> and <em>mm</em> space where coordinate (0,0,0)\nrefers to the center of the voxel. By default, the streamlines\nare in an unknown space, i.e. affine_to_rasmm is None.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.io.streamline.Tractogram.affine_to_rasmm\">\n<code class=\"descname\">affine_to_rasmm</code><a class=\"headerlink\" href=\"#dipy.io.streamline.Tractogram.affine_to_rasmm\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Affine bringing streamlines in this tractogram to RAS+mm.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.streamline.Tractogram.apply_affine\">\n<code class=\"descname\">apply_affine</code><span class=\"sig-paren\">(</span><em>affine</em>, <em>lazy=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.Tractogram.apply_affine\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Applies an affine transformation on the points of each streamline.</p>\n<p>If <cite>lazy</cite> is not specified, this is performed <em>in-place</em>.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>affine</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">ndarray of shape (4, 4)</span></dt>\n<dd><p class=\"first last\">Transformation that will be applied to every streamline.</p>\n</dd>\n<dt><strong>lazy</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">{False, True}, optional</span></dt>\n<dd><p class=\"first last\">If True, streamlines are <em>not</em> transformed in-place and a\n<a class=\"reference internal\" href=\"#dipy.io.streamline.LazyTractogram\" title=\"dipy.io.streamline.LazyTractogram\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">LazyTractogram</span></code></a> object is returned. Otherwise, streamlines\nare modified in-place.</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>tractogram</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\"><a class=\"reference internal\" href=\"#dipy.io.streamline.Tractogram\" title=\"dipy.io.streamline.Tractogram\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Tractogram</span></code></a> or <a class=\"reference internal\" href=\"#dipy.io.streamline.LazyTractogram\" title=\"dipy.io.streamline.LazyTractogram\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">LazyTractogram</span></code></a> object</span></dt>\n<dd><p class=\"first last\">Tractogram where the streamlines have been transformed according\nto the given affine transformation. If the <cite>lazy</cite> option is true,\nit returns a <a class=\"reference internal\" href=\"#dipy.io.streamline.LazyTractogram\" title=\"dipy.io.streamline.LazyTractogram\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">LazyTractogram</span></code></a> object, otherwise it returns a\nreference to this <a class=\"reference internal\" href=\"#dipy.io.streamline.Tractogram\" title=\"dipy.io.streamline.Tractogram\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Tractogram</span></code></a> object with updated\nstreamlines.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.streamline.Tractogram.copy\">\n<code class=\"descname\">copy</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.Tractogram.copy\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns a copy of this <a class=\"reference internal\" href=\"#dipy.io.streamline.Tractogram\" title=\"dipy.io.streamline.Tractogram\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Tractogram</span></code></a> object.</p>\n</dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.io.streamline.Tractogram.data_per_point\">\n<code class=\"descname\">data_per_point</code><a class=\"headerlink\" href=\"#dipy.io.streamline.Tractogram.data_per_point\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.io.streamline.Tractogram.data_per_streamline\">\n<code class=\"descname\">data_per_streamline</code><a class=\"headerlink\" href=\"#dipy.io.streamline.Tractogram.data_per_streamline\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.streamline.Tractogram.extend\">\n<code class=\"descname\">extend</code><span class=\"sig-paren\">(</span><em>other</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.Tractogram.extend\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Appends the data of another <a class=\"reference internal\" href=\"#dipy.io.streamline.Tractogram\" title=\"dipy.io.streamline.Tractogram\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Tractogram</span></code></a>.</p>\n<p>Data that will be appended includes the streamlines and the content\nof both dictionaries <cite>data_per_streamline</cite> and <cite>data_per_point</cite>.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>other</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\"><a class=\"reference internal\" href=\"#dipy.io.streamline.Tractogram\" title=\"dipy.io.streamline.Tractogram\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Tractogram</span></code></a> object</span></dt>\n<dd><p class=\"first last\">Its data will be appended to the data of this tractogram.</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>None</strong></dt>\n<dd></dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Notes</p>\n<p>The entries in both dictionaries <cite>self.data_per_streamline</cite> and\n<cite>self.data_per_point</cite> must match respectively those contained in\nthe other tractogram.</p>\n</dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.io.streamline.Tractogram.streamlines\">\n<code class=\"descname\">streamlines</code><a class=\"headerlink\" href=\"#dipy.io.streamline.Tractogram.streamlines\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.streamline.Tractogram.to_world\">\n<code class=\"descname\">to_world</code><span class=\"sig-paren\">(</span><em>lazy=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.Tractogram.to_world\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Brings the streamlines to world space (i.e. RAS+ and mm).</p>\n<p>If <cite>lazy</cite> is not specified, this is performed <em>in-place</em>.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>lazy</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">{False, True}, optional</span></dt>\n<dd><p class=\"first last\">If True, streamlines are <em>not</em> transformed in-place and a\n<a class=\"reference internal\" href=\"#dipy.io.streamline.LazyTractogram\" title=\"dipy.io.streamline.LazyTractogram\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">LazyTractogram</span></code></a> object is returned. Otherwise, streamlines\nare modified in-place.</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>tractogram</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\"><a class=\"reference internal\" href=\"#dipy.io.streamline.Tractogram\" title=\"dipy.io.streamline.Tractogram\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Tractogram</span></code></a> or <a class=\"reference internal\" href=\"#dipy.io.streamline.LazyTractogram\" title=\"dipy.io.streamline.LazyTractogram\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">LazyTractogram</span></code></a> object</span></dt>\n<dd><p class=\"first last\">Tractogram where the streamlines have been sent to world space.\nIf the <cite>lazy</cite> option is true, it returns a <a class=\"reference internal\" href=\"#dipy.io.streamline.LazyTractogram\" title=\"dipy.io.streamline.LazyTractogram\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">LazyTractogram</span></code></a>\nobject, otherwise it returns a reference to this\n<a class=\"reference internal\" href=\"#dipy.io.streamline.Tractogram\" title=\"dipy.io.streamline.Tractogram\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Tractogram</span></code></a> object with updated streamlines.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"trkfile\">\n<h3><a class=\"reference internal\" href=\"#dipy.io.streamline.TrkFile\" title=\"dipy.io.streamline.TrkFile\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TrkFile</span></code></a><a class=\"headerlink\" href=\"#trkfile\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.io.streamline.TrkFile\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.io.streamline.</code><code class=\"descname\">TrkFile</code><span class=\"sig-paren\">(</span><em>tractogram</em>, <em>header=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.TrkFile\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">nibabel.streamlines.tractogram_file.TractogramFile</span></code></p>\n<p>Convenience class to encapsulate TRK file format.</p>\n<p class=\"rubric\">Notes</p>\n<p>TrackVis (so its file format: TRK) considers the streamline coordinate\n(0,0,0) to be in the corner of the voxel whereas NiBabel\u2019s streamlines\ninternal representation (Voxel space) assumes (0,0,0) to be in the\ncenter of the voxel.</p>\n<p>Thus, streamlines are shifted by half a voxel on load and are shifted\nback on save.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Attributes:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">affine</span></code></dt>\n<dd><p class=\"first last\">voxmm -&gt; rasmm affine.</p>\n</dd>\n<dt><strong>header</strong></dt>\n<dd></dd>\n<dt><strong>streamlines</strong></dt>\n<dd></dd>\n<dt><strong>tractogram</strong></dt>\n<dd></dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.io.streamline.TrkFile.create_empty_header\" title=\"dipy.io.streamline.TrkFile.create_empty_header\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">create_empty_header</span></code></a>()</td>\n<td>Return an empty compliant TRK header as dict</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.io.streamline.TrkFile.is_correct_format\" title=\"dipy.io.streamline.TrkFile.is_correct_format\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">is_correct_format</span></code></a>(fileobj)</td>\n<td>Check if the file is in TRK format.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.io.streamline.TrkFile.load\" title=\"dipy.io.streamline.TrkFile.load\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">load</span></code></a>(fileobj[,&nbsp;lazy_load])</td>\n<td>Loads streamlines from a filename or file-like object.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.io.streamline.TrkFile.save\" title=\"dipy.io.streamline.TrkFile.save\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">save</span></code></a>(fileobj)</td>\n<td>Save tractogram to a filename or file-like object using TRK format.</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.io.streamline.TrkFile.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>tractogram</em>, <em>header=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.TrkFile.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>tractogram</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\"><a class=\"reference internal\" href=\"#dipy.io.streamline.Tractogram\" title=\"dipy.io.streamline.Tractogram\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Tractogram</span></code></a> object</span></dt>\n<dd><p class=\"first last\">Tractogram that will be contained in this <a class=\"reference internal\" href=\"#dipy.io.streamline.TrkFile\" title=\"dipy.io.streamline.TrkFile\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TrkFile</span></code></a>.</p>\n</dd>\n<dt><strong>header</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">dict, optional</span></dt>\n<dd><p class=\"first last\">Metadata associated to this tractogram file.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Notes</p>\n<p>Streamlines of the tractogram are assumed to be in <em>RAS+</em>\nand <em>mm</em> space where coordinate (0,0,0) refers to the center\nof the voxel.</p>\n</dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.io.streamline.TrkFile.HEADER_SIZE\">\n<code class=\"descname\">HEADER_SIZE</code><em class=\"property\"> = 1000</em><a class=\"headerlink\" href=\"#dipy.io.streamline.TrkFile.HEADER_SIZE\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.io.streamline.TrkFile.MAGIC_NUMBER\">\n<code class=\"descname\">MAGIC_NUMBER</code><em class=\"property\"> = b'TRACK'</em><a class=\"headerlink\" href=\"#dipy.io.streamline.TrkFile.MAGIC_NUMBER\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.io.streamline.TrkFile.SUPPORTS_DATA_PER_POINT\">\n<code class=\"descname\">SUPPORTS_DATA_PER_POINT</code><em class=\"property\"> = True</em><a class=\"headerlink\" href=\"#dipy.io.streamline.TrkFile.SUPPORTS_DATA_PER_POINT\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.io.streamline.TrkFile.SUPPORTS_DATA_PER_STREAMLINE\">\n<code class=\"descname\">SUPPORTS_DATA_PER_STREAMLINE</code><em class=\"property\"> = True</em><a class=\"headerlink\" href=\"#dipy.io.streamline.TrkFile.SUPPORTS_DATA_PER_STREAMLINE\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"classmethod\">\n<dt id=\"dipy.io.streamline.TrkFile.create_empty_header\">\n<em class=\"property\">classmethod </em><code class=\"descname\">create_empty_header</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.TrkFile.create_empty_header\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return an empty compliant TRK header as dict</p>\n</dd></dl>\n\n<dl class=\"classmethod\">\n<dt id=\"dipy.io.streamline.TrkFile.is_correct_format\">\n<em class=\"property\">classmethod </em><code class=\"descname\">is_correct_format</code><span class=\"sig-paren\">(</span><em>fileobj</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.TrkFile.is_correct_format\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Check if the file is in TRK format.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>fileobj</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string or file-like object</span></dt>\n<dd><p class=\"first last\">If string, a filename; otherwise an open file-like object\npointing to TRK file (and ready to read from the beginning\nof the TRK header data). Note that calling this function\ndoes not change the file position.</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>is_correct_format</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">{True, False}</span></dt>\n<dd><p class=\"first last\">Returns True if <cite>fileobj</cite> is compatible with TRK format,\notherwise returns False.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"classmethod\">\n<dt id=\"dipy.io.streamline.TrkFile.load\">\n<em class=\"property\">classmethod </em><code class=\"descname\">load</code><span class=\"sig-paren\">(</span><em>fileobj</em>, <em>lazy_load=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.TrkFile.load\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Loads streamlines from a filename or file-like object.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>fileobj</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string or file-like object</span></dt>\n<dd><p class=\"first last\">If string, a filename; otherwise an open file-like object\npointing to TRK file (and ready to read from the beginning\nof the TRK header). Note that calling this function\ndoes not change the file position.</p>\n</dd>\n<dt><strong>lazy_load</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">{False, True}, optional</span></dt>\n<dd><p class=\"first last\">If True, load streamlines in a lazy manner i.e. they will not be\nkept in memory. Otherwise, load all streamlines in memory.</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>trk_file</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\"><a class=\"reference internal\" href=\"#dipy.io.streamline.TrkFile\" title=\"dipy.io.streamline.TrkFile\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TrkFile</span></code></a> object</span></dt>\n<dd><p class=\"first last\">Returns an object containing tractogram data and header\ninformation.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Notes</p>\n<p>Streamlines of the returned tractogram are assumed to be in <em>RAS</em>\nand <em>mm</em> space where coordinate (0,0,0) refers to the center of the\nvoxel.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.streamline.TrkFile.save\">\n<code class=\"descname\">save</code><span class=\"sig-paren\">(</span><em>fileobj</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.TrkFile.save\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Save tractogram to a filename or file-like object using TRK format.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>fileobj</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string or file-like object</span></dt>\n<dd><p class=\"first last\">If string, a filename; otherwise an open file-like object\npointing to TRK file (and ready to write from the beginning\nof the TRK header data).</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"partial\">\n<h3><a class=\"reference internal\" href=\"#dipy.io.streamline.partial\" title=\"dipy.io.streamline.partial\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">partial</span></code></a><a class=\"headerlink\" href=\"#partial\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.io.streamline.partial\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.io.streamline.</code><code class=\"descname\">partial</code><a class=\"headerlink\" href=\"#dipy.io.streamline.partial\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.7)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p>partial(func, <a href=\"#id40\"><span class=\"problematic\" id=\"id41\">*</span></a>args, <a href=\"#id42\"><span class=\"problematic\" id=\"id43\">**</span></a>keywords) - new function with partial application\nof the given arguments and keywords.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Attributes:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>args</strong></dt>\n<dd><p class=\"first last\">tuple of arguments to future partial calls</p>\n</dd>\n<dt><strong>func</strong></dt>\n<dd><p class=\"first last\">function object to use in future partial calls</p>\n</dd>\n<dt><strong>keywords</strong></dt>\n<dd><p class=\"first last\">dictionary of keyword arguments to future partial calls</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">__call__</span></code>($self,&nbsp;/,&nbsp;*args,&nbsp;**kwargs)</td>\n<td>Call self as a function.</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.io.streamline.partial.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>$self</em>, <em>/</em>, <em>*args</em>, <em>**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.partial.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize self.  See help(type(self)) for accurate signature.</p>\n</dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.io.streamline.partial.args\">\n<code class=\"descname\">args</code><a class=\"headerlink\" href=\"#dipy.io.streamline.partial.args\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>tuple of arguments to future partial calls</p>\n</dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.io.streamline.partial.func\">\n<code class=\"descname\">func</code><a class=\"headerlink\" href=\"#dipy.io.streamline.partial.func\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>function object to use in future partial calls</p>\n</dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.io.streamline.partial.keywords\">\n<code class=\"descname\">keywords</code><a class=\"headerlink\" href=\"#dipy.io.streamline.partial.keywords\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>dictionary of keyword arguments to future partial calls</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"aff2axcodes\">\n<h3>aff2axcodes<a class=\"headerlink\" href=\"#aff2axcodes\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.streamline.aff2axcodes\">\n<code class=\"descclassname\">dipy.io.streamline.</code><code class=\"descname\">aff2axcodes</code><span class=\"sig-paren\">(</span><em>aff</em>, <em>labels=None</em>, <em>tol=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.aff2axcodes\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>axis direction codes for affine <cite>aff</cite></p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>aff</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">(N,M) array-like</span></dt>\n<dd><p class=\"first last\">affine transformation matrix</p>\n</dd>\n<dt><strong>labels</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">optional, None or sequence of (2,) sequences</span></dt>\n<dd><p class=\"first last\">Labels for negative and positive ends of output axes of <cite>aff</cite>.  See\ndocstring for <code class=\"docutils literal notranslate\"><span class=\"pre\">ornt2axcodes</span></code> for more detail</p>\n</dd>\n<dt><strong>tol</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">None or float</span></dt>\n<dd><p class=\"first last\">Tolerance for SVD of affine - see <code class=\"docutils literal notranslate\"><span class=\"pre\">io_orientation</span></code> for more detail.</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>axcodes</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">(N,) tuple</span></dt>\n<dd><p class=\"first last\">labels for positive end of voxel axes.  Dropped axes get a label of\nNone.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">aff</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">10</span><span class=\"p\">],[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">20</span><span class=\"p\">],[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">30</span><span class=\"p\">],[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">aff2axcodes</span><span class=\"p\">(</span><span class=\"n\">aff</span><span class=\"p\">,</span> <span class=\"p\">((</span><span class=\"s1\">&#39;L&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;R&#39;</span><span class=\"p\">),(</span><span class=\"s1\">&#39;B&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;F&#39;</span><span class=\"p\">),(</span><span class=\"s1\">&#39;D&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;U&#39;</span><span class=\"p\">)))</span>\n<span class=\"go\">(&#39;B&#39;, &#39;R&#39;, &#39;U&#39;)</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"detect-format\">\n<h3>detect_format<a class=\"headerlink\" href=\"#detect-format\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.streamline.detect_format\">\n<code class=\"descclassname\">dipy.io.streamline.</code><code class=\"descname\">detect_format</code><span class=\"sig-paren\">(</span><em>fileobj</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.detect_format\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns the StreamlinesFile object guessed from the file-like object.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>fileobj</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string or file-like object</span></dt>\n<dd><p class=\"first last\">If string, a filename; otherwise an open file-like object pointing\nto a tractogram file (and ready to read from the beginning of the\nheader)</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>tractogram_file</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TractogramFile</span></code> class</span></dt>\n<dd><p class=\"first last\">The class type guessed from the content of <cite>fileobj</cite>.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"load-dpy\">\n<h3>load_dpy<a class=\"headerlink\" href=\"#load-dpy\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.streamline.load_dpy\">\n<code class=\"descclassname\">dipy.io.streamline.</code><code class=\"descname\">load_dpy</code><span class=\"sig-paren\">(</span><em>filename</em>, <em>lazy_load=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.load_dpy\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Loads tractogram files (<a href=\"#id44\"><span class=\"problematic\" id=\"id45\">*</span></a>.tck)</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>filename</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">str</span></dt>\n<dd><p class=\"first last\">input trk filename</p>\n</dd>\n<dt><strong>lazy_load</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">{False, True}, optional</span></dt>\n<dd><p class=\"first last\">If True, load streamlines in a lazy manner i.e. they will not be kept\nin memory and only be loaded when needed.\nOtherwise, load all streamlines in memory.</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>streamlines</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">list of 2D arrays</span></dt>\n<dd><p class=\"first last\">Each 2D array represents a sequence of 3D points (points, 3).</p>\n</dd>\n<dt><strong>hdr</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">dict</span></dt>\n<dd><p class=\"first last\">header from a trk file</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"load-tck\">\n<h3>load_tck<a class=\"headerlink\" href=\"#load-tck\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.streamline.load_tck\">\n<code class=\"descclassname\">dipy.io.streamline.</code><code class=\"descname\">load_tck</code><span class=\"sig-paren\">(</span><em>filename</em>, <em>lazy_load=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.load_tck\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Loads tractogram files (<a href=\"#id46\"><span class=\"problematic\" id=\"id47\">*</span></a>.tck)</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>filename</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">str</span></dt>\n<dd><p class=\"first last\">input trk filename</p>\n</dd>\n<dt><strong>lazy_load</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">{False, True}, optional</span></dt>\n<dd><p class=\"first last\">If True, load streamlines in a lazy manner i.e. they will not be kept\nin memory and only be loaded when needed.\nOtherwise, load all streamlines in memory.</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>streamlines</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">list of 2D arrays</span></dt>\n<dd><p class=\"first last\">Each 2D array represents a sequence of 3D points (points, 3).</p>\n</dd>\n<dt><strong>hdr</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">dict</span></dt>\n<dd><p class=\"first last\">header from a trk file</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"load-tractogram\">\n<h3>load_tractogram<a class=\"headerlink\" href=\"#load-tractogram\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.streamline.load_tractogram\">\n<code class=\"descclassname\">dipy.io.streamline.</code><code class=\"descname\">load_tractogram</code><span class=\"sig-paren\">(</span><em>filename</em>, <em>lazy_load=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.load_tractogram\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Loads tractogram files (<a href=\"#id48\"><span class=\"problematic\" id=\"id49\">*</span></a>.tck)</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>filename</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">str</span></dt>\n<dd><p class=\"first last\">input trk filename</p>\n</dd>\n<dt><strong>lazy_load</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">{False, True}, optional</span></dt>\n<dd><p class=\"first last\">If True, load streamlines in a lazy manner i.e. they will not be kept\nin memory and only be loaded when needed.\nOtherwise, load all streamlines in memory.</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>streamlines</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">list of 2D arrays</span></dt>\n<dd><p class=\"first last\">Each 2D array represents a sequence of 3D points (points, 3).</p>\n</dd>\n<dt><strong>hdr</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">dict</span></dt>\n<dd><p class=\"first last\">header from a trk file</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"load-trk\">\n<h3>load_trk<a class=\"headerlink\" href=\"#load-trk\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.streamline.load_trk\">\n<code class=\"descclassname\">dipy.io.streamline.</code><code class=\"descname\">load_trk</code><span class=\"sig-paren\">(</span><em>filename</em>, <em>lazy_load=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.load_trk\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Loads tractogram files (<a href=\"#id50\"><span class=\"problematic\" id=\"id51\">*</span></a>.tck)</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>filename</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">str</span></dt>\n<dd><p class=\"first last\">input trk filename</p>\n</dd>\n<dt><strong>lazy_load</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">{False, True}, optional</span></dt>\n<dd><p class=\"first last\">If True, load streamlines in a lazy manner i.e. they will not be kept\nin memory and only be loaded when needed.\nOtherwise, load all streamlines in memory.</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>streamlines</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">list of 2D arrays</span></dt>\n<dd><p class=\"first last\">Each 2D array represents a sequence of 3D points (points, 3).</p>\n</dd>\n<dt><strong>hdr</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">dict</span></dt>\n<dd><p class=\"first last\">header from a trk file</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"save-tractogram\">\n<h3>save_tractogram<a class=\"headerlink\" href=\"#save-tractogram\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.streamline.save_tractogram\">\n<code class=\"descclassname\">dipy.io.streamline.</code><code class=\"descname\">save_tractogram</code><span class=\"sig-paren\">(</span><em>fname</em>, <em>streamlines</em>, <em>affine</em>, <em>vox_size=None</em>, <em>shape=None</em>, <em>header=None</em>, <em>reduce_memory_usage=False</em>, <em>tractogram_file=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.save_tractogram\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Saves tractogram files (<a href=\"#id52\"><span class=\"problematic\" id=\"id53\">*</span></a>.trk or <a href=\"#id54\"><span class=\"problematic\" id=\"id55\">*</span></a>.tck or <a href=\"#id56\"><span class=\"problematic\" id=\"id57\">*</span></a>.dpy)</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>fname</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">str</span></dt>\n<dd><p class=\"first last\">output trk filename</p>\n</dd>\n<dt><strong>streamlines</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">list of 2D arrays, generator or ArraySequence</span></dt>\n<dd><p class=\"first last\">Each 2D array represents a sequence of 3D points (points, 3).</p>\n</dd>\n<dt><strong>affine</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array_like (4, 4)</span></dt>\n<dd><p class=\"first last\">The mapping from voxel coordinates to streamline points.</p>\n</dd>\n<dt><strong>vox_size</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array_like (3,), optional</span></dt>\n<dd><p class=\"first last\">The sizes of the voxels in the reference image (default: None)</p>\n</dd>\n<dt><strong>shape</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, shape (dim,), optional</span></dt>\n<dd><p class=\"first last\">The shape of the reference image (default: None)</p>\n</dd>\n<dt><strong>header</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">dict, optional</span></dt>\n<dd><p class=\"first last\">Metadata associated to the tractogram file(<a href=\"#id58\"><span class=\"problematic\" id=\"id59\">*</span></a>.trk). (default: None)</p>\n</dd>\n<dt><strong>reduce_memory_usage</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">{False, True}, optional</span></dt>\n<dd><p class=\"first last\">If True, save streamlines in a lazy manner i.e. they will not be kept\nin memory. Otherwise, keep all streamlines in memory until saving.</p>\n</dd>\n<dt><strong>tractogram_file</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">class TractogramFile, optional</span></dt>\n<dd><p class=\"first last\">Define tractogram class type (TrkFile vs TckFile)\nDefault is None which means auto detect format</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"save-trk\">\n<h3>save_trk<a class=\"headerlink\" href=\"#save-trk\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.trackvis.save_trk\">\n<code class=\"descclassname\">dipy.io.trackvis.</code><code class=\"descname\">save_trk</code><span class=\"sig-paren\">(</span><em>filename</em>, <em>points</em>, <em>vox_to_ras</em>, <em>shape</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.trackvis.save_trk\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A temporary helper function for saving trk files.</p>\n<p>This function will soon be replaced by better trk file support in nibabel.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"nifti1image\">\n<h3><a class=\"reference internal\" href=\"#dipy.io.utils.Nifti1Image\" title=\"dipy.io.utils.Nifti1Image\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Nifti1Image</span></code></a><a class=\"headerlink\" href=\"#nifti1image\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.io.utils.Nifti1Image\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.io.utils.</code><code class=\"descname\">Nifti1Image</code><span class=\"sig-paren\">(</span><em>dataobj</em>, <em>affine</em>, <em>header=None</em>, <em>extra=None</em>, <em>file_map=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.utils.Nifti1Image\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">nibabel.nifti1.Nifti1Pair</span></code></p>\n<p>Class for single file NIfTI1 format image</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Attributes:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>affine</strong></dt>\n<dd></dd>\n<dt><strong>dataobj</strong></dt>\n<dd></dd>\n<dt><strong>header</strong></dt>\n<dd></dd>\n<dt><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">in_memory</span></code></dt>\n<dd><p class=\"first last\">True when any array data is in memory cache</p>\n</dd>\n<dt><strong>shape</strong></dt>\n<dd></dd>\n<dt><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">slicer</span></code></dt>\n<dd><p class=\"first last\">Slicer object that returns cropped and subsampled images</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">ImageArrayProxy</span></code></td>\n<td>alias of <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">nibabel.arrayproxy.ArrayProxy</span></code></td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">ImageSlicer</span></code></td>\n<td>alias of <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">nibabel.spatialimages.SpatialFirstSlicer</span></code></td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">as_reoriented</span></code>(ornt)</td>\n<td>Apply an orientation change and return a new image</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">filespec_to_file_map</span></code>(filespec)</td>\n<td>Make <cite>file_map</cite> for this class from filename <cite>filespec</cite></td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">filespec_to_files</span></code>(filespec)</td>\n<td>filespec_to_files class method is deprecated.</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">from_file_map</span></code>(file_map[,&nbsp;mmap,&nbsp;keep_file_open])</td>\n<td>class method to create image from mapping in <cite>file_map `</cite></td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">from_filename</span></code>(filename[,&nbsp;mmap,&nbsp;keep_file_open])</td>\n<td>class method to create image from filename <cite>filename</cite></td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">from_files</span></code>(file_map)</td>\n<td>from_files class method is deprecated.</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">from_image</span></code>(img)</td>\n<td>Class method to create new instance of own class from <cite>img</cite></td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_affine</span></code>()</td>\n<td>Get affine from image</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_data</span></code>([caching])</td>\n<td>Return image data from image with any necessary scaling applied</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_fdata</span></code>([caching,&nbsp;dtype])</td>\n<td>Return floating point image data with necessary scaling applied</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_filename</span></code>()</td>\n<td>Fetch the image filename</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_header</span></code>()</td>\n<td>Get header from image</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_qform</span></code>([coded])</td>\n<td>Return 4x4 affine matrix from qform parameters in header</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sform</span></code>([coded])</td>\n<td>Return 4x4 affine matrix from sform parameters in header</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_shape</span></code>()</td>\n<td>Return shape for image</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.io.utils.Nifti1Image.header_class\" title=\"dipy.io.utils.Nifti1Image.header_class\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">header_class</span></code></a></td>\n<td>alias of <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Nifti1Header</span></code></td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">instance_to_filename</span></code>(img,&nbsp;filename)</td>\n<td>Save <cite>img</cite> in our own format, to name implied by <cite>filename</cite></td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">load</span></code>(filename[,&nbsp;mmap,&nbsp;keep_file_open])</td>\n<td>class method to create image from filename <cite>filename</cite></td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">make_file_map</span></code>([mapping])</td>\n<td>Class method to make files holder for this image type</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">orthoview</span></code>()</td>\n<td>Plot the image using OrthoSlicer3D</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">path_maybe_image</span></code>(filename[,&nbsp;sniff,&nbsp;sniff_max])</td>\n<td>Return True if <cite>filename</cite> may be image matching this class</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">set_filename</span></code>(filename)</td>\n<td>Sets the files in the object from a given filename</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">set_qform</span></code>(affine[,&nbsp;code,&nbsp;strip_shears])</td>\n<td>Set qform header values from 4x4 affine</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">set_sform</span></code>(affine[,&nbsp;code])</td>\n<td>Set sform transform from 4x4 affine</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">to_file_map</span></code>([file_map])</td>\n<td>Write image to <cite>file_map</cite> or contained <code class=\"docutils literal notranslate\"><span class=\"pre\">self.file_map</span></code></td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">to_filename</span></code>(filename)</td>\n<td>Write image to files implied by filename string</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">to_files</span></code>([file_map])</td>\n<td>to_files method is deprecated.</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">to_filespec</span></code>(filename)</td>\n<td>to_filespec method is deprecated.</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">uncache</span></code>()</td>\n<td>Delete any cached read of data from proxied data</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.io.utils.Nifti1Image.update_header\" title=\"dipy.io.utils.Nifti1Image.update_header\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">update_header</span></code></a>()</td>\n<td>Harmonize header with image data and affine</td>\n</tr>\n</tbody>\n</table>\n<table border=\"1\" class=\"docutils\">\n<colgroup>\n<col width=\"64%\" />\n<col width=\"36%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><strong>get_data_dtype</strong></td>\n<td>&#160;</td>\n</tr>\n<tr class=\"row-even\"><td><strong>set_data_dtype</strong></td>\n<td>&#160;</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.io.utils.Nifti1Image.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>dataobj</em>, <em>affine</em>, <em>header=None</em>, <em>extra=None</em>, <em>file_map=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.utils.Nifti1Image.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize image</p>\n<blockquote>\n<div>The image is a combination of (array-like, affine matrix, header), with\noptional metadata in <cite>extra</cite>, and filename / file-like objects\ncontained in the <cite>file_map</cite> mapping.</div></blockquote>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>dataobj</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">object</span></dt>\n<dd><blockquote class=\"first\">\n<div><p>Object containg image data.  It should be some object that retuns an\narray from <code class=\"docutils literal notranslate\"><span class=\"pre\">np.asanyarray</span></code>.  It should have a <code class=\"docutils literal notranslate\"><span class=\"pre\">shape</span></code> attribute\nor property</p>\n</div></blockquote>\n<dl class=\"last docutils\">\n<dt>affine <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">None or (4,4) array-like</span></dt>\n<dd><p class=\"first last\">homogenous affine giving relationship between voxel coordinates and\nworld coordinates.  Affine can also be None.  In this case,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">obj.affine</span></code> also returns None, and the affine as written to disk\nwill depend on the file format.</p>\n</dd>\n<dt>header <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">None or mapping or header instance, optional</span></dt>\n<dd><p class=\"first last\">metadata for this image format</p>\n</dd>\n<dt>extra <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">None or mapping, optional</span></dt>\n<dd><p class=\"first last\">metadata to associate with image that cannot be stored in the\nmetadata of this image type</p>\n</dd>\n<dt>file_map <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">mapping, optional</span></dt>\n<dd><p class=\"first last\">mapping giving file information for this image format</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Notes</p>\n<p>If both a <cite>header</cite> and an <cite>affine</cite> are specified, and the <cite>affine</cite> does\nnot match the affine that is in the <cite>header</cite>, the <cite>affine</cite> will be used,\nbut the <code class=\"docutils literal notranslate\"><span class=\"pre\">sform_code</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">qform_code</span></code> fields in the header will be\nre-initialised to their default values. This is performed on the basis\nthat, if you are changing the affine, you are likely to be changing the\nspace to which the affine is pointing.  The <code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">set_sform()</span></code> and\n<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">set_qform()</span></code> methods can be used to update the codes after an image\nhas been created - see those methods, and the <span class=\"xref std std-ref\">manual</span> for more details.</p>\n</dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.io.utils.Nifti1Image.files_types\">\n<code class=\"descname\">files_types</code><em class=\"property\"> = (('image', '.nii'),)</em><a class=\"headerlink\" href=\"#dipy.io.utils.Nifti1Image.files_types\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.io.utils.Nifti1Image.header_class\">\n<code class=\"descname\">header_class</code><a class=\"headerlink\" href=\"#dipy.io.utils.Nifti1Image.header_class\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>alias of <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Nifti1Header</span></code></p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.utils.Nifti1Image.update_header\">\n<code class=\"descname\">update_header</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.utils.Nifti1Image.update_header\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Harmonize header with image data and affine</p>\n</dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.io.utils.Nifti1Image.valid_exts\">\n<code class=\"descname\">valid_exts</code><em class=\"property\"> = ('.nii',)</em><a class=\"headerlink\" href=\"#dipy.io.utils.Nifti1Image.valid_exts\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"decfa\">\n<h3>decfa<a class=\"headerlink\" href=\"#decfa\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.utils.decfa\">\n<code class=\"descclassname\">dipy.io.utils.</code><code class=\"descname\">decfa</code><span class=\"sig-paren\">(</span><em>img_orig</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.utils.decfa\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Create a nifti-compliant directional-encoded color FA file.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>data</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">Nifti1Image class instance.</span></dt>\n<dd><p class=\"first last\">Contains encoding of the DEC FA image with a 4D volume of data, where\nthe elements on the last dimension represent R, G and B components.</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>img</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">Nifti1Image class instance.</span></dt>\n<dd></dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Notes</p>\n<p>For a description of this format, see:</p>\n<p><a class=\"reference external\" href=\"https://nifti.nimh.nih.gov/nifti-1/documentation/nifti1fields/nifti1fields_pages/datatype.html\">https://nifti.nimh.nih.gov/nifti-1/documentation/nifti1fields/nifti1fields_pages/datatype.html</a></p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"make5d\">\n<h3>make5d<a class=\"headerlink\" href=\"#make5d\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.utils.make5d\">\n<code class=\"descclassname\">dipy.io.utils.</code><code class=\"descname\">make5d</code><span class=\"sig-paren\">(</span><em>input</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.utils.make5d\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>reshapes the input to have 5 dimensions, adds extra dimensions just\nbefore the last dimession</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"nifti1-symmat\">\n<h3>nifti1_symmat<a class=\"headerlink\" href=\"#nifti1-symmat\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.utils.nifti1_symmat\">\n<code class=\"descclassname\">dipy.io.utils.</code><code class=\"descname\">nifti1_symmat</code><span class=\"sig-paren\">(</span><em>image_data</em>, <em>*args</em>, <em>**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.utils.nifti1_symmat\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns a Nifti1Image with a symmetric matrix intent</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"load-polydata\">\n<h3>load_polydata<a class=\"headerlink\" href=\"#load-polydata\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.vtk.load_polydata\">\n<code class=\"descclassname\">dipy.io.vtk.</code><code class=\"descname\">load_polydata</code><span class=\"sig-paren\">(</span><em>file_name</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.vtk.load_polydata\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Load a vtk polydata to a supported format file.</p>\n<p>Supported file formats are OBJ, VTK, FIB, PLY, STL and XML</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>file_name</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd></dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>output</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">vtkPolyData</span></dt>\n<dd></dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"optional-package\">\n<h3>optional_package<a class=\"headerlink\" href=\"#optional-package\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.vtk.optional_package\">\n<code class=\"descclassname\">dipy.io.vtk.</code><code class=\"descname\">optional_package</code><span class=\"sig-paren\">(</span><em>name</em>, <em>trip_msg=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.vtk.optional_package\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return package-like thing and module setup for package <cite>name</cite></p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>name</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">str</span></dt>\n<dd><p class=\"first last\">package name</p>\n</dd>\n<dt><strong>trip_msg</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">None or str</span></dt>\n<dd><p class=\"first last\">message to give when someone tries to use the return package, but we\ncould not import it, and have returned a TripWire object instead.\nDefault message if None.</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>pkg_like</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">module or <code class=\"docutils literal notranslate\"><span class=\"pre\">TripWire</span></code> instance</span></dt>\n<dd><p class=\"first last\">If we can import the package, return it.  Otherwise return an object\nraising an error when accessed</p>\n</dd>\n<dt><strong>have_pkg</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool</span></dt>\n<dd><p class=\"first last\">True if import for package was successful, false otherwise</p>\n</dd>\n<dt><strong>module_setup</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">function</span></dt>\n<dd><p class=\"first last\">callable usually set as <code class=\"docutils literal notranslate\"><span class=\"pre\">setup_module</span></code> in calling namespace, to allow\nskipping tests.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"save-polydata\">\n<h3>save_polydata<a class=\"headerlink\" href=\"#save-polydata\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.vtk.save_polydata\">\n<code class=\"descclassname\">dipy.io.vtk.</code><code class=\"descname\">save_polydata</code><span class=\"sig-paren\">(</span><em>polydata</em>, <em>file_name</em>, <em>binary=False</em>, <em>color_array_name=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.vtk.save_polydata\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Save a vtk polydata to a supported format file.</p>\n<p>Save formats can be VTK, FIB, PLY, STL and XML.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>polydata</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">vtkPolyData</span></dt>\n<dd></dd>\n<dt><strong>file_name</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd></dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"setup-module\">\n<h3>setup_module<a class=\"headerlink\" href=\"#setup-module\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.vtk.setup_module\">\n<code class=\"descclassname\">dipy.io.vtk.</code><code class=\"descname\">setup_module</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.vtk.setup_module\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</div>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"]], "sourcename": "reference/dipy.io.rst.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\"><code class=\"docutils literal notranslate\"><span class=\"pre\">io</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#module-dipy.io.bvectxt\">Module: <code class=\"docutils literal notranslate\"><span class=\"pre\">io.bvectxt</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.io.dpy\">Module: <code class=\"docutils literal notranslate\"><span class=\"pre\">io.dpy</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#references\">References</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#module-dipy.io.gradients\">Module: <code class=\"docutils literal notranslate\"><span class=\"pre\">io.gradients</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.io.image\">Module: <code class=\"docutils literal notranslate\"><span class=\"pre\">io.image</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.io.peaks\">Module: <code class=\"docutils literal notranslate\"><span class=\"pre\">io.peaks</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.io.pickles\">Module: <code class=\"docutils literal notranslate\"><span class=\"pre\">io.pickles</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.io.streamline\">Module: <code class=\"docutils literal notranslate\"><span class=\"pre\">io.streamline</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.io.trackvis\">Module: <code class=\"docutils literal notranslate\"><span class=\"pre\">io.trackvis</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.io.utils\">Module: <code class=\"docutils literal notranslate\"><span class=\"pre\">io.utils</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.io.vtk\">Module: <code class=\"docutils literal notranslate\"><span class=\"pre\">io.vtk</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dpy\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Dpy</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#load-pickle\">load_pickle</a></li>\n<li><a class=\"reference internal\" href=\"#orientation-from-string\">orientation_from_string</a></li>\n<li><a class=\"reference internal\" href=\"#orientation-to-string\">orientation_to_string</a></li>\n<li><a class=\"reference internal\" href=\"#ornt-mapping\">ornt_mapping</a></li>\n<li><a class=\"reference internal\" href=\"#read-bvals-bvecs\">read_bvals_bvecs</a></li>\n<li><a class=\"reference internal\" href=\"#read-bvec-file\">read_bvec_file</a></li>\n<li><a class=\"reference internal\" href=\"#reorient-on-axis\">reorient_on_axis</a></li>\n<li><a class=\"reference internal\" href=\"#reorient-vectors\">reorient_vectors</a></li>\n<li><a class=\"reference internal\" href=\"#save-pickle\">save_pickle</a></li>\n<li><a class=\"reference internal\" href=\"#id20\">orientation_from_string</a></li>\n<li><a class=\"reference internal\" href=\"#id21\">orientation_to_string</a></li>\n<li><a class=\"reference internal\" href=\"#id22\">ornt_mapping</a></li>\n<li><a class=\"reference internal\" href=\"#id23\">read_bvec_file</a></li>\n<li><a class=\"reference internal\" href=\"#id24\">reorient_on_axis</a></li>\n<li><a class=\"reference internal\" href=\"#id25\">reorient_vectors</a></li>\n<li><a class=\"reference internal\" href=\"#splitext\">splitext</a></li>\n<li><a class=\"reference internal\" href=\"#id26\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Dpy</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#streamlines\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Streamlines</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#intemporarydirectory\"><code class=\"docutils literal notranslate\"><span class=\"pre\">InTemporaryDirectory</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#id27\">read_bvals_bvecs</a></li>\n<li><a class=\"reference internal\" href=\"#id28\">splitext</a></li>\n<li><a class=\"reference internal\" href=\"#load-nifti\">load_nifti</a></li>\n<li><a class=\"reference internal\" href=\"#save-nifti\">save_nifti</a></li>\n<li><a class=\"reference internal\" href=\"#peaksandmetrics\"><code class=\"docutils literal notranslate\"><span class=\"pre\">PeaksAndMetrics</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#sphere\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Sphere</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#load-peaks\">load_peaks</a></li>\n<li><a class=\"reference internal\" href=\"#peaks-to-niftis\">peaks_to_niftis</a></li>\n<li><a class=\"reference internal\" href=\"#reshape-peaks-for-visualization\">reshape_peaks_for_visualization</a></li>\n<li><a class=\"reference internal\" href=\"#id29\">save_nifti</a></li>\n<li><a class=\"reference internal\" href=\"#save-peaks\">save_peaks</a></li>\n<li><a class=\"reference internal\" href=\"#id30\">load_pickle</a></li>\n<li><a class=\"reference internal\" href=\"#id31\">save_pickle</a></li>\n<li><a class=\"reference internal\" href=\"#id32\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Dpy</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#field\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Field</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#lazytractogram\"><code class=\"docutils literal notranslate\"><span class=\"pre\">LazyTractogram</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#id35\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Streamlines</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#tckfile\"><code class=\"docutils literal notranslate\"><span class=\"pre\">TckFile</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#tractogram\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Tractogram</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#trkfile\"><code class=\"docutils literal notranslate\"><span class=\"pre\">TrkFile</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#partial\"><code class=\"docutils literal notranslate\"><span class=\"pre\">partial</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#aff2axcodes\">aff2axcodes</a></li>\n<li><a class=\"reference internal\" href=\"#detect-format\">detect_format</a></li>\n<li><a class=\"reference internal\" href=\"#load-dpy\">load_dpy</a></li>\n<li><a class=\"reference internal\" href=\"#load-tck\">load_tck</a></li>\n<li><a class=\"reference internal\" href=\"#load-tractogram\">load_tractogram</a></li>\n<li><a class=\"reference internal\" href=\"#load-trk\">load_trk</a></li>\n<li><a class=\"reference internal\" href=\"#save-tractogram\">save_tractogram</a></li>\n<li><a class=\"reference internal\" href=\"#save-trk\">save_trk</a></li>\n<li><a class=\"reference internal\" href=\"#nifti1image\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Nifti1Image</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#decfa\">decfa</a></li>\n<li><a class=\"reference internal\" href=\"#make5d\">make5d</a></li>\n<li><a class=\"reference internal\" href=\"#nifti1-symmat\">nifti1_symmat</a></li>\n<li><a class=\"reference internal\" href=\"#load-polydata\">load_polydata</a></li>\n<li><a class=\"reference internal\" href=\"#optional-package\">optional_package</a></li>\n<li><a class=\"reference internal\" href=\"#save-polydata\">save_polydata</a></li>\n<li><a class=\"reference internal\" href=\"#setup-module\">setup_module</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".rst", "current_page_name": "reference/dipy.io", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.11"}