{"parents": [{"link": "../../documentation/", "title": "Documentation"}, {"link": "../", "title": "API Reference"}], "prev": null, "next": {"link": "../dipy.workflows/", "title": "<code class=\"docutils literal notranslate\"><span class=\"pre\">workflows</span></code>"}, "title": "<code class=\"docutils literal notranslate\"><span class=\"pre\">viz</span></code>", "meta": {}, "body": "<div class=\"section\" id=\"module-dipy.viz\">\n<span id=\"viz\"></span><h1><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">viz</span></code><a class=\"headerlink\" href=\"#module-dipy.viz\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.viz.fetch_viz_icons\" title=\"dipy.viz.fetch_viz_icons\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">fetch_viz_icons</span></code></a>()</td>\n<td>Download icons for fury</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.viz.optional_package\" title=\"dipy.viz.optional_package\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">optional_package</span></code></a>(name[,&nbsp;trip_msg])</td>\n<td>Return package-like thing and module setup for package <cite>name</cite></td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.viz.read_viz_icons\" title=\"dipy.viz.read_viz_icons\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">read_viz_icons</span></code></a>([style,&nbsp;fname])</td>\n<td>Read specific icon from specific style.</td>\n</tr>\n</tbody>\n</table>\n<div class=\"section\" id=\"module-dipy.viz.projections\">\n<span id=\"module-viz-projections\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">viz.projections</span></code><a class=\"headerlink\" href=\"#module-dipy.viz.projections\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Visualization tools for 2D projections of 3D functions on the sphere, such as\nODFs.</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.viz.projections.doctest_skip_parser\" title=\"dipy.viz.projections.doctest_skip_parser\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">doctest_skip_parser</span></code></a>(func)</td>\n<td>Decorator replaces custom skip test markup in doctests.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.viz.projections.optional_package\" title=\"dipy.viz.projections.optional_package\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">optional_package</span></code></a>(name[,&nbsp;trip_msg])</td>\n<td>Return package-like thing and module setup for package <cite>name</cite></td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.viz.projections.setup_module\" title=\"dipy.viz.projections.setup_module\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">setup_module</span></code></a>()</td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.viz.projections.sph_project\" title=\"dipy.viz.projections.sph_project\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">sph_project</span></code></a>(vertices,&nbsp;val[,&nbsp;ax,&nbsp;vmin,&nbsp;vmax,&nbsp;\u2026])</td>\n<td>Draw a signal on a 2D projection of the sphere.</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.viz.regtools\">\n<span id=\"module-viz-regtools\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">viz.regtools</span></code><a class=\"headerlink\" href=\"#module-dipy.viz.regtools\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.viz.regtools.draw_lattice_2d\" title=\"dipy.viz.regtools.draw_lattice_2d\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">draw_lattice_2d</span></code></a>(nrows,&nbsp;ncols,&nbsp;delta)</td>\n<td>Create a regular lattice of nrows x ncols squares.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.viz.regtools.optional_package\" title=\"dipy.viz.regtools.optional_package\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">optional_package</span></code></a>(name[,&nbsp;trip_msg])</td>\n<td>Return package-like thing and module setup for package <cite>name</cite></td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.viz.regtools.overlay_images\" title=\"dipy.viz.regtools.overlay_images\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">overlay_images</span></code></a>(img0,&nbsp;img1[,&nbsp;title0,&nbsp;\u2026])</td>\n<td>Plot two images one on top of the other using red and green channels.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.viz.regtools.overlay_slices\" title=\"dipy.viz.regtools.overlay_slices\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">overlay_slices</span></code></a>(L,&nbsp;R[,&nbsp;slice_index,&nbsp;\u2026])</td>\n<td>Plot three overlaid slices from the given volumes.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.viz.regtools.plot_2d_diffeomorphic_map\" title=\"dipy.viz.regtools.plot_2d_diffeomorphic_map\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">plot_2d_diffeomorphic_map</span></code></a>(mapping[,&nbsp;delta,&nbsp;\u2026])</td>\n<td>Draw the effect of warping a regular lattice by a diffeomorphic map.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.viz.regtools.plot_slices\" title=\"dipy.viz.regtools.plot_slices\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">plot_slices</span></code></a>(V[,&nbsp;slice_indices,&nbsp;fname])</td>\n<td>Plot 3 slices from the given volume: 1 sagital, 1 coronal and 1 axial</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.viz.regtools.setup_module\" title=\"dipy.viz.regtools.setup_module\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">setup_module</span></code></a>()</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<div class=\"section\" id=\"fetch-viz-icons\">\n<h3>fetch_viz_icons<a class=\"headerlink\" href=\"#fetch-viz-icons\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.viz.fetch_viz_icons\">\n<code class=\"descclassname\">dipy.viz.</code><code class=\"descname\">fetch_viz_icons</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.viz.fetch_viz_icons\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Download icons for fury</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"optional-package\">\n<h3>optional_package<a class=\"headerlink\" href=\"#optional-package\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.viz.optional_package\">\n<code class=\"descclassname\">dipy.viz.</code><code class=\"descname\">optional_package</code><span class=\"sig-paren\">(</span><em>name</em>, <em>trip_msg=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.viz.optional_package\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return package-like thing and module setup for package <cite>name</cite></p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>name</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">str</span></dt>\n<dd><p class=\"first last\">package name</p>\n</dd>\n<dt><strong>trip_msg</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">None or str</span></dt>\n<dd><p class=\"first last\">message to give when someone tries to use the return package, but we\ncould not import it, and have returned a TripWire object instead.\nDefault message if None.</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>pkg_like</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">module or <code class=\"docutils literal notranslate\"><span class=\"pre\">TripWire</span></code> instance</span></dt>\n<dd><p class=\"first last\">If we can import the package, return it.  Otherwise return an object\nraising an error when accessed</p>\n</dd>\n<dt><strong>have_pkg</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool</span></dt>\n<dd><p class=\"first last\">True if import for package was successful, false otherwise</p>\n</dd>\n<dt><strong>module_setup</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">function</span></dt>\n<dd><p class=\"first last\">callable usually set as <code class=\"docutils literal notranslate\"><span class=\"pre\">setup_module</span></code> in calling namespace, to allow\nskipping tests.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"read-viz-icons\">\n<h3>read_viz_icons<a class=\"headerlink\" href=\"#read-viz-icons\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.viz.read_viz_icons\">\n<code class=\"descclassname\">dipy.viz.</code><code class=\"descname\">read_viz_icons</code><span class=\"sig-paren\">(</span><em>style='icomoon'</em>, <em>fname='infinity.png'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.viz.read_viz_icons\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Read specific icon from specific style.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>style</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">str</span></dt>\n<dd><p class=\"first last\">Current icon style. Default is icomoon.</p>\n</dd>\n<dt><strong>fname</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">str</span></dt>\n<dd><p class=\"first last\">Filename of icon. This should be found in folder HOME/.fury/style/.\nDefault is infinity.png.</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>path</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">str</span></dt>\n<dd><p class=\"first last\">Complete path of icon.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"doctest-skip-parser\">\n<h3>doctest_skip_parser<a class=\"headerlink\" href=\"#doctest-skip-parser\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.viz.projections.doctest_skip_parser\">\n<code class=\"descclassname\">dipy.viz.projections.</code><code class=\"descname\">doctest_skip_parser</code><span class=\"sig-paren\">(</span><em>func</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.viz.projections.doctest_skip_parser\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Decorator replaces custom skip test markup in doctests.</p>\n<p>Say a function has a docstring:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">something</span> <span class=\"c1\"># skip if not HAVE_AMODULE</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">something</span> <span class=\"o\">+</span> <span class=\"k\">else</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">something</span> <span class=\"c1\"># skip if HAVE_BMODULE</span>\n</pre></div>\n</div>\n<p>This decorator will evaluate the expresssion after <code class=\"docutils literal notranslate\"><span class=\"pre\">skip</span> <span class=\"pre\">if</span></code>.  If this\nevaluates to True, then the comment is replaced by <code class=\"docutils literal notranslate\"><span class=\"pre\">#</span> <span class=\"pre\">doctest:</span> <span class=\"pre\">+SKIP</span></code>.\nIf False, then the comment is just removed. The expression is evaluated in\nthe <code class=\"docutils literal notranslate\"><span class=\"pre\">globals</span></code> scope of <cite>func</cite>.</p>\n<p>For example, if the module global <code class=\"docutils literal notranslate\"><span class=\"pre\">HAVE_AMODULE</span></code> is False, and module\nglobal <code class=\"docutils literal notranslate\"><span class=\"pre\">HAVE_BMODULE</span></code> is False, the returned function will have\ndocstring:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">something</span> \n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">something</span> <span class=\"o\">+</span> <span class=\"k\">else</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">something</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id1\">\n<h3>optional_package<a class=\"headerlink\" href=\"#id1\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.viz.projections.optional_package\">\n<code class=\"descclassname\">dipy.viz.projections.</code><code class=\"descname\">optional_package</code><span class=\"sig-paren\">(</span><em>name</em>, <em>trip_msg=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.viz.projections.optional_package\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return package-like thing and module setup for package <cite>name</cite></p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>name</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">str</span></dt>\n<dd><p class=\"first last\">package name</p>\n</dd>\n<dt><strong>trip_msg</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">None or str</span></dt>\n<dd><p class=\"first last\">message to give when someone tries to use the return package, but we\ncould not import it, and have returned a TripWire object instead.\nDefault message if None.</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>pkg_like</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">module or <code class=\"docutils literal notranslate\"><span class=\"pre\">TripWire</span></code> instance</span></dt>\n<dd><p class=\"first last\">If we can import the package, return it.  Otherwise return an object\nraising an error when accessed</p>\n</dd>\n<dt><strong>have_pkg</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool</span></dt>\n<dd><p class=\"first last\">True if import for package was successful, false otherwise</p>\n</dd>\n<dt><strong>module_setup</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">function</span></dt>\n<dd><p class=\"first last\">callable usually set as <code class=\"docutils literal notranslate\"><span class=\"pre\">setup_module</span></code> in calling namespace, to allow\nskipping tests.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"setup-module\">\n<h3>setup_module<a class=\"headerlink\" href=\"#setup-module\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.viz.projections.setup_module\">\n<code class=\"descclassname\">dipy.viz.projections.</code><code class=\"descname\">setup_module</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.viz.projections.setup_module\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</div>\n<div class=\"section\" id=\"sph-project\">\n<h3>sph_project<a class=\"headerlink\" href=\"#sph-project\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.viz.projections.sph_project\">\n<code class=\"descclassname\">dipy.viz.projections.</code><code class=\"descname\">sph_project</code><span class=\"sig-paren\">(</span><em>vertices</em>, <em>val</em>, <em>ax=None</em>, <em>vmin=None</em>, <em>vmax=None</em>, <em>cmap=None</em>, <em>cbar=True</em>, <em>tri=False</em>, <em>boundary=False</em>, <em>**basemap_args</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.viz.projections.sph_project\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Draw a signal on a 2D projection of the sphere.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>vertices</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">(N,3) ndarray</span></dt>\n<dd><p class=\"first last\">unit vector points of the sphere</p>\n</dd>\n<dt><strong>val: (N) ndarray</strong></dt>\n<dd><p class=\"first last\">Function values.</p>\n</dd>\n<dt><strong>ax</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">mpl axis, optional</span></dt>\n<dd><p class=\"first last\">If specified, draw onto this existing axis instead.</p>\n</dd>\n<dt><strong>vmin, vmax</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">floats</span></dt>\n<dd><p class=\"first last\">Values to cut the z</p>\n</dd>\n<dt><strong>cmap</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">mpl colormap</span></dt>\n<dd></dd>\n<dt><strong>cbar: Whether to add the color-bar to the figure</strong></dt>\n<dd></dd>\n<dt><strong>triang</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">Whether to display the plot triangulated as a pseudo-color plot.</span></dt>\n<dd></dd>\n<dt><strong>boundary</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">Whether to draw the boundary around the projection</span></dt>\n<dd></dd>\n<dt><strong>in a black line</strong></dt>\n<dd></dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>ax</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">axis</span></dt>\n<dd><p class=\"first last\">Matplotlib figure axis</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">dipy.data</span> <span class=\"k\">import</span> <span class=\"n\">get_sphere</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">verts</span> <span class=\"o\">=</span> <span class=\"n\">get_sphere</span><span class=\"p\">(</span><span class=\"s1\">&#39;symmetric724&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">vertices</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"n\">sph_project</span><span class=\"p\">(</span><span class=\"n\">verts</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">verts</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">)))</span> \n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"draw-lattice-2d\">\n<h3>draw_lattice_2d<a class=\"headerlink\" href=\"#draw-lattice-2d\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.viz.regtools.draw_lattice_2d\">\n<code class=\"descclassname\">dipy.viz.regtools.</code><code class=\"descname\">draw_lattice_2d</code><span class=\"sig-paren\">(</span><em>nrows</em>, <em>ncols</em>, <em>delta</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.viz.regtools.draw_lattice_2d\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Create a regular lattice of nrows x ncols squares.</p>\n<p>Creates an image (2D array) of a regular lattice of nrows x ncols squares.\nThe size of each square is delta x delta pixels (not counting the\nseparation lines). The lines are one pixel width.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>nrows</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int</span></dt>\n<dd><p class=\"first last\">the number of squares to be drawn vertically</p>\n</dd>\n<dt><strong>ncols</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int</span></dt>\n<dd><p class=\"first last\">the number of squares to be drawn horizontally</p>\n</dd>\n<dt><strong>delta</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int</span></dt>\n<dd><p class=\"first last\">the size of each square of the grid. Each square is delta x delta\npixels</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>lattice</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, shape (R, C)</span></dt>\n<dd><p class=\"first last\">the image (2D array) of the segular lattice. The shape (R, C) of the\narray is given by\nR = 1 + (delta + 1) * nrows\nC = 1 + (delta + 1) * ncols</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id2\">\n<h3>optional_package<a class=\"headerlink\" href=\"#id2\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.viz.regtools.optional_package\">\n<code class=\"descclassname\">dipy.viz.regtools.</code><code class=\"descname\">optional_package</code><span class=\"sig-paren\">(</span><em>name</em>, <em>trip_msg=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.viz.regtools.optional_package\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return package-like thing and module setup for package <cite>name</cite></p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>name</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">str</span></dt>\n<dd><p class=\"first last\">package name</p>\n</dd>\n<dt><strong>trip_msg</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">None or str</span></dt>\n<dd><p class=\"first last\">message to give when someone tries to use the return package, but we\ncould not import it, and have returned a TripWire object instead.\nDefault message if None.</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>pkg_like</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">module or <code class=\"docutils literal notranslate\"><span class=\"pre\">TripWire</span></code> instance</span></dt>\n<dd><p class=\"first last\">If we can import the package, return it.  Otherwise return an object\nraising an error when accessed</p>\n</dd>\n<dt><strong>have_pkg</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool</span></dt>\n<dd><p class=\"first last\">True if import for package was successful, false otherwise</p>\n</dd>\n<dt><strong>module_setup</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">function</span></dt>\n<dd><p class=\"first last\">callable usually set as <code class=\"docutils literal notranslate\"><span class=\"pre\">setup_module</span></code> in calling namespace, to allow\nskipping tests.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"overlay-images\">\n<h3>overlay_images<a class=\"headerlink\" href=\"#overlay-images\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.viz.regtools.overlay_images\">\n<code class=\"descclassname\">dipy.viz.regtools.</code><code class=\"descname\">overlay_images</code><span class=\"sig-paren\">(</span><em>img0</em>, <em>img1</em>, <em>title0=''</em>, <em>title_mid=''</em>, <em>title1=''</em>, <em>fname=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.viz.regtools.overlay_images\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Plot two images one on top of the other using red and green channels.</p>\n<p>Creates a figure containing three images: the first image to the left\nplotted on the red channel of a color image, the second to the right\nplotted on the green channel of a color image and the two given images on\ntop of each other using the red channel for the first image and the green\nchannel for the second one. It is assumed that both images have the same\nshape. The intended use of this function is to visually assess the quality\nof a registration result.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>img0</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, shape(R, C)</span></dt>\n<dd><p class=\"first last\">the image to be plotted on the red channel, to the left of the figure</p>\n</dd>\n<dt><strong>img1</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, shape(R, C)</span></dt>\n<dd><p class=\"first last\">the image to be plotted on the green channel, to the right of the\nfigure</p>\n</dd>\n<dt><strong>title0</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string (optional)</span></dt>\n<dd><p class=\"first last\">the title to be written on top of the image to the left. By default, no\ntitle is displayed.</p>\n</dd>\n<dt><strong>title_mid</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string (optional)</span></dt>\n<dd><p class=\"first last\">the title to be written on top of the middle image. By default, no\ntitle is displayed.</p>\n</dd>\n<dt><strong>title1</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string (optional)</span></dt>\n<dd><p class=\"first last\">the title to be written on top of the image to the right. By default,\nno title is displayed.</p>\n</dd>\n<dt><strong>fname</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string (optional)</span></dt>\n<dd><p class=\"first last\">the file name to write the resulting figure. If None (default), the\nimage is not saved.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"overlay-slices\">\n<h3>overlay_slices<a class=\"headerlink\" href=\"#overlay-slices\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.viz.regtools.overlay_slices\">\n<code class=\"descclassname\">dipy.viz.regtools.</code><code class=\"descname\">overlay_slices</code><span class=\"sig-paren\">(</span><em>L</em>, <em>R</em>, <em>slice_index=None</em>, <em>slice_type=1</em>, <em>ltitle='Left'</em>, <em>rtitle='Right'</em>, <em>fname=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.viz.regtools.overlay_slices\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Plot three overlaid slices from the given volumes.</p>\n<p>Creates a figure containing three images: the gray scale k-th slice of\nthe first volume (L) to the left, where k=slice_index, the k-th slice of\nthe second volume (R) to the right and the k-th slices of the two given\nimages on top of each other using the red channel for the first volume and\nthe green channel for the second one. It is assumed that both volumes have\nthe same shape. The intended use of this function is to visually assess the\nquality of a registration result.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>L</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, shape (S, R, C)</span></dt>\n<dd><p class=\"first last\">the first volume to extract the slice from, plottet to the left</p>\n</dd>\n<dt><strong>R</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, shape (S, R, C)</span></dt>\n<dd><p class=\"first last\">the second volume to extract the slice from, plotted to the right</p>\n</dd>\n<dt><strong>slice_index</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int (optional)</span></dt>\n<dd><p class=\"first last\">the index of the slices (along the axis given by slice_type) to be\noverlaid. If None, the slice along the specified axis is used</p>\n</dd>\n<dt><strong>slice_type</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int (optional)</span></dt>\n<dd><p class=\"first last\">the type of slice to be extracted:\n0=sagital, 1=coronal (default), 2=axial.</p>\n</dd>\n<dt><strong>ltitle</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string (optional)</span></dt>\n<dd><p class=\"first last\">the string to be written as title of the left image. By default,\nno title is displayed.</p>\n</dd>\n<dt><strong>rtitle</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string (optional)</span></dt>\n<dd><p class=\"first last\">the string to be written as title of the right image. By default,\nno title is displayed.</p>\n</dd>\n<dt><strong>fname</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string (optional)</span></dt>\n<dd><p class=\"first last\">the name of the file to write the image to. If None (default), the\nfigure is not saved to disk.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"plot-2d-diffeomorphic-map\">\n<h3>plot_2d_diffeomorphic_map<a class=\"headerlink\" href=\"#plot-2d-diffeomorphic-map\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.viz.regtools.plot_2d_diffeomorphic_map\">\n<code class=\"descclassname\">dipy.viz.regtools.</code><code class=\"descname\">plot_2d_diffeomorphic_map</code><span class=\"sig-paren\">(</span><em>mapping</em>, <em>delta=10</em>, <em>fname=None</em>, <em>direct_grid_shape=None</em>, <em>direct_grid2world=-1</em>, <em>inverse_grid_shape=None</em>, <em>inverse_grid2world=-1</em>, <em>show_figure=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.viz.regtools.plot_2d_diffeomorphic_map\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Draw the effect of warping a regular lattice by a diffeomorphic map.</p>\n<p>Draws a diffeomorphic map by showing the effect of the deformation on a\nregular grid. The resulting figure contains two images: the direct\ntransformation is plotted to the left, and the inverse transformation is\nplotted to the right.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>mapping</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">DiffeomorphicMap object</span></dt>\n<dd><p class=\"first last\">the diffeomorphic map to be drawn</p>\n</dd>\n<dt><strong>delta</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int, optional</span></dt>\n<dd><p class=\"first last\">the size (in pixels) of the squares of the regular lattice to be used\nto plot the warping effects. Each square will be delta x delta pixels.\nBy default, the size will be 10 pixels.</p>\n</dd>\n<dt><strong>fname</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">the name of the file the figure will be written to. If None (default),\nthe figure will not be saved to disk.</p>\n</dd>\n<dt><strong>direct_grid_shape</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">tuple, shape (2,), optional</span></dt>\n<dd><p class=\"first last\">the shape of the grid image after being deformed by the direct\ntransformation. By default, the shape of the deformed grid is the\nsame as the grid of the displacement field, which is by default\nequal to the shape of the fixed image. In other words, the resulting\ndeformed grid (deformed by the direct transformation) will normally\nhave the same shape as the fixed image.</p>\n</dd>\n<dt><strong>direct_grid2world</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, shape (3, 3), optional</span></dt>\n<dd><p class=\"first last\">the affine transformation mapping the direct grid\u2019s coordinates to\nphysical space. By default, this transformation will correspond to\nthe image-to-world transformation corresponding to the default\ndirect_grid_shape (in general, if users specify a direct_grid_shape,\nthey should also specify direct_grid2world).</p>\n</dd>\n<dt><strong>inverse_grid_shape</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">tuple, shape (2,), optional</span></dt>\n<dd><p class=\"first last\">the shape of the grid image after being deformed by the inverse\ntransformation. By default, the shape of the deformed grid under the\ninverse transform is the same as the image used as \u201cmoving\u201d when\nthe diffeomorphic map was generated by a registration algorithm\n(so it corresponds to the effect of warping the static image towards\nthe moving).</p>\n</dd>\n<dt><strong>inverse_grid2world</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, shape (3, 3), optional</span></dt>\n<dd><p class=\"first last\">the affine transformation mapping inverse grid\u2019s coordinates to\nphysical space. By default, this transformation will correspond to\nthe image-to-world transformation corresponding to the default\ninverse_grid_shape (in general, if users specify an inverse_grid_shape,\nthey should also specify inverse_grid2world).</p>\n</dd>\n<dt><strong>show_figure</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool, optional</span></dt>\n<dd><p class=\"first last\">if True (default), the deformed grids will be ploted using matplotlib,\nelse the grids are just returned</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>warped_forward</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array</span></dt>\n<dd><p class=\"first last\">Image with grid showing the effect of transforming the moving image to\nthe static image.  Shape will be <cite>direct_grid_shape</cite> if specified,\notherwise the shape of the static image.</p>\n</dd>\n<dt><strong>warped_backward</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array</span></dt>\n<dd><p class=\"first last\">Image with grid showing the effect of transforming the static image to\nthe moving image.  Shape will be <cite>inverse_grid_shape</cite> if specified,\notherwise the shape of the moving image.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"plot-slices\">\n<h3>plot_slices<a class=\"headerlink\" href=\"#plot-slices\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.viz.regtools.plot_slices\">\n<code class=\"descclassname\">dipy.viz.regtools.</code><code class=\"descname\">plot_slices</code><span class=\"sig-paren\">(</span><em>V</em>, <em>slice_indices=None</em>, <em>fname=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.viz.regtools.plot_slices\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Plot 3 slices from the given volume: 1 sagital, 1 coronal and 1 axial</p>\n<p>Creates a figure showing the axial, coronal and sagital slices at the\nrequested positions of the given volume. The requested slices are specified\nby slice_indices.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>V</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, shape (S, R, C)</span></dt>\n<dd><p class=\"first last\">the 3D volume to extract the slices from</p>\n</dd>\n<dt><strong>slice_indices</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, shape (3,) (optional)</span></dt>\n<dd><p class=\"first last\">the indices of the sagital (slice_indices[0]), coronal\n(slice_indices[1])\nand axial (slice_indices[2]) slices to be displayed. If None, the\nmiddle slices along each direction are displayed.</p>\n</dd>\n<dt><strong>fname</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string (optional)</span></dt>\n<dd><p class=\"first last\">the name of the file to save the figure to. If None (default), the\nfigure is not saved to disk.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id3\">\n<h3>setup_module<a class=\"headerlink\" href=\"#id3\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.viz.regtools.setup_module\">\n<code class=\"descclassname\">dipy.viz.regtools.</code><code class=\"descname\">setup_module</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.viz.regtools.setup_module\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</div>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["reference/dipy.workflows", "<code class=\"docutils literal notranslate\"><span class=\"pre\">workflows</span></code>", "N", "next"]], "sourcename": "reference/dipy.viz.rst.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\"><code class=\"docutils literal notranslate\"><span class=\"pre\">viz</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#module-dipy.viz.projections\">Module: <code class=\"docutils literal notranslate\"><span class=\"pre\">viz.projections</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.viz.regtools\">Module: <code class=\"docutils literal notranslate\"><span class=\"pre\">viz.regtools</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#fetch-viz-icons\">fetch_viz_icons</a></li>\n<li><a class=\"reference internal\" href=\"#optional-package\">optional_package</a></li>\n<li><a class=\"reference internal\" href=\"#read-viz-icons\">read_viz_icons</a></li>\n<li><a class=\"reference internal\" href=\"#doctest-skip-parser\">doctest_skip_parser</a></li>\n<li><a class=\"reference internal\" href=\"#id1\">optional_package</a></li>\n<li><a class=\"reference internal\" href=\"#setup-module\">setup_module</a></li>\n<li><a class=\"reference internal\" href=\"#sph-project\">sph_project</a></li>\n<li><a class=\"reference internal\" href=\"#draw-lattice-2d\">draw_lattice_2d</a></li>\n<li><a class=\"reference internal\" href=\"#id2\">optional_package</a></li>\n<li><a class=\"reference internal\" href=\"#overlay-images\">overlay_images</a></li>\n<li><a class=\"reference internal\" href=\"#overlay-slices\">overlay_slices</a></li>\n<li><a class=\"reference internal\" href=\"#plot-2d-diffeomorphic-map\">plot_2d_diffeomorphic_map</a></li>\n<li><a class=\"reference internal\" href=\"#plot-slices\">plot_slices</a></li>\n<li><a class=\"reference internal\" href=\"#id3\">setup_module</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".rst", "current_page_name": "reference/dipy.viz", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.11"}