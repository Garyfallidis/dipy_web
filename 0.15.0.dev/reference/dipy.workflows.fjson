{"parents": [{"link": "../../documentation/", "title": "Documentation"}, {"link": "../", "title": "API Reference"}], "prev": {"link": "../dipy.viz/", "title": "<code class=\"docutils literal notranslate\"><span class=\"pre\">viz</span></code>"}, "next": null, "title": "<code class=\"docutils literal notranslate\"><span class=\"pre\">workflows</span></code>", "meta": {}, "body": "<div class=\"section\" id=\"module-dipy.workflows\">\n<span id=\"workflows\"></span><h1><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">workflows</span></code><a class=\"headerlink\" href=\"#module-dipy.workflows\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n</tbody>\n</table>\n<div class=\"section\" id=\"module-dipy.workflows.align\">\n<span id=\"module-workflows-align\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">workflows.align</span></code><a class=\"headerlink\" href=\"#module-dipy.workflows.align\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.ResliceFlow\" title=\"dipy.workflows.align.ResliceFlow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">ResliceFlow</span></code></a>([output_strategy,&nbsp;mix_names,&nbsp;\u2026])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.SlrWithQbxFlow\" title=\"dipy.workflows.align.SlrWithQbxFlow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">SlrWithQbxFlow</span></code></a>([output_strategy,&nbsp;mix_names,&nbsp;\u2026])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.Workflow\" title=\"dipy.workflows.align.Workflow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a>([output_strategy,&nbsp;mix_names,&nbsp;\u2026])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.load_nifti\" title=\"dipy.workflows.align.load_nifti\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">load_nifti</span></code></a>(fname[,&nbsp;return_img,&nbsp;\u2026])</td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.load_trk\" title=\"dipy.workflows.align.load_trk\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">load_trk</span></code></a>(filename[,&nbsp;lazy_load])</td>\n<td>Loads tractogram files (<a href=\"#id1\"><span class=\"problematic\" id=\"id2\">*</span></a>.tck)</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.reslice\" title=\"dipy.workflows.align.reslice\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">reslice</span></code></a>(data,&nbsp;affine,&nbsp;zooms,&nbsp;new_zooms[,&nbsp;\u2026])</td>\n<td>Reslice data with new voxel resolution defined by <code class=\"docutils literal notranslate\"><span class=\"pre\">new_zooms</span></code></td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.save_nifti\" title=\"dipy.workflows.align.save_nifti\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">save_nifti</span></code></a>(fname,&nbsp;data,&nbsp;affine[,&nbsp;hdr])</td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.slr_with_qbx\" title=\"dipy.workflows.align.slr_with_qbx\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">slr_with_qbx</span></code></a>(static,&nbsp;moving[,&nbsp;x0,&nbsp;\u2026])</td>\n<td>Utility function for registering large tractograms.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.transform_streamlines\" title=\"dipy.workflows.align.transform_streamlines\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">transform_streamlines</span></code></a>(streamlines,&nbsp;mat[,&nbsp;\u2026])</td>\n<td>Apply affine transformation to streamlines</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.workflows.base\">\n<span id=\"module-workflows-base\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">workflows.base</span></code><a class=\"headerlink\" href=\"#module-dipy.workflows.base\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.base.IntrospectiveArgumentParser\" title=\"dipy.workflows.base.IntrospectiveArgumentParser\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">IntrospectiveArgumentParser</span></code></a>([prog,&nbsp;usage,&nbsp;\u2026])</td>\n<td><table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Attributes:</th><td class=\"field-body\"></td>\n</tr>\n</tbody>\n</table>\n</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.base.NumpyDocString\" title=\"dipy.workflows.base.NumpyDocString\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">NumpyDocString</span></code></a>(docstring[,&nbsp;config])</td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.base.get_args_default\" title=\"dipy.workflows.base.get_args_default\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_args_default</span></code></a>(func)</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.workflows.combined_workflow\">\n<span id=\"module-workflows-combined-workflow\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">workflows.combined_workflow</span></code><a class=\"headerlink\" href=\"#module-dipy.workflows.combined_workflow\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.combined_workflow.CombinedWorkflow\" title=\"dipy.workflows.combined_workflow.CombinedWorkflow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">CombinedWorkflow</span></code></a>([output_strategy,&nbsp;\u2026])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.combined_workflow.Workflow\" title=\"dipy.workflows.combined_workflow.Workflow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a>([output_strategy,&nbsp;mix_names,&nbsp;\u2026])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.combined_workflow.iteritems\" title=\"dipy.workflows.combined_workflow.iteritems\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">iteritems</span></code></a>(d,&nbsp;**kw)</td>\n<td>Return an iterator over the (key, value) pairs of a dictionary.</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.workflows.denoise\">\n<span id=\"module-workflows-denoise\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">workflows.denoise</span></code><a class=\"headerlink\" href=\"#module-dipy.workflows.denoise\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.denoise.NLMeansFlow\" title=\"dipy.workflows.denoise.NLMeansFlow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">NLMeansFlow</span></code></a>([output_strategy,&nbsp;mix_names,&nbsp;\u2026])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.denoise.Workflow\" title=\"dipy.workflows.denoise.Workflow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a>([output_strategy,&nbsp;mix_names,&nbsp;\u2026])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.denoise.estimate_sigma\" title=\"dipy.workflows.denoise.estimate_sigma\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">estimate_sigma</span></code></a>(arr[,&nbsp;\u2026])</td>\n<td>Standard deviation estimation from local patches</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.denoise.load_nifti\" title=\"dipy.workflows.denoise.load_nifti\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">load_nifti</span></code></a>(fname[,&nbsp;return_img,&nbsp;\u2026])</td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.denoise.nlmeans\" title=\"dipy.workflows.denoise.nlmeans\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">nlmeans</span></code></a>(arr,&nbsp;sigma[,&nbsp;mask,&nbsp;patch_radius,&nbsp;\u2026])</td>\n<td>Non-local means for denoising 3D and 4D images</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.denoise.save_nifti\" title=\"dipy.workflows.denoise.save_nifti\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">save_nifti</span></code></a>(fname,&nbsp;data,&nbsp;affine[,&nbsp;hdr])</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.workflows.docstring_parser\">\n<span id=\"module-workflows-docstring-parser\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">workflows.docstring_parser</span></code><a class=\"headerlink\" href=\"#module-dipy.workflows.docstring_parser\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>This was taken directly from the file docscrape.py of numpydoc package.</p>\n<p>Copyright (C) 2008 Stefan van der Walt &lt;<a class=\"reference external\" href=\"mailto:stefan&#37;&#52;&#48;mentat&#46;za&#46;net\">stefan<span>&#64;</span>mentat<span>&#46;</span>za<span>&#46;</span>net</a>&gt;,\nPauli Virtanen &lt;<a class=\"reference external\" href=\"mailto:pav&#37;&#52;&#48;iki&#46;fi\">pav<span>&#64;</span>iki<span>&#46;</span>fi</a>&gt;</p>\n<p>Redistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:</p>\n<blockquote>\n<div><ol class=\"arabic simple\">\n<li>Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.</li>\n<li>Redistributions in binary form must reproduce the above copyright\nnotice, this list of conditions and the following disclaimer in\nthe documentation and/or other materials provided with the\ndistribution.</li>\n</ol>\n</div></blockquote>\n<p>THIS SOFTWARE IS PROVIDED BY THE AUTHOR <a href=\"#id3\"><span class=\"problematic\" id=\"id4\">``</span></a>AS IS\u2019\u2019 AND ANY EXPRESS OR\nIMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,\nINDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\nHOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\nSTRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\nIN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGE.</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.docstring_parser.NumpyDocString\" title=\"dipy.workflows.docstring_parser.NumpyDocString\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">NumpyDocString</span></code></a>(docstring[,&nbsp;config])</td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.docstring_parser.Reader\" title=\"dipy.workflows.docstring_parser.Reader\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Reader</span></code></a>(data)</td>\n<td>A line-based string reader.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.docstring_parser.dedent_lines\" title=\"dipy.workflows.docstring_parser.dedent_lines\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">dedent_lines</span></code></a>(lines)</td>\n<td>Deindent a list of lines maximally</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.docstring_parser.warn\" title=\"dipy.workflows.docstring_parser.warn\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">warn</span></code></a></td>\n<td>Issue a warning, or maybe ignore it or raise an exception.</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.workflows.flow_runner\">\n<span id=\"module-workflows-flow-runner\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">workflows.flow_runner</span></code><a class=\"headerlink\" href=\"#module-dipy.workflows.flow_runner\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.flow_runner.IntrospectiveArgumentParser\" title=\"dipy.workflows.flow_runner.IntrospectiveArgumentParser\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">IntrospectiveArgumentParser</span></code></a>([prog,&nbsp;usage,&nbsp;\u2026])</td>\n<td><table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Attributes:</th><td class=\"field-body\"></td>\n</tr>\n</tbody>\n</table>\n</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.flow_runner.get_level\" title=\"dipy.workflows.flow_runner.get_level\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_level</span></code></a>(lvl)</td>\n<td>Transforms the loggin level passed on the commandline into a proper logging level name.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.flow_runner.iteritems\" title=\"dipy.workflows.flow_runner.iteritems\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">iteritems</span></code></a>(d,&nbsp;**kw)</td>\n<td>Return an iterator over the (key, value) pairs of a dictionary.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.flow_runner.run_flow\" title=\"dipy.workflows.flow_runner.run_flow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run_flow</span></code></a>(flow)</td>\n<td>Wraps the process of building an argparser that reflects the workflow that we want to run along with some generic parameters like logging, force and output strategies.</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.workflows.io\">\n<span id=\"module-workflows-io\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">workflows.io</span></code><a class=\"headerlink\" href=\"#module-dipy.workflows.io\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.io.IoInfoFlow\" title=\"dipy.workflows.io.IoInfoFlow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">IoInfoFlow</span></code></a>([output_strategy,&nbsp;mix_names,&nbsp;\u2026])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.io.Workflow\" title=\"dipy.workflows.io.Workflow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a>([output_strategy,&nbsp;mix_names,&nbsp;\u2026])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.io.load_nifti\" title=\"dipy.workflows.io.load_nifti\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">load_nifti</span></code></a>(fname[,&nbsp;return_img,&nbsp;\u2026])</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.workflows.mask\">\n<span id=\"module-workflows-mask\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">workflows.mask</span></code><a class=\"headerlink\" href=\"#module-dipy.workflows.mask\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.mask.MaskFlow\" title=\"dipy.workflows.mask.MaskFlow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">MaskFlow</span></code></a>([output_strategy,&nbsp;mix_names,&nbsp;\u2026])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.mask.Workflow\" title=\"dipy.workflows.mask.Workflow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a>([output_strategy,&nbsp;mix_names,&nbsp;\u2026])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.mask.load_nifti\" title=\"dipy.workflows.mask.load_nifti\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">load_nifti</span></code></a>(fname[,&nbsp;return_img,&nbsp;\u2026])</td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.mask.save_nifti\" title=\"dipy.workflows.mask.save_nifti\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">save_nifti</span></code></a>(fname,&nbsp;data,&nbsp;affine[,&nbsp;hdr])</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.workflows.multi_io\">\n<span id=\"module-workflows-multi-io\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">workflows.multi_io</span></code><a class=\"headerlink\" href=\"#module-dipy.workflows.multi_io\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.multi_io.IOIterator\" title=\"dipy.workflows.multi_io.IOIterator\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">IOIterator</span></code></a>([output_strategy,&nbsp;mix_names])</td>\n<td>Create output filenames that work nicely with multiple input files from multiple directories (processing multiple subjects with one command)</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.multi_io.basename_without_extension\" title=\"dipy.workflows.multi_io.basename_without_extension\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">basename_without_extension</span></code></a>(fname)</td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.multi_io.common_start\" title=\"dipy.workflows.multi_io.common_start\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">common_start</span></code></a>(sa,&nbsp;sb)</td>\n<td>Return the longest common substring from the beginning of sa and sb.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.multi_io.concatenate_inputs\" title=\"dipy.workflows.multi_io.concatenate_inputs\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">concatenate_inputs</span></code></a>(multi_inputs)</td>\n<td>Concatenate list of inputs</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.multi_io.connect_output_paths\" title=\"dipy.workflows.multi_io.connect_output_paths\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">connect_output_paths</span></code></a>(inputs,&nbsp;out_dir,&nbsp;out_files)</td>\n<td>Generates a list of output files paths based on input files and output strategies.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.multi_io.get_args_default\" title=\"dipy.workflows.multi_io.get_args_default\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_args_default</span></code></a>(func)</td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.multi_io.glob\" title=\"dipy.workflows.multi_io.glob\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">glob</span></code></a>(pathname,&nbsp;*[,&nbsp;recursive])</td>\n<td>Return a list of paths matching a pathname pattern.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.multi_io.io_iterator\" title=\"dipy.workflows.multi_io.io_iterator\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">io_iterator</span></code></a>(inputs,&nbsp;out_dir,&nbsp;fnames[,&nbsp;\u2026])</td>\n<td>Creates an IOIterator from the parameters.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.multi_io.io_iterator_\" title=\"dipy.workflows.multi_io.io_iterator_\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">io_iterator_</span></code></a>(frame,&nbsp;fnc[,&nbsp;output_strategy,&nbsp;\u2026])</td>\n<td>Creates an IOIterator using introspection.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.multi_io.slash_to_under\" title=\"dipy.workflows.multi_io.slash_to_under\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">slash_to_under</span></code></a>(dir_str)</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.workflows.reconst\">\n<span id=\"module-workflows-reconst\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">workflows.reconst</span></code><a class=\"headerlink\" href=\"#module-dipy.workflows.reconst\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.ConstrainedSphericalDeconvModel\" title=\"dipy.workflows.reconst.ConstrainedSphericalDeconvModel\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">ConstrainedSphericalDeconvModel</span></code></a>(gtab,&nbsp;response)</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.CsaOdfModel\" title=\"dipy.workflows.reconst.CsaOdfModel\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">CsaOdfModel</span></code></a>(gtab,&nbsp;sh_order[,&nbsp;smooth,&nbsp;\u2026])</td>\n<td>Implementation of Constant Solid Angle reconstruction method.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.DiffusionKurtosisModel\" title=\"dipy.workflows.reconst.DiffusionKurtosisModel\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">DiffusionKurtosisModel</span></code></a>(gtab[,&nbsp;fit_method])</td>\n<td>Class for the Diffusion Kurtosis Model</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.ReconstCSAFlow\" title=\"dipy.workflows.reconst.ReconstCSAFlow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">ReconstCSAFlow</span></code></a>([output_strategy,&nbsp;mix_names,&nbsp;\u2026])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.ReconstCSDFlow\" title=\"dipy.workflows.reconst.ReconstCSDFlow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">ReconstCSDFlow</span></code></a>([output_strategy,&nbsp;mix_names,&nbsp;\u2026])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.ReconstDkiFlow\" title=\"dipy.workflows.reconst.ReconstDkiFlow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">ReconstDkiFlow</span></code></a>([output_strategy,&nbsp;mix_names,&nbsp;\u2026])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.ReconstDtiFlow\" title=\"dipy.workflows.reconst.ReconstDtiFlow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">ReconstDtiFlow</span></code></a>([output_strategy,&nbsp;mix_names,&nbsp;\u2026])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.ReconstMAPMRIFlow\" title=\"dipy.workflows.reconst.ReconstMAPMRIFlow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">ReconstMAPMRIFlow</span></code></a>([output_strategy,&nbsp;\u2026])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.TensorModel\" title=\"dipy.workflows.reconst.TensorModel\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">TensorModel</span></code></a>(gtab[,&nbsp;fit_method,&nbsp;return_S0_hat])</td>\n<td>Diffusion Tensor</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.Workflow\" title=\"dipy.workflows.reconst.Workflow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a>([output_strategy,&nbsp;mix_names,&nbsp;\u2026])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.auto_response\" title=\"dipy.workflows.reconst.auto_response\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">auto_response</span></code></a>(gtab,&nbsp;data[,&nbsp;roi_center,&nbsp;\u2026])</td>\n<td>Automatic estimation of response function using FA.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.axial_diffusivity\" title=\"dipy.workflows.reconst.axial_diffusivity\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">axial_diffusivity</span></code></a>(evals[,&nbsp;axis])</td>\n<td>Axial Diffusivity (AD) of a diffusion tensor.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.color_fa\" title=\"dipy.workflows.reconst.color_fa\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">color_fa</span></code></a>(fa,&nbsp;evecs)</td>\n<td>Color fractional anisotropy of diffusion tensor</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.fractional_anisotropy\" title=\"dipy.workflows.reconst.fractional_anisotropy\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">fractional_anisotropy</span></code></a>(evals[,&nbsp;axis])</td>\n<td>Fractional anisotropy (FA) of a diffusion tensor.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.geodesic_anisotropy\" title=\"dipy.workflows.reconst.geodesic_anisotropy\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">geodesic_anisotropy</span></code></a>(evals[,&nbsp;axis])</td>\n<td>Geodesic anisotropy (GA) of a diffusion tensor.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.get_mode\" title=\"dipy.workflows.reconst.get_mode\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_mode</span></code></a>(q_form)</td>\n<td>Mode (MO) of a diffusion tensor <a class=\"reference internal\" href=\"#r8502d494f176-1\" id=\"id5\">[1]</a>.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.get_sphere\" title=\"dipy.workflows.reconst.get_sphere\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sphere</span></code></a>([name])</td>\n<td>provide triangulated spheres</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.gradient_table\" title=\"dipy.workflows.reconst.gradient_table\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">gradient_table</span></code></a>(bvals[,&nbsp;bvecs,&nbsp;big_delta,&nbsp;\u2026])</td>\n<td>A general function for creating diffusion MR gradients.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.literal_eval\" title=\"dipy.workflows.reconst.literal_eval\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">literal_eval</span></code></a>(node_or_string)</td>\n<td>Safely evaluate an expression node or a string containing a Python expression.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.load_nifti\" title=\"dipy.workflows.reconst.load_nifti\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">load_nifti</span></code></a>(fname[,&nbsp;return_img,&nbsp;\u2026])</td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.lower_triangular\" title=\"dipy.workflows.reconst.lower_triangular\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">lower_triangular</span></code></a>(tensor[,&nbsp;b0])</td>\n<td>Returns the six lower triangular values of the tensor and a dummy variable if b0 is not None</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.mean_diffusivity\" title=\"dipy.workflows.reconst.mean_diffusivity\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">mean_diffusivity</span></code></a>(evals[,&nbsp;axis])</td>\n<td>Mean Diffusivity (MD) of a diffusion tensor.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.peaks_from_model\" title=\"dipy.workflows.reconst.peaks_from_model\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">peaks_from_model</span></code></a>(model,&nbsp;data,&nbsp;sphere,&nbsp;\u2026[,&nbsp;\u2026])</td>\n<td>Fit the model to data and computes peaks and metrics</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.peaks_to_niftis\" title=\"dipy.workflows.reconst.peaks_to_niftis\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">peaks_to_niftis</span></code></a>(pam,&nbsp;fname_shm,&nbsp;fname_dirs,&nbsp;\u2026)</td>\n<td>Save SH, directions, indices and values of peaks to Nifti.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.radial_diffusivity\" title=\"dipy.workflows.reconst.radial_diffusivity\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">radial_diffusivity</span></code></a>(evals[,&nbsp;axis])</td>\n<td>Radial Diffusivity (RD) of a diffusion tensor.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.read_bvals_bvecs\" title=\"dipy.workflows.reconst.read_bvals_bvecs\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">read_bvals_bvecs</span></code></a>(fbvals,&nbsp;fbvecs)</td>\n<td>Read b-values and b-vectors from disk</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.save_nifti\" title=\"dipy.workflows.reconst.save_nifti\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">save_nifti</span></code></a>(fname,&nbsp;data,&nbsp;affine[,&nbsp;hdr])</td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.save_peaks\" title=\"dipy.workflows.reconst.save_peaks\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">save_peaks</span></code></a>(fname,&nbsp;pam[,&nbsp;affine,&nbsp;verbose])</td>\n<td>Save all important attributes of object PeaksAndMetrics in a PAM5 file (HDF5).</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.split_dki_param\" title=\"dipy.workflows.reconst.split_dki_param\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">split_dki_param</span></code></a>(dki_params)</td>\n<td>Extract the diffusion tensor eigenvalues, the diffusion tensor eigenvector matrix, and the 15 independent elements of the kurtosis tensor from the model parameters estimated from the DKI model</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.warn\" title=\"dipy.workflows.reconst.warn\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">warn</span></code></a></td>\n<td>Issue a warning, or maybe ignore it or raise an exception.</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.workflows.segment\">\n<span id=\"module-workflows-segment\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">workflows.segment</span></code><a class=\"headerlink\" href=\"#module-dipy.workflows.segment\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.segment.LabelsBundlesFlow\" title=\"dipy.workflows.segment.LabelsBundlesFlow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">LabelsBundlesFlow</span></code></a>([output_strategy,&nbsp;\u2026])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.segment.MedianOtsuFlow\" title=\"dipy.workflows.segment.MedianOtsuFlow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">MedianOtsuFlow</span></code></a>([output_strategy,&nbsp;mix_names,&nbsp;\u2026])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.segment.RecoBundles\" title=\"dipy.workflows.segment.RecoBundles\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">RecoBundles</span></code></a>(streamlines[,&nbsp;greater_than,&nbsp;\u2026])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.segment.RecoBundlesFlow\" title=\"dipy.workflows.segment.RecoBundlesFlow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">RecoBundlesFlow</span></code></a>([output_strategy,&nbsp;\u2026])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.segment.Workflow\" title=\"dipy.workflows.segment.Workflow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a>([output_strategy,&nbsp;mix_names,&nbsp;\u2026])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.segment.load_nifti\" title=\"dipy.workflows.segment.load_nifti\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">load_nifti</span></code></a>(fname[,&nbsp;return_img,&nbsp;\u2026])</td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.segment.load_trk\" title=\"dipy.workflows.segment.load_trk\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">load_trk</span></code></a>(filename[,&nbsp;lazy_load])</td>\n<td>Loads tractogram files (<a href=\"#id6\"><span class=\"problematic\" id=\"id7\">*</span></a>.tck)</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.segment.median_otsu\" title=\"dipy.workflows.segment.median_otsu\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">median_otsu</span></code></a>(input_volume[,&nbsp;median_radius,&nbsp;\u2026])</td>\n<td>Simple brain extraction tool method for images from DWI data.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.segment.save_nifti\" title=\"dipy.workflows.segment.save_nifti\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">save_nifti</span></code></a>(fname,&nbsp;data,&nbsp;affine[,&nbsp;hdr])</td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.segment.time\" title=\"dipy.workflows.segment.time\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">time</span></code></a>()</td>\n<td>Return the current time in seconds since the Epoch.</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.workflows.stats\">\n<span id=\"module-workflows-stats\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">workflows.stats</span></code><a class=\"headerlink\" href=\"#module-dipy.workflows.stats\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.stats.SNRinCCFlow\" title=\"dipy.workflows.stats.SNRinCCFlow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">SNRinCCFlow</span></code></a>([output_strategy,&nbsp;mix_names,&nbsp;\u2026])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.stats.TensorModel\" title=\"dipy.workflows.stats.TensorModel\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">TensorModel</span></code></a>(gtab[,&nbsp;fit_method,&nbsp;return_S0_hat])</td>\n<td>Diffusion Tensor</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.stats.Workflow\" title=\"dipy.workflows.stats.Workflow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a>([output_strategy,&nbsp;mix_names,&nbsp;\u2026])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.stats.binary_dilation\" title=\"dipy.workflows.stats.binary_dilation\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">binary_dilation</span></code></a>(input[,&nbsp;structure,&nbsp;\u2026])</td>\n<td>Multi-dimensional binary dilation with the given structuring element.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.stats.bounding_box\" title=\"dipy.workflows.stats.bounding_box\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">bounding_box</span></code></a>(vol)</td>\n<td>Compute the bounding box of nonzero intensity voxels in the volume.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.stats.gradient_table\" title=\"dipy.workflows.stats.gradient_table\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">gradient_table</span></code></a>(bvals[,&nbsp;bvecs,&nbsp;big_delta,&nbsp;\u2026])</td>\n<td>A general function for creating diffusion MR gradients.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.stats.load_nifti\" title=\"dipy.workflows.stats.load_nifti\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">load_nifti</span></code></a>(fname[,&nbsp;return_img,&nbsp;\u2026])</td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.stats.median_otsu\" title=\"dipy.workflows.stats.median_otsu\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">median_otsu</span></code></a>(input_volume[,&nbsp;median_radius,&nbsp;\u2026])</td>\n<td>Simple brain extraction tool method for images from DWI data.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.stats.read_bvals_bvecs\" title=\"dipy.workflows.stats.read_bvals_bvecs\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">read_bvals_bvecs</span></code></a>(fbvals,&nbsp;fbvecs)</td>\n<td>Read b-values and b-vectors from disk</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.stats.save_nifti\" title=\"dipy.workflows.stats.save_nifti\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">save_nifti</span></code></a>(fname,&nbsp;data,&nbsp;affine[,&nbsp;hdr])</td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.stats.segment_from_cfa\" title=\"dipy.workflows.stats.segment_from_cfa\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">segment_from_cfa</span></code></a>(tensor_fit,&nbsp;roi,&nbsp;threshold)</td>\n<td>Segment the cfa inside roi using the values from threshold as bounds.</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.workflows.tracking\">\n<span id=\"module-workflows-tracking\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">workflows.tracking</span></code><a class=\"headerlink\" href=\"#module-dipy.workflows.tracking\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.tracking.DetTrackPAMFlow\" title=\"dipy.workflows.tracking.DetTrackPAMFlow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">DetTrackPAMFlow</span></code></a>([output_strategy,&nbsp;\u2026])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.tracking.DeterministicMaximumDirectionGetter\" title=\"dipy.workflows.tracking.DeterministicMaximumDirectionGetter\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">DeterministicMaximumDirectionGetter</span></code></a></td>\n<td>Return direction of a sphere with the highest probability mass function (pmf).</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.tracking.GenericTrackFlow\" title=\"dipy.workflows.tracking.GenericTrackFlow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">GenericTrackFlow</span></code></a>([output_strategy,&nbsp;\u2026])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.tracking.LocalTracking\" title=\"dipy.workflows.tracking.LocalTracking\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">LocalTracking</span></code></a>(direction_getter,&nbsp;\u2026[,&nbsp;\u2026])</td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.tracking.ThresholdTissueClassifier\" title=\"dipy.workflows.tracking.ThresholdTissueClassifier\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">ThresholdTissueClassifier</span></code></a></td>\n<td># Declarations from tissue_classifier.pxd bellow cdef:     double threshold, interp_out_double[1]     double[:]  interp_out_view = interp_out_view     double[:, :, :] metric_map</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.tracking.Tractogram\" title=\"dipy.workflows.tracking.Tractogram\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Tractogram</span></code></a>([streamlines,&nbsp;\u2026])</td>\n<td>Container for streamlines and their data information.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.tracking.Workflow\" title=\"dipy.workflows.tracking.Workflow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a>([output_strategy,&nbsp;mix_names,&nbsp;\u2026])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.tracking.load_nifti\" title=\"dipy.workflows.tracking.load_nifti\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">load_nifti</span></code></a>(fname[,&nbsp;return_img,&nbsp;\u2026])</td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.tracking.load_peaks\" title=\"dipy.workflows.tracking.load_peaks\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">load_peaks</span></code></a>(fname[,&nbsp;verbose])</td>\n<td>Load a PeaksAndMetrics HDF5 file (PAM5)</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.tracking.save\" title=\"dipy.workflows.tracking.save\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">save</span></code></a>(tractogram,&nbsp;filename,&nbsp;**kwargs)</td>\n<td>Saves a tractogram to a file.</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.workflows.workflow\">\n<span id=\"module-workflows-workflow\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">workflows.workflow</span></code><a class=\"headerlink\" href=\"#module-dipy.workflows.workflow\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow\" title=\"dipy.workflows.workflow.Workflow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a>([output_strategy,&nbsp;mix_names,&nbsp;\u2026])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.workflow.io_iterator_\" title=\"dipy.workflows.workflow.io_iterator_\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">io_iterator_</span></code></a>(frame,&nbsp;fnc[,&nbsp;output_strategy,&nbsp;\u2026])</td>\n<td>Creates an IOIterator using introspection.</td>\n</tr>\n</tbody>\n</table>\n<div class=\"section\" id=\"resliceflow\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.align.ResliceFlow\" title=\"dipy.workflows.align.ResliceFlow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ResliceFlow</span></code></a><a class=\"headerlink\" href=\"#resliceflow\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.align.ResliceFlow\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.align.</code><code class=\"descname\">ResliceFlow</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.ResliceFlow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow\" title=\"dipy.workflows.workflow.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.workflows.workflow.Workflow</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code>()</td>\n<td>Create an iterator for IO.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.ResliceFlow.get_short_name\" title=\"dipy.workflows.align.ResliceFlow.get_short_name\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code></a>()</td>\n<td>Return A short name for the workflow used to subdivide.</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code>()</td>\n<td>Return No sub runs since this is a simple workflow.</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code>()</td>\n<td>Check if a file will be overwritten upon processing the inputs.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.ResliceFlow.run\" title=\"dipy.workflows.align.ResliceFlow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(input_files,&nbsp;new_vox_size[,&nbsp;order,&nbsp;\u2026])</td>\n<td>Reslice data with new voxel resolution defined by <code class=\"docutils literal notranslate\"><span class=\"pre\">new_vox_sz</span></code></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.ResliceFlow.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.ResliceFlow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"classmethod\">\n<dt id=\"dipy.workflows.align.ResliceFlow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.ResliceFlow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return A short name for the workflow used to subdivide.</p>\n<p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name.</p>\n<p>For example, a combined workflow with dti reconstruction and csd\nreconstruction might en up with the b0_threshold parameter. Using short\nnames, we will have dti.b0_threshold and csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.ResliceFlow.run\">\n<code class=\"descname\">run</code><span class=\"sig-paren\">(</span><em>input_files</em>, <em>new_vox_size</em>, <em>order=1</em>, <em>mode='constant'</em>, <em>cval=0</em>, <em>num_processes=1</em>, <em>out_dir=''</em>, <em>out_resliced='resliced.nii.gz'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.ResliceFlow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Reslice data with new voxel resolution defined by <code class=\"docutils literal notranslate\"><span class=\"pre\">new_vox_sz</span></code></p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>input_files</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">Path to the input volumes. This path may contain wildcards to\nprocess multiple inputs at once.</p>\n</dd>\n<dt><strong>new_vox_size</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">variable float</span></dt>\n<dd><p class=\"first last\">new voxel size</p>\n</dd>\n<dt><strong>order</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int, optional</span></dt>\n<dd><p class=\"first last\">order of interpolation, from 0 to 5, for resampling/reslicing,\n0 nearest interpolation, 1 trilinear etc.. if you don\u2019t want any\nsmoothing 0 is the option you need (default 1)</p>\n</dd>\n<dt><strong>mode</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Points outside the boundaries of the input are filled according\nto the given mode \u2018constant\u2019, \u2018nearest\u2019, \u2018reflect\u2019 or \u2018wrap\u2019\n(default \u2018constant\u2019)</p>\n</dd>\n<dt><strong>cval</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float, optional</span></dt>\n<dd><p class=\"first last\">Value used for points outside the boundaries of the input if\nmode=\u2019constant\u2019 (default 0)</p>\n</dd>\n<dt><strong>num_processes</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int, optional</span></dt>\n<dd><p class=\"first last\">Split the calculation to a pool of children processes. This only\napplies to 4D <cite>data</cite> arrays. If a positive integer then it defines\nthe size of the multiprocessing pool that will be used. If 0, then\nthe size of the pool will equal the number of cores available.\n(default 1)</p>\n</dd>\n<dt><strong>out_dir</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Output directory (default input file directory)</p>\n</dd>\n<dt><strong>out_resliced</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the resliced dataset to be saved\n(default \u2018resliced.nii.gz\u2019)</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"slrwithqbxflow\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.align.SlrWithQbxFlow\" title=\"dipy.workflows.align.SlrWithQbxFlow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SlrWithQbxFlow</span></code></a><a class=\"headerlink\" href=\"#slrwithqbxflow\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.align.SlrWithQbxFlow\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.align.</code><code class=\"descname\">SlrWithQbxFlow</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.SlrWithQbxFlow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow\" title=\"dipy.workflows.workflow.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.workflows.workflow.Workflow</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code>()</td>\n<td>Create an iterator for IO.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.SlrWithQbxFlow.get_short_name\" title=\"dipy.workflows.align.SlrWithQbxFlow.get_short_name\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code></a>()</td>\n<td>Return A short name for the workflow used to subdivide.</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code>()</td>\n<td>Return No sub runs since this is a simple workflow.</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code>()</td>\n<td>Check if a file will be overwritten upon processing the inputs.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.SlrWithQbxFlow.run\" title=\"dipy.workflows.align.SlrWithQbxFlow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(static_files,&nbsp;moving_files[,&nbsp;x0,&nbsp;\u2026])</td>\n<td>Streamline-based linear registration.</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.SlrWithQbxFlow.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.SlrWithQbxFlow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"classmethod\">\n<dt id=\"dipy.workflows.align.SlrWithQbxFlow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.SlrWithQbxFlow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return A short name for the workflow used to subdivide.</p>\n<p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name.</p>\n<p>For example, a combined workflow with dti reconstruction and csd\nreconstruction might en up with the b0_threshold parameter. Using short\nnames, we will have dti.b0_threshold and csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.SlrWithQbxFlow.run\">\n<code class=\"descname\">run</code><span class=\"sig-paren\">(</span><em>static_files, moving_files, x0='affine', rm_small_clusters=50, qbx_thr=[40, 30, 20, 15], num_threads=None, greater_than=50, less_than=250, nb_pts=20, progressive=True, out_dir='', out_moved='moved.trk', out_affine='affine.txt', out_stat_centroids='static_centroids.trk', out_moving_centroids='moving_centroids.trk', out_moved_centroids='moved_centroids.trk'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.SlrWithQbxFlow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Streamline-based linear registration.</p>\n<p>For efficiency we apply the registration on cluster centroids and\nremove small clusters.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>static_files</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd></dd>\n<dt><strong>moving_files</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd></dd>\n<dt><strong>x0</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">rigid, similarity or affine transformation model (default affine)</p>\n</dd>\n<dt><strong>rm_small_clusters</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int, optional</span></dt>\n<dd><p class=\"first last\">Remove clusters that have less than <cite>rm_small_clusters</cite>\n(default 50)</p>\n</dd>\n<dt><strong>qbx_thr</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">variable int, optional</span></dt>\n<dd><p class=\"first last\">Thresholds for QuickBundlesX (default [40, 30, 20, 15])</p>\n</dd>\n<dt><strong>num_threads</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int, optional</span></dt>\n<dd><p class=\"first last\">Number of threads. If None (default) then all available threads\nwill be used. Only metrics using OpenMP will use this variable.</p>\n</dd>\n<dt><strong>greater_than</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int, optional</span></dt>\n<dd><p class=\"first last\">Keep streamlines that have length greater than\nthis value (default 50)</p>\n</dd>\n<dt><strong>less_than</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int, optional</span></dt>\n<dd><p class=\"first last\">Keep streamlines have length less than this value (default 250)</p>\n</dd>\n<dt><strong>np_pts</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int, optional</span></dt>\n<dd><p class=\"first last\">Number of points for discretizing each streamline (default 20)</p>\n</dd>\n<dt><strong>progressive</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">boolean, optional</span></dt>\n<dd><p class=\"first last\">(default True)</p>\n</dd>\n<dt><strong>out_dir</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Output directory (default input file directory)</p>\n</dd>\n<dt><strong>out_moved</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Filename of moved tractogram (default \u2018moved.trk\u2019)</p>\n</dd>\n<dt><strong>out_affine</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Filename of affine for SLR transformation (default \u2018affine.txt\u2019)</p>\n</dd>\n<dt><strong>out_stat_centroids</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Filename of static centroids (default \u2018static_centroids.trk\u2019)</p>\n</dd>\n<dt><strong>out_moving_centroids</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Filename of moving centroids (default \u2018moving_centroids.trk\u2019)</p>\n</dd>\n<dt><strong>out_moved_centroids</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Filename of moved centroids (default \u2018moved_centroids.trk\u2019)</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Notes</p>\n<p>The order of operations is the following. First short or long\nstreamlines are removed. Second the tractogram or a random selection\nof the tractogram is clustered with QuickBundlesX. Then SLR\n<a class=\"reference internal\" href=\"#r63af61b7286e-garyfallidis15\" id=\"id8\">[Garyfallidis15]</a> is applied.</p>\n<p class=\"rubric\">References</p>\n<table class=\"docutils citation\" frame=\"void\" id=\"r63af61b7286e-garyfallidis15\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\">[Garyfallidis15]</td><td><em>(<a class=\"fn-backref\" href=\"#id8\">1</a>, <a class=\"fn-backref\" href=\"#id9\">2</a>)</em> Garyfallidis et al. \u201cRobust and efficient linear</td></tr>\n</tbody>\n</table>\n<p>registration of white-matter fascicles in the space of\nstreamlines\u201d, NeuroImage, 117, 124\u2013140, 2015</p>\n<table class=\"docutils citation\" frame=\"void\" id=\"r63af61b7286e-garyfallidis14\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\"><a class=\"fn-backref\" href=\"#id10\">[Garyfallidis14]</a></td><td>Garyfallidis et al., \u201cDirect native-space fiber</td></tr>\n</tbody>\n</table>\n<p>bundle alignment for group comparisons\u201d, ISMRM, 2014.</p>\n<table class=\"docutils citation\" frame=\"void\" id=\"r63af61b7286e-garyfallidis17\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\"><a class=\"fn-backref\" href=\"#id11\">[Garyfallidis17]</a></td><td>Garyfallidis et al. Recognition of white matter</td></tr>\n</tbody>\n</table>\n<p>bundles using local and global streamline-based registration\nand clustering, Neuroimage, 2017.</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"workflow\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.align.Workflow\" title=\"dipy.workflows.align.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a><a class=\"headerlink\" href=\"#workflow\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.align.Workflow\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.align.</code><code class=\"descname\">Workflow</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.Workflow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.7)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.Workflow.get_io_iterator\" title=\"dipy.workflows.align.Workflow.get_io_iterator\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code></a>()</td>\n<td>Create an iterator for IO.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.Workflow.get_short_name\" title=\"dipy.workflows.align.Workflow.get_short_name\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code></a>()</td>\n<td>Return A short name for the workflow used to subdivide.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.Workflow.get_sub_runs\" title=\"dipy.workflows.align.Workflow.get_sub_runs\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code></a>()</td>\n<td>Return No sub runs since this is a simple workflow.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.Workflow.manage_output_overwrite\" title=\"dipy.workflows.align.Workflow.manage_output_overwrite\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code></a>()</td>\n<td>Check if a file will be overwritten upon processing the inputs.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.Workflow.run\" title=\"dipy.workflows.align.Workflow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(*args,&nbsp;**kwargs)</td>\n<td>Execute the workflow.</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.Workflow.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.Workflow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.Workflow.get_io_iterator\">\n<code class=\"descname\">get_io_iterator</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.Workflow.get_io_iterator\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Create an iterator for IO.</p>\n<p>Use a couple of inspection tricks to build an IOIterator using the\nprevious frame (values of local variables and other contextuals) and\nthe run method\u2019s docstring.</p>\n</dd></dl>\n\n<dl class=\"classmethod\">\n<dt id=\"dipy.workflows.align.Workflow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.Workflow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return A short name for the workflow used to subdivide.</p>\n<p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name.</p>\n<p>For example, a combined workflow with dti reconstruction and csd\nreconstruction might en up with the b0_threshold parameter. Using short\nnames, we will have dti.b0_threshold and csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.Workflow.get_sub_runs\">\n<code class=\"descname\">get_sub_runs</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.Workflow.get_sub_runs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return No sub runs since this is a simple workflow.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.Workflow.manage_output_overwrite\">\n<code class=\"descname\">manage_output_overwrite</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.Workflow.manage_output_overwrite\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Check if a file will be overwritten upon processing the inputs.</p>\n<p>If it is bound to happen, an action is taken depending on\nself._force_overwrite (or \u2013force via command line). A log message is\noutput independently of the outcome to tell the user something\nhappened.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.Workflow.run\">\n<code class=\"descname\">run</code><span class=\"sig-paren\">(</span><em>*args</em>, <em>**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.Workflow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Execute the workflow.</p>\n<p>Since this is an abstract class, raise exception if this code is\nreached (not impletemented in child class or literally called on this\nclass)</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"load-nifti\">\n<h3>load_nifti<a class=\"headerlink\" href=\"#load-nifti\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.align.load_nifti\">\n<code class=\"descclassname\">dipy.workflows.align.</code><code class=\"descname\">load_nifti</code><span class=\"sig-paren\">(</span><em>fname</em>, <em>return_img=False</em>, <em>return_voxsize=False</em>, <em>return_coords=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.load_nifti\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</div>\n<div class=\"section\" id=\"load-trk\">\n<h3>load_trk<a class=\"headerlink\" href=\"#load-trk\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.align.load_trk\">\n<code class=\"descclassname\">dipy.workflows.align.</code><code class=\"descname\">load_trk</code><span class=\"sig-paren\">(</span><em>filename</em>, <em>lazy_load=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.load_trk\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Loads tractogram files (<a href=\"#id12\"><span class=\"problematic\" id=\"id13\">*</span></a>.tck)</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>filename</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">str</span></dt>\n<dd><p class=\"first last\">input trk filename</p>\n</dd>\n<dt><strong>lazy_load</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">{False, True}, optional</span></dt>\n<dd><p class=\"first last\">If True, load streamlines in a lazy manner i.e. they will not be kept\nin memory and only be loaded when needed.\nOtherwise, load all streamlines in memory.</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>streamlines</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">list of 2D arrays</span></dt>\n<dd><p class=\"first last\">Each 2D array represents a sequence of 3D points (points, 3).</p>\n</dd>\n<dt><strong>hdr</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">dict</span></dt>\n<dd><p class=\"first last\">header from a trk file</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"reslice\">\n<h3>reslice<a class=\"headerlink\" href=\"#reslice\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.align.reslice\">\n<code class=\"descclassname\">dipy.workflows.align.</code><code class=\"descname\">reslice</code><span class=\"sig-paren\">(</span><em>data</em>, <em>affine</em>, <em>zooms</em>, <em>new_zooms</em>, <em>order=1</em>, <em>mode='constant'</em>, <em>cval=0</em>, <em>num_processes=1</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.reslice\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Reslice data with new voxel resolution defined by <code class=\"docutils literal notranslate\"><span class=\"pre\">new_zooms</span></code></p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>data</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, shape (I,J,K) or (I,J,K,N)</span></dt>\n<dd><p class=\"first last\">3d volume or 4d volume with datasets</p>\n</dd>\n<dt><strong>affine</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, shape (4,4)</span></dt>\n<dd><p class=\"first last\">mapping from voxel coordinates to world coordinates</p>\n</dd>\n<dt><strong>zooms</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">tuple, shape (3,)</span></dt>\n<dd><p class=\"first last\">voxel size for (i,j,k) dimensions</p>\n</dd>\n<dt><strong>new_zooms</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">tuple, shape (3,)</span></dt>\n<dd><p class=\"first last\">new voxel size for (i,j,k) after resampling</p>\n</dd>\n<dt><strong>order</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int, from 0 to 5</span></dt>\n<dd><p class=\"first last\">order of interpolation for resampling/reslicing,\n0 nearest interpolation, 1 trilinear etc..\nif you don\u2019t want any smoothing 0 is the option you need.</p>\n</dd>\n<dt><strong>mode</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string (\u2018constant\u2019, \u2018nearest\u2019, \u2018reflect\u2019 or \u2018wrap\u2019)</span></dt>\n<dd><p class=\"first last\">Points outside the boundaries of the input are filled according\nto the given mode.</p>\n</dd>\n<dt><strong>cval</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float</span></dt>\n<dd><p class=\"first last\">Value used for points outside the boundaries of the input if\nmode=\u2019constant\u2019.</p>\n</dd>\n<dt><strong>num_processes</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int</span></dt>\n<dd><p class=\"first last\">Split the calculation to a pool of children processes. This only\napplies to 4D <cite>data</cite> arrays. If a positive integer then it defines\nthe size of the multiprocessing pool that will be used. If 0, then\nthe size of the pool will equal the number of cores available.</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>data2</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, shape (I,J,K) or (I,J,K,N)</span></dt>\n<dd><p class=\"first last\">datasets resampled into isotropic voxel size</p>\n</dd>\n<dt><strong>affine2</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, shape (4,4)</span></dt>\n<dd><p class=\"first last\">new affine for the resampled image</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">nibabel</span> <span class=\"k\">as</span> <span class=\"nn\">nib</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">dipy.align.reslice</span> <span class=\"k\">import</span> <span class=\"n\">reslice</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">dipy.data</span> <span class=\"k\">import</span> <span class=\"n\">get_fnames</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">fimg</span> <span class=\"o\">=</span> <span class=\"n\">get_fnames</span><span class=\"p\">(</span><span class=\"s1\">&#39;aniso_vox&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">nib</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">fimg</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">get_data</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">shape</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"mi\">58</span><span class=\"p\">,</span> <span class=\"mi\">58</span><span class=\"p\">,</span> <span class=\"mi\">24</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">affine</span> <span class=\"o\">=</span> <span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">affine</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">zooms</span> <span class=\"o\">=</span> <span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">header</span><span class=\"o\">.</span><span class=\"n\">get_zooms</span><span class=\"p\">()[:</span><span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">zooms</span>\n<span class=\"go\">(4.0, 4.0, 5.0)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">new_zooms</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mf\">3.</span><span class=\"p\">,</span><span class=\"mf\">3.</span><span class=\"p\">,</span><span class=\"mf\">3.</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">new_zooms</span>\n<span class=\"go\">(3.0, 3.0, 3.0)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">data2</span><span class=\"p\">,</span> <span class=\"n\">affine2</span> <span class=\"o\">=</span> <span class=\"n\">reslice</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"p\">,</span> <span class=\"n\">zooms</span><span class=\"p\">,</span> <span class=\"n\">new_zooms</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">data2</span><span class=\"o\">.</span><span class=\"n\">shape</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"mi\">77</span><span class=\"p\">,</span> <span class=\"mi\">77</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"save-nifti\">\n<h3>save_nifti<a class=\"headerlink\" href=\"#save-nifti\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.align.save_nifti\">\n<code class=\"descclassname\">dipy.workflows.align.</code><code class=\"descname\">save_nifti</code><span class=\"sig-paren\">(</span><em>fname</em>, <em>data</em>, <em>affine</em>, <em>hdr=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.save_nifti\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</div>\n<div class=\"section\" id=\"slr-with-qbx\">\n<h3>slr_with_qbx<a class=\"headerlink\" href=\"#slr-with-qbx\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.align.slr_with_qbx\">\n<code class=\"descclassname\">dipy.workflows.align.</code><code class=\"descname\">slr_with_qbx</code><span class=\"sig-paren\">(</span><em>static, moving, x0='affine', rm_small_clusters=50, maxiter=100, select_random=None, verbose=False, greater_than=50, less_than=250, qbx_thr=[40, 30, 20, 15], nb_pts=20, progressive=True, rng=None, num_threads=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.slr_with_qbx\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Utility function for registering large tractograms.</p>\n<p>For efficiency we apply the registration on cluster centroids and remove\nsmall clusters.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>static</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">Streamlines</span></dt>\n<dd></dd>\n<dt><strong>moving</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">Streamlines</span></dt>\n<dd></dd>\n<dt><strong>x0</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">str</span></dt>\n<dd><p class=\"first last\">rigid, similarity or affine transformation model (default affine)</p>\n</dd>\n<dt><strong>rm_small_clusters</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int</span></dt>\n<dd><p class=\"first last\">Remove clusters that have less than <cite>rm_small_clusters</cite> (default 50)</p>\n</dd>\n<dt><strong>select_random</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int</span></dt>\n<dd><p class=\"first last\">If not None select a random number of streamlines to apply clustering\nDefault None.</p>\n</dd>\n<dt><strong>verbose</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool,</span></dt>\n<dd><p class=\"first last\">If True then information about the optimization is shown.</p>\n</dd>\n<dt><strong>greater_than</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int, optional</span></dt>\n<dd><p class=\"first last\">Keep streamlines that have length greater than\nthis value (default 50)</p>\n</dd>\n<dt><strong>less_than</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int, optional</span></dt>\n<dd><p class=\"first last\">Keep streamlines have length less than this value (default 250)</p>\n</dd>\n<dt><strong>qbx_thr</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">variable int</span></dt>\n<dd><p class=\"first last\">Thresholds for QuickBundlesX (default [40, 30, 20, 15])</p>\n</dd>\n<dt><strong>np_pts</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int, optional</span></dt>\n<dd><p class=\"first last\">Number of points for discretizing each streamline (default 20)</p>\n</dd>\n<dt><strong>progressive</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">boolean, optional</span></dt>\n<dd><p class=\"first last\">(default True)</p>\n</dd>\n<dt><strong>rng</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">RandomState</span></dt>\n<dd><p class=\"first last\">If None creates RandomState in function.</p>\n</dd>\n<dt><strong>num_threads</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int</span></dt>\n<dd><p class=\"first last\">Number of threads. If None (default) then all available threads\nwill be used. Only metrics using OpenMP will use this variable.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Notes</p>\n<p>The order of operations is the following. First short or long streamlines\nare removed. Second the tractogram or a random selection of the tractogram\nis clustered with QuickBundles. Then SLR <a class=\"reference internal\" href=\"#r890e584ccf15-garyfallidis15\" id=\"id14\">[Garyfallidis15]</a> is applied.</p>\n<p class=\"rubric\">References</p>\n<table class=\"docutils citation\" frame=\"void\" id=\"r890e584ccf15-garyfallidis15\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\">[Garyfallidis15]</td><td><em>(<a class=\"fn-backref\" href=\"#id14\">1</a>, <a class=\"fn-backref\" href=\"#id15\">2</a>)</em> Garyfallidis et al. \u201cRobust and efficient linear</td></tr>\n</tbody>\n</table>\n<p>registration of white-matter fascicles in the space of streamlines\u201d,\nNeuroImage, 117, 124\u2013140, 2015\n.. [R890e584ccf15-Garyfallidis14] Garyfallidis et al., \u201cDirect native-space fiber</p>\n<blockquote>\n<div>bundle alignment for group comparisons\u201d, ISMRM, 2014.</div></blockquote>\n<table class=\"docutils citation\" frame=\"void\" id=\"r890e584ccf15-garyfallidis17\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\"><a class=\"fn-backref\" href=\"#id17\">[Garyfallidis17]</a></td><td>Garyfallidis et al. Recognition of white matter</td></tr>\n</tbody>\n</table>\n<p>bundles using local and global streamline-based registration and\nclustering, Neuroimage, 2017.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"transform-streamlines\">\n<h3>transform_streamlines<a class=\"headerlink\" href=\"#transform-streamlines\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.align.transform_streamlines\">\n<code class=\"descclassname\">dipy.workflows.align.</code><code class=\"descname\">transform_streamlines</code><span class=\"sig-paren\">(</span><em>streamlines</em>, <em>mat</em>, <em>in_place=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.transform_streamlines\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Apply affine transformation to streamlines</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>streamlines</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">Streamlines</span></dt>\n<dd><p class=\"first last\">Streamlines object</p>\n</dd>\n<dt><strong>mat</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, (4, 4)</span></dt>\n<dd><p class=\"first last\">transformation matrix</p>\n</dd>\n<dt><strong>in_place</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool</span></dt>\n<dd><p class=\"first last\">If True then change data in place.\nBe careful changes input streamlines.</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>new_streamlines</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">Streamlines</span></dt>\n<dd><p class=\"first last\">Sequence transformed 2D ndarrays of shape[-1]==3</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"introspectiveargumentparser\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.base.IntrospectiveArgumentParser\" title=\"dipy.workflows.base.IntrospectiveArgumentParser\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">IntrospectiveArgumentParser</span></code></a><a class=\"headerlink\" href=\"#introspectiveargumentparser\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.base.IntrospectiveArgumentParser\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.base.</code><code class=\"descname\">IntrospectiveArgumentParser</code><span class=\"sig-paren\">(</span><em>prog=None</em>, <em>usage=None</em>, <em>description=None</em>, <em>epilog=None</em>, <em>parents=[]</em>, <em>formatter_class=&lt;class 'argparse.RawTextHelpFormatter'&gt;</em>, <em>prefix_chars='-'</em>, <em>fromfile_prefix_chars=None</em>, <em>argument_default=None</em>, <em>conflict_handler='resolve'</em>, <em>add_help=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.base.IntrospectiveArgumentParser\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser\" title=\"(in Python v3.7)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">argparse.ArgumentParser</span></code></a></p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Attributes:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>optional_parameters</strong></dt>\n<dd></dd>\n<dt><strong>output_parameters</strong></dt>\n<dd></dd>\n<dt><strong>positional_parameters</strong></dt>\n<dd></dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">add_argument</span></code>(dest,&nbsp;\u2026[,&nbsp;name,&nbsp;name])</td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.base.IntrospectiveArgumentParser.add_sub_flow_args\" title=\"dipy.workflows.base.IntrospectiveArgumentParser.add_sub_flow_args\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">add_sub_flow_args</span></code></a>(sub_flows)</td>\n<td>Take an array of workflow objects and use introspection to extract the parameters, types and docstrings of their run method.</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">add_subparsers</span></code>(**kwargs)</td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.base.IntrospectiveArgumentParser.add_workflow\" title=\"dipy.workflows.base.IntrospectiveArgumentParser.add_workflow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">add_workflow</span></code></a>(workflow)</td>\n<td>Take a workflow object and use introspection to extract the parameters, types and docstrings of its run method.</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">error</span></code>(message)</td>\n<td>Prints a usage message incorporating the message to stderr and exits.</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">exit</span></code>([status,&nbsp;message])</td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">format_usage</span></code>()</td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.base.IntrospectiveArgumentParser.get_flow_args\" title=\"dipy.workflows.base.IntrospectiveArgumentParser.get_flow_args\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_flow_args</span></code></a>([args,&nbsp;namespace])</td>\n<td>Returns the parsed arguments as a dictionary that will be used as a workflow\u2019s run method arguments.</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">parse_args</span></code>([args,&nbsp;namespace])</td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">print_usage</span></code>([file])</td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">register</span></code>(registry_name,&nbsp;value,&nbsp;object)</td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">set_defaults</span></code>(**kwargs)</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<table border=\"1\" class=\"docutils\">\n<colgroup>\n<col width=\"76%\" />\n<col width=\"24%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><strong>add_argument_group</strong></td>\n<td>&#160;</td>\n</tr>\n<tr class=\"row-even\"><td><strong>add_description</strong></td>\n<td>&#160;</td>\n</tr>\n<tr class=\"row-odd\"><td><strong>add_epilogue</strong></td>\n<td>&#160;</td>\n</tr>\n<tr class=\"row-even\"><td><strong>add_mutually_exclusive_group</strong></td>\n<td>&#160;</td>\n</tr>\n<tr class=\"row-odd\"><td><strong>convert_arg_line_to_args</strong></td>\n<td>&#160;</td>\n</tr>\n<tr class=\"row-even\"><td><strong>format_help</strong></td>\n<td>&#160;</td>\n</tr>\n<tr class=\"row-odd\"><td><strong>get_default</strong></td>\n<td>&#160;</td>\n</tr>\n<tr class=\"row-even\"><td><strong>parse_known_args</strong></td>\n<td>&#160;</td>\n</tr>\n<tr class=\"row-odd\"><td><strong>print_help</strong></td>\n<td>&#160;</td>\n</tr>\n<tr class=\"row-even\"><td><strong>show_argument</strong></td>\n<td>&#160;</td>\n</tr>\n<tr class=\"row-odd\"><td><strong>update_argument</strong></td>\n<td>&#160;</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.base.IntrospectiveArgumentParser.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>prog=None</em>, <em>usage=None</em>, <em>description=None</em>, <em>epilog=None</em>, <em>parents=[]</em>, <em>formatter_class=&lt;class 'argparse.RawTextHelpFormatter'&gt;</em>, <em>prefix_chars='-'</em>, <em>fromfile_prefix_chars=None</em>, <em>argument_default=None</em>, <em>conflict_handler='resolve'</em>, <em>add_help=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.base.IntrospectiveArgumentParser.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Augmenting the argument parser to allow automatic creation of\narguments from workflows</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>prog</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">None</span></dt>\n<dd><p class=\"first last\">The name of the program (default: sys.argv[0])</p>\n</dd>\n<dt><strong>usage</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">None</span></dt>\n<dd><p class=\"first last\">A usage message (default: auto-generated from arguments)</p>\n</dd>\n<dt><strong>description</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">str</span></dt>\n<dd><p class=\"first last\">A description of what the program does</p>\n</dd>\n<dt><strong>epilog</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">str</span></dt>\n<dd><p class=\"first last\">Text following the argument descriptions</p>\n</dd>\n<dt><strong>parents</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">list</span></dt>\n<dd><p class=\"first last\">Parsers whose arguments should be copied into this one</p>\n</dd>\n<dt><strong>formatter_class</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">obj</span></dt>\n<dd><p class=\"first last\">HelpFormatter class for printing help messages</p>\n</dd>\n<dt><strong>prefix_chars</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">str</span></dt>\n<dd><p class=\"first last\">Characters that prefix optional arguments</p>\n</dd>\n<dt><strong>fromfile_prefix_chars</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">None</span></dt>\n<dd><p class=\"first last\">Characters that prefix files containing additional arguments</p>\n</dd>\n<dt><strong>argument_default</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">None</span></dt>\n<dd><p class=\"first last\">The default value for all arguments</p>\n</dd>\n<dt><strong>conflict_handler</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">str</span></dt>\n<dd><p class=\"first last\">String indicating how to handle conflicts</p>\n</dd>\n<dt><strong>add_help</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool</span></dt>\n<dd><p class=\"first last\">Add a -h/-help option</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.base.IntrospectiveArgumentParser.add_description\">\n<code class=\"descname\">add_description</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.base.IntrospectiveArgumentParser.add_description\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.base.IntrospectiveArgumentParser.add_epilogue\">\n<code class=\"descname\">add_epilogue</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.base.IntrospectiveArgumentParser.add_epilogue\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.base.IntrospectiveArgumentParser.add_sub_flow_args\">\n<code class=\"descname\">add_sub_flow_args</code><span class=\"sig-paren\">(</span><em>sub_flows</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.base.IntrospectiveArgumentParser.add_sub_flow_args\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Take an array of workflow objects and use introspection to extract\nthe parameters, types and docstrings of their run method. Only the\noptional input parameters are extracted for these as they are treated\nas sub workflows.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>sub_flows</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array of dipy.workflows.workflow.Workflow</span></dt>\n<dd><p class=\"first last\">Workflows to inspect.</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>sub_flow_optionals</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">dictionary of all sub workflow optional parameters</span></dt>\n<dd></dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.base.IntrospectiveArgumentParser.add_workflow\">\n<code class=\"descname\">add_workflow</code><span class=\"sig-paren\">(</span><em>workflow</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.base.IntrospectiveArgumentParser.add_workflow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Take a workflow object and use introspection to extract the parameters,\ntypes and docstrings of its run method. Then add these parameters\nto the current arparser\u2019s own params to parse. If the workflow is of\ntype combined_workflow, the optional input parameters of its\nsub workflows will also be added.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>workflow</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">dipy.workflows.workflow.Workflow</span></dt>\n<dd><p class=\"first last\">Workflow from which to infer parameters.</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>sub_flow_optionals</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">dictionary of all sub workflow optional parameters</span></dt>\n<dd></dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.base.IntrospectiveArgumentParser.get_flow_args\">\n<code class=\"descname\">get_flow_args</code><span class=\"sig-paren\">(</span><em>args=None</em>, <em>namespace=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.base.IntrospectiveArgumentParser.get_flow_args\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns the parsed arguments as a dictionary that will be used\nas a workflow\u2019s run method arguments.</p>\n</dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.workflows.base.IntrospectiveArgumentParser.optional_parameters\">\n<code class=\"descname\">optional_parameters</code><a class=\"headerlink\" href=\"#dipy.workflows.base.IntrospectiveArgumentParser.optional_parameters\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.workflows.base.IntrospectiveArgumentParser.output_parameters\">\n<code class=\"descname\">output_parameters</code><a class=\"headerlink\" href=\"#dipy.workflows.base.IntrospectiveArgumentParser.output_parameters\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.workflows.base.IntrospectiveArgumentParser.positional_parameters\">\n<code class=\"descname\">positional_parameters</code><a class=\"headerlink\" href=\"#dipy.workflows.base.IntrospectiveArgumentParser.positional_parameters\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.base.IntrospectiveArgumentParser.show_argument\">\n<code class=\"descname\">show_argument</code><span class=\"sig-paren\">(</span><em>dest</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.base.IntrospectiveArgumentParser.show_argument\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.base.IntrospectiveArgumentParser.update_argument\">\n<code class=\"descname\">update_argument</code><span class=\"sig-paren\">(</span><em>*args</em>, <em>**kargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.base.IntrospectiveArgumentParser.update_argument\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"numpydocstring\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.base.NumpyDocString\" title=\"dipy.workflows.base.NumpyDocString\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">NumpyDocString</span></code></a><a class=\"headerlink\" href=\"#numpydocstring\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.base.NumpyDocString\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.base.</code><code class=\"descname\">NumpyDocString</code><span class=\"sig-paren\">(</span><em>docstring</em>, <em>config={}</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.base.NumpyDocString\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.7)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.base.NumpyDocString.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>docstring</em>, <em>config={}</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.base.NumpyDocString.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize self.  See help(type(self)) for accurate signature.</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"get-args-default\">\n<h3>get_args_default<a class=\"headerlink\" href=\"#get-args-default\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.base.get_args_default\">\n<code class=\"descclassname\">dipy.workflows.base.</code><code class=\"descname\">get_args_default</code><span class=\"sig-paren\">(</span><em>func</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.base.get_args_default\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</div>\n<div class=\"section\" id=\"combinedworkflow\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.combined_workflow.CombinedWorkflow\" title=\"dipy.workflows.combined_workflow.CombinedWorkflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">CombinedWorkflow</span></code></a><a class=\"headerlink\" href=\"#combinedworkflow\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.combined_workflow.CombinedWorkflow\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.combined_workflow.</code><code class=\"descname\">CombinedWorkflow</code><span class=\"sig-paren\">(</span><em>output_strategy='append'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.combined_workflow.CombinedWorkflow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow\" title=\"dipy.workflows.workflow.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.workflows.workflow.Workflow</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code>()</td>\n<td>Create an iterator for IO.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.combined_workflow.CombinedWorkflow.get_optionals\" title=\"dipy.workflows.combined_workflow.CombinedWorkflow.get_optionals\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_optionals</span></code></a>(flow,&nbsp;**kwargs)</td>\n<td>Returns the sub flow\u2019s optional arguments merged with those passed as params in kwargs.</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code>()</td>\n<td>Return A short name for the workflow used to subdivide.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.combined_workflow.CombinedWorkflow.get_sub_runs\" title=\"dipy.workflows.combined_workflow.CombinedWorkflow.get_sub_runs\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code></a>()</td>\n<td>Returns a list of tuples (sub flow name, sub flow run method, sub flow short name) to be used in the sub flow parameters extraction.</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code>()</td>\n<td>Check if a file will be overwritten upon processing the inputs.</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code>(*args,&nbsp;**kwargs)</td>\n<td>Execute the workflow.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.combined_workflow.CombinedWorkflow.run_sub_flow\" title=\"dipy.workflows.combined_workflow.CombinedWorkflow.run_sub_flow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run_sub_flow</span></code></a>(flow,&nbsp;*args,&nbsp;**kwargs)</td>\n<td>Runs the sub flow with the optional parameters passed via the command line.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.combined_workflow.CombinedWorkflow.set_sub_flows_optionals\" title=\"dipy.workflows.combined_workflow.CombinedWorkflow.set_sub_flows_optionals\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">set_sub_flows_optionals</span></code></a>(opts)</td>\n<td>Sets the self._optionals variable with all sub flow arguments that were passed in the commandline.</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.combined_workflow.CombinedWorkflow.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>output_strategy='append'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.combined_workflow.CombinedWorkflow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Workflow that combines multiple workflows.\nThe workflow combined together are referred as sub flows in this class.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.combined_workflow.CombinedWorkflow.get_optionals\">\n<code class=\"descname\">get_optionals</code><span class=\"sig-paren\">(</span><em>flow</em>, <em>**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.combined_workflow.CombinedWorkflow.get_optionals\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns the sub flow\u2019s optional arguments merged with those passed\nas params in kwargs.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.combined_workflow.CombinedWorkflow.get_sub_runs\">\n<code class=\"descname\">get_sub_runs</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.combined_workflow.CombinedWorkflow.get_sub_runs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns a list of tuples\n(sub flow name, sub flow run method, sub flow short name)\nto be used in the sub flow parameters extraction.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.combined_workflow.CombinedWorkflow.run_sub_flow\">\n<code class=\"descname\">run_sub_flow</code><span class=\"sig-paren\">(</span><em>flow</em>, <em>*args</em>, <em>**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.combined_workflow.CombinedWorkflow.run_sub_flow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Runs the sub flow with the optional parameters passed via the\ncommand line. This is a convenience method to make sub flow running\nmore intuitive on the concrete CombinedWorkflow side.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.combined_workflow.CombinedWorkflow.set_sub_flows_optionals\">\n<code class=\"descname\">set_sub_flows_optionals</code><span class=\"sig-paren\">(</span><em>opts</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.combined_workflow.CombinedWorkflow.set_sub_flows_optionals\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Sets the self._optionals variable with all sub flow arguments\nthat were passed in the commandline.</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id18\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.combined_workflow.Workflow\" title=\"dipy.workflows.combined_workflow.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a><a class=\"headerlink\" href=\"#id18\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.combined_workflow.Workflow\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.combined_workflow.</code><code class=\"descname\">Workflow</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.combined_workflow.Workflow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.7)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.combined_workflow.Workflow.get_io_iterator\" title=\"dipy.workflows.combined_workflow.Workflow.get_io_iterator\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code></a>()</td>\n<td>Create an iterator for IO.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.combined_workflow.Workflow.get_short_name\" title=\"dipy.workflows.combined_workflow.Workflow.get_short_name\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code></a>()</td>\n<td>Return A short name for the workflow used to subdivide.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.combined_workflow.Workflow.get_sub_runs\" title=\"dipy.workflows.combined_workflow.Workflow.get_sub_runs\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code></a>()</td>\n<td>Return No sub runs since this is a simple workflow.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.combined_workflow.Workflow.manage_output_overwrite\" title=\"dipy.workflows.combined_workflow.Workflow.manage_output_overwrite\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code></a>()</td>\n<td>Check if a file will be overwritten upon processing the inputs.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.combined_workflow.Workflow.run\" title=\"dipy.workflows.combined_workflow.Workflow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(*args,&nbsp;**kwargs)</td>\n<td>Execute the workflow.</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.combined_workflow.Workflow.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.combined_workflow.Workflow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.combined_workflow.Workflow.get_io_iterator\">\n<code class=\"descname\">get_io_iterator</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.combined_workflow.Workflow.get_io_iterator\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Create an iterator for IO.</p>\n<p>Use a couple of inspection tricks to build an IOIterator using the\nprevious frame (values of local variables and other contextuals) and\nthe run method\u2019s docstring.</p>\n</dd></dl>\n\n<dl class=\"classmethod\">\n<dt id=\"dipy.workflows.combined_workflow.Workflow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.combined_workflow.Workflow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return A short name for the workflow used to subdivide.</p>\n<p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name.</p>\n<p>For example, a combined workflow with dti reconstruction and csd\nreconstruction might en up with the b0_threshold parameter. Using short\nnames, we will have dti.b0_threshold and csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.combined_workflow.Workflow.get_sub_runs\">\n<code class=\"descname\">get_sub_runs</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.combined_workflow.Workflow.get_sub_runs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return No sub runs since this is a simple workflow.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.combined_workflow.Workflow.manage_output_overwrite\">\n<code class=\"descname\">manage_output_overwrite</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.combined_workflow.Workflow.manage_output_overwrite\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Check if a file will be overwritten upon processing the inputs.</p>\n<p>If it is bound to happen, an action is taken depending on\nself._force_overwrite (or \u2013force via command line). A log message is\noutput independently of the outcome to tell the user something\nhappened.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.combined_workflow.Workflow.run\">\n<code class=\"descname\">run</code><span class=\"sig-paren\">(</span><em>*args</em>, <em>**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.combined_workflow.Workflow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Execute the workflow.</p>\n<p>Since this is an abstract class, raise exception if this code is\nreached (not impletemented in child class or literally called on this\nclass)</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"iteritems\">\n<h3>iteritems<a class=\"headerlink\" href=\"#iteritems\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.combined_workflow.iteritems\">\n<code class=\"descclassname\">dipy.workflows.combined_workflow.</code><code class=\"descname\">iteritems</code><span class=\"sig-paren\">(</span><em>d</em>, <em>**kw</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.combined_workflow.iteritems\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return an iterator over the (key, value) pairs of a dictionary.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"nlmeansflow\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.denoise.NLMeansFlow\" title=\"dipy.workflows.denoise.NLMeansFlow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">NLMeansFlow</span></code></a><a class=\"headerlink\" href=\"#nlmeansflow\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.denoise.NLMeansFlow\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.denoise.</code><code class=\"descname\">NLMeansFlow</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.denoise.NLMeansFlow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow\" title=\"dipy.workflows.workflow.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.workflows.workflow.Workflow</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code>()</td>\n<td>Create an iterator for IO.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.denoise.NLMeansFlow.get_short_name\" title=\"dipy.workflows.denoise.NLMeansFlow.get_short_name\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code></a>()</td>\n<td>Return A short name for the workflow used to subdivide.</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code>()</td>\n<td>Return No sub runs since this is a simple workflow.</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code>()</td>\n<td>Check if a file will be overwritten upon processing the inputs.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.denoise.NLMeansFlow.run\" title=\"dipy.workflows.denoise.NLMeansFlow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(input_files[,&nbsp;sigma,&nbsp;out_dir,&nbsp;out_denoised])</td>\n<td>Workflow wrapping the nlmeans denoising method.</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.denoise.NLMeansFlow.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.denoise.NLMeansFlow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"classmethod\">\n<dt id=\"dipy.workflows.denoise.NLMeansFlow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.denoise.NLMeansFlow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return A short name for the workflow used to subdivide.</p>\n<p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name.</p>\n<p>For example, a combined workflow with dti reconstruction and csd\nreconstruction might en up with the b0_threshold parameter. Using short\nnames, we will have dti.b0_threshold and csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.denoise.NLMeansFlow.run\">\n<code class=\"descname\">run</code><span class=\"sig-paren\">(</span><em>input_files</em>, <em>sigma=0</em>, <em>out_dir=''</em>, <em>out_denoised='dwi_nlmeans.nii.gz'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.denoise.NLMeansFlow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Workflow wrapping the nlmeans denoising method.</p>\n<p>It applies nlmeans denoise on each file found by \u2018globing\u2019\n<code class=\"docutils literal notranslate\"><span class=\"pre\">input_files</span></code> and saves the results in a directory specified by\n<code class=\"docutils literal notranslate\"><span class=\"pre\">out_dir</span></code>.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>input_files</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">Path to the input volumes. This path may contain wildcards to\nprocess multiple inputs at once.</p>\n</dd>\n<dt><strong>sigma</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float, optional</span></dt>\n<dd><p class=\"first last\">Sigma parameter to pass to the nlmeans algorithm\n(default: auto estimation).</p>\n</dd>\n<dt><strong>out_dir</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Output directory (default input file directory)</p>\n</dd>\n<dt><strong>out_denoised</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the resuting denoised volume (default: dwi_nlmeans.nii.gz)</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id19\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.denoise.Workflow\" title=\"dipy.workflows.denoise.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a><a class=\"headerlink\" href=\"#id19\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.denoise.Workflow\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.denoise.</code><code class=\"descname\">Workflow</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.denoise.Workflow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.7)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.denoise.Workflow.get_io_iterator\" title=\"dipy.workflows.denoise.Workflow.get_io_iterator\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code></a>()</td>\n<td>Create an iterator for IO.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.denoise.Workflow.get_short_name\" title=\"dipy.workflows.denoise.Workflow.get_short_name\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code></a>()</td>\n<td>Return A short name for the workflow used to subdivide.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.denoise.Workflow.get_sub_runs\" title=\"dipy.workflows.denoise.Workflow.get_sub_runs\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code></a>()</td>\n<td>Return No sub runs since this is a simple workflow.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.denoise.Workflow.manage_output_overwrite\" title=\"dipy.workflows.denoise.Workflow.manage_output_overwrite\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code></a>()</td>\n<td>Check if a file will be overwritten upon processing the inputs.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.denoise.Workflow.run\" title=\"dipy.workflows.denoise.Workflow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(*args,&nbsp;**kwargs)</td>\n<td>Execute the workflow.</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.denoise.Workflow.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.denoise.Workflow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.denoise.Workflow.get_io_iterator\">\n<code class=\"descname\">get_io_iterator</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.denoise.Workflow.get_io_iterator\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Create an iterator for IO.</p>\n<p>Use a couple of inspection tricks to build an IOIterator using the\nprevious frame (values of local variables and other contextuals) and\nthe run method\u2019s docstring.</p>\n</dd></dl>\n\n<dl class=\"classmethod\">\n<dt id=\"dipy.workflows.denoise.Workflow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.denoise.Workflow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return A short name for the workflow used to subdivide.</p>\n<p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name.</p>\n<p>For example, a combined workflow with dti reconstruction and csd\nreconstruction might en up with the b0_threshold parameter. Using short\nnames, we will have dti.b0_threshold and csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.denoise.Workflow.get_sub_runs\">\n<code class=\"descname\">get_sub_runs</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.denoise.Workflow.get_sub_runs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return No sub runs since this is a simple workflow.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.denoise.Workflow.manage_output_overwrite\">\n<code class=\"descname\">manage_output_overwrite</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.denoise.Workflow.manage_output_overwrite\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Check if a file will be overwritten upon processing the inputs.</p>\n<p>If it is bound to happen, an action is taken depending on\nself._force_overwrite (or \u2013force via command line). A log message is\noutput independently of the outcome to tell the user something\nhappened.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.denoise.Workflow.run\">\n<code class=\"descname\">run</code><span class=\"sig-paren\">(</span><em>*args</em>, <em>**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.denoise.Workflow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Execute the workflow.</p>\n<p>Since this is an abstract class, raise exception if this code is\nreached (not impletemented in child class or literally called on this\nclass)</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"estimate-sigma\">\n<h3>estimate_sigma<a class=\"headerlink\" href=\"#estimate-sigma\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.denoise.estimate_sigma\">\n<code class=\"descclassname\">dipy.workflows.denoise.</code><code class=\"descname\">estimate_sigma</code><span class=\"sig-paren\">(</span><em>arr</em>, <em>disable_background_masking=False</em>, <em>N=0</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.denoise.estimate_sigma\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Standard deviation estimation from local patches</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>arr</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">3D or 4D ndarray</span></dt>\n<dd><p class=\"first last\">The array to be estimated</p>\n</dd>\n<dt><strong>disable_background_masking</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool, default False</span></dt>\n<dd><p class=\"first last\">If True, uses all voxels for the estimation, otherwise, only non-zeros\nvoxels are used. Useful if the background is masked by the scanner.</p>\n</dd>\n<dt><strong>N</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int, default 0</span></dt>\n<dd><p class=\"first last\">Number of coils of the receiver array. Use N = 1 in case of a SENSE\nreconstruction (Philips scanners) or the number of coils for a GRAPPA\nreconstruction (Siemens and GE). Use 0 to disable the correction factor,\nas for example if the noise is Gaussian distributed. See [1] for more\ninformation.</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>sigma</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">ndarray</span></dt>\n<dd><p class=\"first last\">standard deviation of the noise, one estimation per volume.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id20\">\n<h3>load_nifti<a class=\"headerlink\" href=\"#id20\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.denoise.load_nifti\">\n<code class=\"descclassname\">dipy.workflows.denoise.</code><code class=\"descname\">load_nifti</code><span class=\"sig-paren\">(</span><em>fname</em>, <em>return_img=False</em>, <em>return_voxsize=False</em>, <em>return_coords=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.denoise.load_nifti\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</div>\n<div class=\"section\" id=\"nlmeans\">\n<h3>nlmeans<a class=\"headerlink\" href=\"#nlmeans\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.denoise.nlmeans\">\n<code class=\"descclassname\">dipy.workflows.denoise.</code><code class=\"descname\">nlmeans</code><span class=\"sig-paren\">(</span><em>arr</em>, <em>sigma</em>, <em>mask=None</em>, <em>patch_radius=1</em>, <em>block_radius=5</em>, <em>rician=True</em>, <em>num_threads=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.denoise.nlmeans\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Non-local means for denoising 3D and 4D images</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>arr</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">3D or 4D ndarray</span></dt>\n<dd><p class=\"first last\">The array to be denoised</p>\n</dd>\n<dt><strong>mask</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">3D ndarray</span></dt>\n<dd></dd>\n<dt><strong>sigma</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float or 3D array</span></dt>\n<dd><p class=\"first last\">standard deviation of the noise estimated from the data</p>\n</dd>\n<dt><strong>patch_radius</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int</span></dt>\n<dd><p class=\"first last\">patch size is <code class=\"docutils literal notranslate\"><span class=\"pre\">2</span> <span class=\"pre\">x</span> <span class=\"pre\">patch_radius</span> <span class=\"pre\">+</span> <span class=\"pre\">1</span></code>. Default is 1.</p>\n</dd>\n<dt><strong>block_radius</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int</span></dt>\n<dd><p class=\"first last\">block size is <code class=\"docutils literal notranslate\"><span class=\"pre\">2</span> <span class=\"pre\">x</span> <span class=\"pre\">block_radius</span> <span class=\"pre\">+</span> <span class=\"pre\">1</span></code>. Default is 5.</p>\n</dd>\n<dt><strong>rician</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">boolean</span></dt>\n<dd><p class=\"first last\">If True the noise is estimated as Rician, otherwise Gaussian noise\nis assumed.</p>\n</dd>\n<dt><strong>num_threads</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int</span></dt>\n<dd><p class=\"first last\">Number of threads. If None (default) then all available threads\nwill be used (all CPU cores).</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>denoised_arr</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">ndarray</span></dt>\n<dd><p class=\"first last\">the denoised <code class=\"docutils literal notranslate\"><span class=\"pre\">arr</span></code> which has the same shape as <code class=\"docutils literal notranslate\"><span class=\"pre\">arr</span></code>.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">References</p>\n<table class=\"docutils citation\" frame=\"void\" id=\"r133aa7056047-descoteaux08\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\"><a class=\"fn-backref\" href=\"#id21\">[Descoteaux08]</a></td><td>Descoteaux, Maxim and Wiest-Daessle`, Nicolas and Prima,\nSylvain and Barillot, Christian and Deriche, Rachid\nImpact of Rician Adapted Non-Local Means Filtering on\nHARDI, MICCAI 2008</td></tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id22\">\n<h3>save_nifti<a class=\"headerlink\" href=\"#id22\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.denoise.save_nifti\">\n<code class=\"descclassname\">dipy.workflows.denoise.</code><code class=\"descname\">save_nifti</code><span class=\"sig-paren\">(</span><em>fname</em>, <em>data</em>, <em>affine</em>, <em>hdr=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.denoise.save_nifti\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</div>\n<div class=\"section\" id=\"id23\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.docstring_parser.NumpyDocString\" title=\"dipy.workflows.docstring_parser.NumpyDocString\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">NumpyDocString</span></code></a><a class=\"headerlink\" href=\"#id23\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.docstring_parser.NumpyDocString\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.docstring_parser.</code><code class=\"descname\">NumpyDocString</code><span class=\"sig-paren\">(</span><em>docstring</em>, <em>config={}</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.docstring_parser.NumpyDocString\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.7)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.docstring_parser.NumpyDocString.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>docstring</em>, <em>config={}</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.docstring_parser.NumpyDocString.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize self.  See help(type(self)) for accurate signature.</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"reader\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.docstring_parser.Reader\" title=\"dipy.workflows.docstring_parser.Reader\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Reader</span></code></a><a class=\"headerlink\" href=\"#reader\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.docstring_parser.Reader\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.docstring_parser.</code><code class=\"descname\">Reader</code><span class=\"sig-paren\">(</span><em>data</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.docstring_parser.Reader\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.7)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p>A line-based string reader.</p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"docutils\">\n<colgroup>\n<col width=\"76%\" />\n<col width=\"24%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><strong>eof</strong></td>\n<td>&#160;</td>\n</tr>\n<tr class=\"row-even\"><td><strong>is_empty</strong></td>\n<td>&#160;</td>\n</tr>\n<tr class=\"row-odd\"><td><strong>peek</strong></td>\n<td>&#160;</td>\n</tr>\n<tr class=\"row-even\"><td><strong>read</strong></td>\n<td>&#160;</td>\n</tr>\n<tr class=\"row-odd\"><td><strong>read_to_condition</strong></td>\n<td>&#160;</td>\n</tr>\n<tr class=\"row-even\"><td><strong>read_to_next_empty_line</strong></td>\n<td>&#160;</td>\n</tr>\n<tr class=\"row-odd\"><td><strong>read_to_next_unindented_line</strong></td>\n<td>&#160;</td>\n</tr>\n<tr class=\"row-even\"><td><strong>reset</strong></td>\n<td>&#160;</td>\n</tr>\n<tr class=\"row-odd\"><td><strong>seek_next_non_empty_line</strong></td>\n<td>&#160;</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.docstring_parser.Reader.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>data</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.docstring_parser.Reader.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>data</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">str</span></dt>\n<dd><p class=\"first last\">String with lines separated by \u2018</p>\n</dd>\n<dt><strong>\u2018.</strong></dt>\n<dd></dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.docstring_parser.Reader.eof\">\n<code class=\"descname\">eof</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.docstring_parser.Reader.eof\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.docstring_parser.Reader.is_empty\">\n<code class=\"descname\">is_empty</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.docstring_parser.Reader.is_empty\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.docstring_parser.Reader.peek\">\n<code class=\"descname\">peek</code><span class=\"sig-paren\">(</span><em>n=0</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.docstring_parser.Reader.peek\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.docstring_parser.Reader.read\">\n<code class=\"descname\">read</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.docstring_parser.Reader.read\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.docstring_parser.Reader.read_to_condition\">\n<code class=\"descname\">read_to_condition</code><span class=\"sig-paren\">(</span><em>condition_func</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.docstring_parser.Reader.read_to_condition\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.docstring_parser.Reader.read_to_next_empty_line\">\n<code class=\"descname\">read_to_next_empty_line</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.docstring_parser.Reader.read_to_next_empty_line\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.docstring_parser.Reader.read_to_next_unindented_line\">\n<code class=\"descname\">read_to_next_unindented_line</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.docstring_parser.Reader.read_to_next_unindented_line\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.docstring_parser.Reader.reset\">\n<code class=\"descname\">reset</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.docstring_parser.Reader.reset\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.docstring_parser.Reader.seek_next_non_empty_line\">\n<code class=\"descname\">seek_next_non_empty_line</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.docstring_parser.Reader.seek_next_non_empty_line\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"dedent-lines\">\n<h3>dedent_lines<a class=\"headerlink\" href=\"#dedent-lines\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.docstring_parser.dedent_lines\">\n<code class=\"descclassname\">dipy.workflows.docstring_parser.</code><code class=\"descname\">dedent_lines</code><span class=\"sig-paren\">(</span><em>lines</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.docstring_parser.dedent_lines\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Deindent a list of lines maximally</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"warn\">\n<h3>warn<a class=\"headerlink\" href=\"#warn\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.docstring_parser.warn\">\n<code class=\"descclassname\">dipy.workflows.docstring_parser.</code><code class=\"descname\">warn</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.docstring_parser.warn\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Issue a warning, or maybe ignore it or raise an exception.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id24\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.flow_runner.IntrospectiveArgumentParser\" title=\"dipy.workflows.flow_runner.IntrospectiveArgumentParser\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">IntrospectiveArgumentParser</span></code></a><a class=\"headerlink\" href=\"#id24\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.flow_runner.IntrospectiveArgumentParser\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.flow_runner.</code><code class=\"descname\">IntrospectiveArgumentParser</code><span class=\"sig-paren\">(</span><em>prog=None</em>, <em>usage=None</em>, <em>description=None</em>, <em>epilog=None</em>, <em>parents=[]</em>, <em>formatter_class=&lt;class 'argparse.RawTextHelpFormatter'&gt;</em>, <em>prefix_chars='-'</em>, <em>fromfile_prefix_chars=None</em>, <em>argument_default=None</em>, <em>conflict_handler='resolve'</em>, <em>add_help=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.flow_runner.IntrospectiveArgumentParser\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser\" title=\"(in Python v3.7)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">argparse.ArgumentParser</span></code></a></p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Attributes:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>optional_parameters</strong></dt>\n<dd></dd>\n<dt><strong>output_parameters</strong></dt>\n<dd></dd>\n<dt><strong>positional_parameters</strong></dt>\n<dd></dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">add_argument</span></code>(dest,&nbsp;\u2026[,&nbsp;name,&nbsp;name])</td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.flow_runner.IntrospectiveArgumentParser.add_sub_flow_args\" title=\"dipy.workflows.flow_runner.IntrospectiveArgumentParser.add_sub_flow_args\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">add_sub_flow_args</span></code></a>(sub_flows)</td>\n<td>Take an array of workflow objects and use introspection to extract the parameters, types and docstrings of their run method.</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">add_subparsers</span></code>(**kwargs)</td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.flow_runner.IntrospectiveArgumentParser.add_workflow\" title=\"dipy.workflows.flow_runner.IntrospectiveArgumentParser.add_workflow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">add_workflow</span></code></a>(workflow)</td>\n<td>Take a workflow object and use introspection to extract the parameters, types and docstrings of its run method.</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">error</span></code>(message)</td>\n<td>Prints a usage message incorporating the message to stderr and exits.</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">exit</span></code>([status,&nbsp;message])</td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">format_usage</span></code>()</td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.flow_runner.IntrospectiveArgumentParser.get_flow_args\" title=\"dipy.workflows.flow_runner.IntrospectiveArgumentParser.get_flow_args\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_flow_args</span></code></a>([args,&nbsp;namespace])</td>\n<td>Returns the parsed arguments as a dictionary that will be used as a workflow\u2019s run method arguments.</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">parse_args</span></code>([args,&nbsp;namespace])</td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">print_usage</span></code>([file])</td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">register</span></code>(registry_name,&nbsp;value,&nbsp;object)</td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">set_defaults</span></code>(**kwargs)</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<table border=\"1\" class=\"docutils\">\n<colgroup>\n<col width=\"76%\" />\n<col width=\"24%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><strong>add_argument_group</strong></td>\n<td>&#160;</td>\n</tr>\n<tr class=\"row-even\"><td><strong>add_description</strong></td>\n<td>&#160;</td>\n</tr>\n<tr class=\"row-odd\"><td><strong>add_epilogue</strong></td>\n<td>&#160;</td>\n</tr>\n<tr class=\"row-even\"><td><strong>add_mutually_exclusive_group</strong></td>\n<td>&#160;</td>\n</tr>\n<tr class=\"row-odd\"><td><strong>convert_arg_line_to_args</strong></td>\n<td>&#160;</td>\n</tr>\n<tr class=\"row-even\"><td><strong>format_help</strong></td>\n<td>&#160;</td>\n</tr>\n<tr class=\"row-odd\"><td><strong>get_default</strong></td>\n<td>&#160;</td>\n</tr>\n<tr class=\"row-even\"><td><strong>parse_known_args</strong></td>\n<td>&#160;</td>\n</tr>\n<tr class=\"row-odd\"><td><strong>print_help</strong></td>\n<td>&#160;</td>\n</tr>\n<tr class=\"row-even\"><td><strong>show_argument</strong></td>\n<td>&#160;</td>\n</tr>\n<tr class=\"row-odd\"><td><strong>update_argument</strong></td>\n<td>&#160;</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.flow_runner.IntrospectiveArgumentParser.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>prog=None</em>, <em>usage=None</em>, <em>description=None</em>, <em>epilog=None</em>, <em>parents=[]</em>, <em>formatter_class=&lt;class 'argparse.RawTextHelpFormatter'&gt;</em>, <em>prefix_chars='-'</em>, <em>fromfile_prefix_chars=None</em>, <em>argument_default=None</em>, <em>conflict_handler='resolve'</em>, <em>add_help=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.flow_runner.IntrospectiveArgumentParser.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Augmenting the argument parser to allow automatic creation of\narguments from workflows</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>prog</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">None</span></dt>\n<dd><p class=\"first last\">The name of the program (default: sys.argv[0])</p>\n</dd>\n<dt><strong>usage</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">None</span></dt>\n<dd><p class=\"first last\">A usage message (default: auto-generated from arguments)</p>\n</dd>\n<dt><strong>description</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">str</span></dt>\n<dd><p class=\"first last\">A description of what the program does</p>\n</dd>\n<dt><strong>epilog</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">str</span></dt>\n<dd><p class=\"first last\">Text following the argument descriptions</p>\n</dd>\n<dt><strong>parents</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">list</span></dt>\n<dd><p class=\"first last\">Parsers whose arguments should be copied into this one</p>\n</dd>\n<dt><strong>formatter_class</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">obj</span></dt>\n<dd><p class=\"first last\">HelpFormatter class for printing help messages</p>\n</dd>\n<dt><strong>prefix_chars</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">str</span></dt>\n<dd><p class=\"first last\">Characters that prefix optional arguments</p>\n</dd>\n<dt><strong>fromfile_prefix_chars</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">None</span></dt>\n<dd><p class=\"first last\">Characters that prefix files containing additional arguments</p>\n</dd>\n<dt><strong>argument_default</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">None</span></dt>\n<dd><p class=\"first last\">The default value for all arguments</p>\n</dd>\n<dt><strong>conflict_handler</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">str</span></dt>\n<dd><p class=\"first last\">String indicating how to handle conflicts</p>\n</dd>\n<dt><strong>add_help</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool</span></dt>\n<dd><p class=\"first last\">Add a -h/-help option</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.flow_runner.IntrospectiveArgumentParser.add_description\">\n<code class=\"descname\">add_description</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.flow_runner.IntrospectiveArgumentParser.add_description\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.flow_runner.IntrospectiveArgumentParser.add_epilogue\">\n<code class=\"descname\">add_epilogue</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.flow_runner.IntrospectiveArgumentParser.add_epilogue\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.flow_runner.IntrospectiveArgumentParser.add_sub_flow_args\">\n<code class=\"descname\">add_sub_flow_args</code><span class=\"sig-paren\">(</span><em>sub_flows</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.flow_runner.IntrospectiveArgumentParser.add_sub_flow_args\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Take an array of workflow objects and use introspection to extract\nthe parameters, types and docstrings of their run method. Only the\noptional input parameters are extracted for these as they are treated\nas sub workflows.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>sub_flows</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array of dipy.workflows.workflow.Workflow</span></dt>\n<dd><p class=\"first last\">Workflows to inspect.</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>sub_flow_optionals</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">dictionary of all sub workflow optional parameters</span></dt>\n<dd></dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.flow_runner.IntrospectiveArgumentParser.add_workflow\">\n<code class=\"descname\">add_workflow</code><span class=\"sig-paren\">(</span><em>workflow</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.flow_runner.IntrospectiveArgumentParser.add_workflow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Take a workflow object and use introspection to extract the parameters,\ntypes and docstrings of its run method. Then add these parameters\nto the current arparser\u2019s own params to parse. If the workflow is of\ntype combined_workflow, the optional input parameters of its\nsub workflows will also be added.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>workflow</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">dipy.workflows.workflow.Workflow</span></dt>\n<dd><p class=\"first last\">Workflow from which to infer parameters.</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>sub_flow_optionals</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">dictionary of all sub workflow optional parameters</span></dt>\n<dd></dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.flow_runner.IntrospectiveArgumentParser.get_flow_args\">\n<code class=\"descname\">get_flow_args</code><span class=\"sig-paren\">(</span><em>args=None</em>, <em>namespace=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.flow_runner.IntrospectiveArgumentParser.get_flow_args\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns the parsed arguments as a dictionary that will be used\nas a workflow\u2019s run method arguments.</p>\n</dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.workflows.flow_runner.IntrospectiveArgumentParser.optional_parameters\">\n<code class=\"descname\">optional_parameters</code><a class=\"headerlink\" href=\"#dipy.workflows.flow_runner.IntrospectiveArgumentParser.optional_parameters\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.workflows.flow_runner.IntrospectiveArgumentParser.output_parameters\">\n<code class=\"descname\">output_parameters</code><a class=\"headerlink\" href=\"#dipy.workflows.flow_runner.IntrospectiveArgumentParser.output_parameters\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.workflows.flow_runner.IntrospectiveArgumentParser.positional_parameters\">\n<code class=\"descname\">positional_parameters</code><a class=\"headerlink\" href=\"#dipy.workflows.flow_runner.IntrospectiveArgumentParser.positional_parameters\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.flow_runner.IntrospectiveArgumentParser.show_argument\">\n<code class=\"descname\">show_argument</code><span class=\"sig-paren\">(</span><em>dest</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.flow_runner.IntrospectiveArgumentParser.show_argument\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.flow_runner.IntrospectiveArgumentParser.update_argument\">\n<code class=\"descname\">update_argument</code><span class=\"sig-paren\">(</span><em>*args</em>, <em>**kargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.flow_runner.IntrospectiveArgumentParser.update_argument\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"get-level\">\n<h3>get_level<a class=\"headerlink\" href=\"#get-level\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.flow_runner.get_level\">\n<code class=\"descclassname\">dipy.workflows.flow_runner.</code><code class=\"descname\">get_level</code><span class=\"sig-paren\">(</span><em>lvl</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.flow_runner.get_level\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Transforms the loggin level passed on the commandline into a proper\nlogging level name.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id25\">\n<h3>iteritems<a class=\"headerlink\" href=\"#id25\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.flow_runner.iteritems\">\n<code class=\"descclassname\">dipy.workflows.flow_runner.</code><code class=\"descname\">iteritems</code><span class=\"sig-paren\">(</span><em>d</em>, <em>**kw</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.flow_runner.iteritems\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return an iterator over the (key, value) pairs of a dictionary.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"run-flow\">\n<h3>run_flow<a class=\"headerlink\" href=\"#run-flow\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.flow_runner.run_flow\">\n<code class=\"descclassname\">dipy.workflows.flow_runner.</code><code class=\"descname\">run_flow</code><span class=\"sig-paren\">(</span><em>flow</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.flow_runner.run_flow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Wraps the process of building an argparser that reflects the workflow\nthat we want to run along with some generic parameters like logging,\nforce and output strategies. The resulting parameters are then fed to\nthe workflow\u2019s run method.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"ioinfoflow\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.io.IoInfoFlow\" title=\"dipy.workflows.io.IoInfoFlow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">IoInfoFlow</span></code></a><a class=\"headerlink\" href=\"#ioinfoflow\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.io.IoInfoFlow\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.io.</code><code class=\"descname\">IoInfoFlow</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.io.IoInfoFlow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow\" title=\"dipy.workflows.workflow.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.workflows.workflow.Workflow</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code>()</td>\n<td>Create an iterator for IO.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.io.IoInfoFlow.get_short_name\" title=\"dipy.workflows.io.IoInfoFlow.get_short_name\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code></a>()</td>\n<td>Return A short name for the workflow used to subdivide.</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code>()</td>\n<td>Return No sub runs since this is a simple workflow.</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code>()</td>\n<td>Check if a file will be overwritten upon processing the inputs.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.io.IoInfoFlow.run\" title=\"dipy.workflows.io.IoInfoFlow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(input_files[,&nbsp;b0_threshold,&nbsp;bvecs_tol,&nbsp;\u2026])</td>\n<td>Provides useful information about different files used in medical imaging.</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.io.IoInfoFlow.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.io.IoInfoFlow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"classmethod\">\n<dt id=\"dipy.workflows.io.IoInfoFlow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.io.IoInfoFlow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return A short name for the workflow used to subdivide.</p>\n<p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name.</p>\n<p>For example, a combined workflow with dti reconstruction and csd\nreconstruction might en up with the b0_threshold parameter. Using short\nnames, we will have dti.b0_threshold and csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.io.IoInfoFlow.run\">\n<code class=\"descname\">run</code><span class=\"sig-paren\">(</span><em>input_files</em>, <em>b0_threshold=50</em>, <em>bvecs_tol=0.01</em>, <em>bshell_thr=100</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.io.IoInfoFlow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Provides useful information about different files used in\nmedical imaging. Any number of input files can be provided. The\nprogram identifies the type of file by its extension.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>input_files</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">variable string</span></dt>\n<dd><p class=\"first last\">Any number of Nifti1, bvals or bvecs files.</p>\n</dd>\n<dt><strong>b0_threshold</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float, optional</span></dt>\n<dd><p class=\"first last\">(default 50)</p>\n</dd>\n<dt><strong>bvecs_tol</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float, optional</span></dt>\n<dd><p class=\"first last\">Threshold used to check that norm(bvec) = 1 +/- bvecs_tol\nb-vectors are unit vectors (default 0.01)</p>\n</dd>\n<dt><strong>bshell_thr</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float, optional</span></dt>\n<dd><p class=\"first last\">Threshold for distinguishing b-values in different shells\n(default 100)</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id26\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.io.Workflow\" title=\"dipy.workflows.io.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a><a class=\"headerlink\" href=\"#id26\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.io.Workflow\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.io.</code><code class=\"descname\">Workflow</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.io.Workflow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.7)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.io.Workflow.get_io_iterator\" title=\"dipy.workflows.io.Workflow.get_io_iterator\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code></a>()</td>\n<td>Create an iterator for IO.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.io.Workflow.get_short_name\" title=\"dipy.workflows.io.Workflow.get_short_name\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code></a>()</td>\n<td>Return A short name for the workflow used to subdivide.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.io.Workflow.get_sub_runs\" title=\"dipy.workflows.io.Workflow.get_sub_runs\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code></a>()</td>\n<td>Return No sub runs since this is a simple workflow.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.io.Workflow.manage_output_overwrite\" title=\"dipy.workflows.io.Workflow.manage_output_overwrite\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code></a>()</td>\n<td>Check if a file will be overwritten upon processing the inputs.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.io.Workflow.run\" title=\"dipy.workflows.io.Workflow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(*args,&nbsp;**kwargs)</td>\n<td>Execute the workflow.</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.io.Workflow.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.io.Workflow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.io.Workflow.get_io_iterator\">\n<code class=\"descname\">get_io_iterator</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.io.Workflow.get_io_iterator\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Create an iterator for IO.</p>\n<p>Use a couple of inspection tricks to build an IOIterator using the\nprevious frame (values of local variables and other contextuals) and\nthe run method\u2019s docstring.</p>\n</dd></dl>\n\n<dl class=\"classmethod\">\n<dt id=\"dipy.workflows.io.Workflow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.io.Workflow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return A short name for the workflow used to subdivide.</p>\n<p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name.</p>\n<p>For example, a combined workflow with dti reconstruction and csd\nreconstruction might en up with the b0_threshold parameter. Using short\nnames, we will have dti.b0_threshold and csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.io.Workflow.get_sub_runs\">\n<code class=\"descname\">get_sub_runs</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.io.Workflow.get_sub_runs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return No sub runs since this is a simple workflow.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.io.Workflow.manage_output_overwrite\">\n<code class=\"descname\">manage_output_overwrite</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.io.Workflow.manage_output_overwrite\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Check if a file will be overwritten upon processing the inputs.</p>\n<p>If it is bound to happen, an action is taken depending on\nself._force_overwrite (or \u2013force via command line). A log message is\noutput independently of the outcome to tell the user something\nhappened.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.io.Workflow.run\">\n<code class=\"descname\">run</code><span class=\"sig-paren\">(</span><em>*args</em>, <em>**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.io.Workflow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Execute the workflow.</p>\n<p>Since this is an abstract class, raise exception if this code is\nreached (not impletemented in child class or literally called on this\nclass)</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id27\">\n<h3>load_nifti<a class=\"headerlink\" href=\"#id27\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.io.load_nifti\">\n<code class=\"descclassname\">dipy.workflows.io.</code><code class=\"descname\">load_nifti</code><span class=\"sig-paren\">(</span><em>fname</em>, <em>return_img=False</em>, <em>return_voxsize=False</em>, <em>return_coords=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.io.load_nifti\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</div>\n<div class=\"section\" id=\"maskflow\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.mask.MaskFlow\" title=\"dipy.workflows.mask.MaskFlow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">MaskFlow</span></code></a><a class=\"headerlink\" href=\"#maskflow\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.mask.MaskFlow\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.mask.</code><code class=\"descname\">MaskFlow</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.mask.MaskFlow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow\" title=\"dipy.workflows.workflow.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.workflows.workflow.Workflow</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code>()</td>\n<td>Create an iterator for IO.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.mask.MaskFlow.get_short_name\" title=\"dipy.workflows.mask.MaskFlow.get_short_name\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code></a>()</td>\n<td>Return A short name for the workflow used to subdivide.</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code>()</td>\n<td>Return No sub runs since this is a simple workflow.</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code>()</td>\n<td>Check if a file will be overwritten upon processing the inputs.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.mask.MaskFlow.run\" title=\"dipy.workflows.mask.MaskFlow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(input_files,&nbsp;lb[,&nbsp;ub,&nbsp;out_dir,&nbsp;out_mask])</td>\n<td>Workflow for creating a binary mask</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.mask.MaskFlow.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.mask.MaskFlow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"classmethod\">\n<dt id=\"dipy.workflows.mask.MaskFlow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.mask.MaskFlow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return A short name for the workflow used to subdivide.</p>\n<p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name.</p>\n<p>For example, a combined workflow with dti reconstruction and csd\nreconstruction might en up with the b0_threshold parameter. Using short\nnames, we will have dti.b0_threshold and csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.mask.MaskFlow.run\">\n<code class=\"descname\">run</code><span class=\"sig-paren\">(</span><em>input_files</em>, <em>lb</em>, <em>ub=inf</em>, <em>out_dir=''</em>, <em>out_mask='mask.nii.gz'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.mask.MaskFlow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Workflow for creating a binary mask</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>input_files</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">Path to image to be masked.</p>\n</dd>\n<dt><strong>lb</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float</span></dt>\n<dd><p class=\"first last\">Lower bound value.</p>\n</dd>\n<dt><strong>ub</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float, optional</span></dt>\n<dd><p class=\"first last\">Upper bound value (default Inf)</p>\n</dd>\n<dt><strong>out_dir</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Output directory (default input file directory)</p>\n</dd>\n<dt><strong>out_mask</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the masked file (default \u2018mask.nii.gz\u2019)</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id28\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.mask.Workflow\" title=\"dipy.workflows.mask.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a><a class=\"headerlink\" href=\"#id28\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.mask.Workflow\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.mask.</code><code class=\"descname\">Workflow</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.mask.Workflow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.7)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.mask.Workflow.get_io_iterator\" title=\"dipy.workflows.mask.Workflow.get_io_iterator\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code></a>()</td>\n<td>Create an iterator for IO.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.mask.Workflow.get_short_name\" title=\"dipy.workflows.mask.Workflow.get_short_name\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code></a>()</td>\n<td>Return A short name for the workflow used to subdivide.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.mask.Workflow.get_sub_runs\" title=\"dipy.workflows.mask.Workflow.get_sub_runs\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code></a>()</td>\n<td>Return No sub runs since this is a simple workflow.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.mask.Workflow.manage_output_overwrite\" title=\"dipy.workflows.mask.Workflow.manage_output_overwrite\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code></a>()</td>\n<td>Check if a file will be overwritten upon processing the inputs.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.mask.Workflow.run\" title=\"dipy.workflows.mask.Workflow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(*args,&nbsp;**kwargs)</td>\n<td>Execute the workflow.</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.mask.Workflow.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.mask.Workflow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.mask.Workflow.get_io_iterator\">\n<code class=\"descname\">get_io_iterator</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.mask.Workflow.get_io_iterator\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Create an iterator for IO.</p>\n<p>Use a couple of inspection tricks to build an IOIterator using the\nprevious frame (values of local variables and other contextuals) and\nthe run method\u2019s docstring.</p>\n</dd></dl>\n\n<dl class=\"classmethod\">\n<dt id=\"dipy.workflows.mask.Workflow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.mask.Workflow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return A short name for the workflow used to subdivide.</p>\n<p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name.</p>\n<p>For example, a combined workflow with dti reconstruction and csd\nreconstruction might en up with the b0_threshold parameter. Using short\nnames, we will have dti.b0_threshold and csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.mask.Workflow.get_sub_runs\">\n<code class=\"descname\">get_sub_runs</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.mask.Workflow.get_sub_runs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return No sub runs since this is a simple workflow.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.mask.Workflow.manage_output_overwrite\">\n<code class=\"descname\">manage_output_overwrite</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.mask.Workflow.manage_output_overwrite\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Check if a file will be overwritten upon processing the inputs.</p>\n<p>If it is bound to happen, an action is taken depending on\nself._force_overwrite (or \u2013force via command line). A log message is\noutput independently of the outcome to tell the user something\nhappened.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.mask.Workflow.run\">\n<code class=\"descname\">run</code><span class=\"sig-paren\">(</span><em>*args</em>, <em>**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.mask.Workflow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Execute the workflow.</p>\n<p>Since this is an abstract class, raise exception if this code is\nreached (not impletemented in child class or literally called on this\nclass)</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id29\">\n<h3>load_nifti<a class=\"headerlink\" href=\"#id29\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.mask.load_nifti\">\n<code class=\"descclassname\">dipy.workflows.mask.</code><code class=\"descname\">load_nifti</code><span class=\"sig-paren\">(</span><em>fname</em>, <em>return_img=False</em>, <em>return_voxsize=False</em>, <em>return_coords=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.mask.load_nifti\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</div>\n<div class=\"section\" id=\"id30\">\n<h3>save_nifti<a class=\"headerlink\" href=\"#id30\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.mask.save_nifti\">\n<code class=\"descclassname\">dipy.workflows.mask.</code><code class=\"descname\">save_nifti</code><span class=\"sig-paren\">(</span><em>fname</em>, <em>data</em>, <em>affine</em>, <em>hdr=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.mask.save_nifti\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</div>\n<div class=\"section\" id=\"ioiterator\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.multi_io.IOIterator\" title=\"dipy.workflows.multi_io.IOIterator\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">IOIterator</span></code></a><a class=\"headerlink\" href=\"#ioiterator\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.multi_io.IOIterator\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.multi_io.</code><code class=\"descname\">IOIterator</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.multi_io.IOIterator\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.7)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p>Create output filenames that work nicely with multiple input files from\nmultiple directories (processing multiple subjects with one command)</p>\n<p>Use information from input files, out_dir and out_fnames to generate\ncorrect outputs which can come from long lists of multiple or single\ninputs.</p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"docutils\">\n<colgroup>\n<col width=\"71%\" />\n<col width=\"29%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><strong>create_directories</strong></td>\n<td>&#160;</td>\n</tr>\n<tr class=\"row-even\"><td><strong>create_outputs</strong></td>\n<td>&#160;</td>\n</tr>\n<tr class=\"row-odd\"><td><strong>file_existence_check</strong></td>\n<td>&#160;</td>\n</tr>\n<tr class=\"row-even\"><td><strong>set_inputs</strong></td>\n<td>&#160;</td>\n</tr>\n<tr class=\"row-odd\"><td><strong>set_out_dir</strong></td>\n<td>&#160;</td>\n</tr>\n<tr class=\"row-even\"><td><strong>set_out_fnames</strong></td>\n<td>&#160;</td>\n</tr>\n<tr class=\"row-odd\"><td><strong>set_output_keys</strong></td>\n<td>&#160;</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.multi_io.IOIterator.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.multi_io.IOIterator.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize self.  See help(type(self)) for accurate signature.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.multi_io.IOIterator.create_directories\">\n<code class=\"descname\">create_directories</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.multi_io.IOIterator.create_directories\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.multi_io.IOIterator.create_outputs\">\n<code class=\"descname\">create_outputs</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.multi_io.IOIterator.create_outputs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.multi_io.IOIterator.file_existence_check\">\n<code class=\"descname\">file_existence_check</code><span class=\"sig-paren\">(</span><em>args</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.multi_io.IOIterator.file_existence_check\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.multi_io.IOIterator.set_inputs\">\n<code class=\"descname\">set_inputs</code><span class=\"sig-paren\">(</span><em>*args</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.multi_io.IOIterator.set_inputs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.multi_io.IOIterator.set_out_dir\">\n<code class=\"descname\">set_out_dir</code><span class=\"sig-paren\">(</span><em>out_dir</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.multi_io.IOIterator.set_out_dir\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.multi_io.IOIterator.set_out_fnames\">\n<code class=\"descname\">set_out_fnames</code><span class=\"sig-paren\">(</span><em>*args</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.multi_io.IOIterator.set_out_fnames\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.multi_io.IOIterator.set_output_keys\">\n<code class=\"descname\">set_output_keys</code><span class=\"sig-paren\">(</span><em>*args</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.multi_io.IOIterator.set_output_keys\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"basename-without-extension\">\n<h3>basename_without_extension<a class=\"headerlink\" href=\"#basename-without-extension\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.multi_io.basename_without_extension\">\n<code class=\"descclassname\">dipy.workflows.multi_io.</code><code class=\"descname\">basename_without_extension</code><span class=\"sig-paren\">(</span><em>fname</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.multi_io.basename_without_extension\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</div>\n<div class=\"section\" id=\"common-start\">\n<h3>common_start<a class=\"headerlink\" href=\"#common-start\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.multi_io.common_start\">\n<code class=\"descclassname\">dipy.workflows.multi_io.</code><code class=\"descname\">common_start</code><span class=\"sig-paren\">(</span><em>sa</em>, <em>sb</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.multi_io.common_start\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return the longest common substring from the beginning of sa and sb.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"concatenate-inputs\">\n<h3>concatenate_inputs<a class=\"headerlink\" href=\"#concatenate-inputs\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.multi_io.concatenate_inputs\">\n<code class=\"descclassname\">dipy.workflows.multi_io.</code><code class=\"descname\">concatenate_inputs</code><span class=\"sig-paren\">(</span><em>multi_inputs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.multi_io.concatenate_inputs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Concatenate list of inputs</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"connect-output-paths\">\n<h3>connect_output_paths<a class=\"headerlink\" href=\"#connect-output-paths\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.multi_io.connect_output_paths\">\n<code class=\"descclassname\">dipy.workflows.multi_io.</code><code class=\"descname\">connect_output_paths</code><span class=\"sig-paren\">(</span><em>inputs</em>, <em>out_dir</em>, <em>out_files</em>, <em>output_strategy='absolute'</em>, <em>mix_names=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.multi_io.connect_output_paths\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Generates a list of output files paths based on input files and\noutput strategies.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>inputs</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array</span></dt>\n<dd><blockquote class=\"first\">\n<div><p>List of input paths.</p>\n</div></blockquote>\n<dl class=\"last docutils\">\n<dt>out_dir <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">The output directory.</p>\n</dd>\n<dt>out_files <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array</span></dt>\n<dd><p class=\"first last\">List of output files.</p>\n</dd>\n<dt>output_strategy <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><dl class=\"first last docutils\">\n<dt>Which strategy to use to generate the output paths.</dt>\n<dd><p class=\"first last\">\u2018append\u2019: Add out_dir to the path of the input.\n\u2018prepend\u2019: Add the input path directory tree to out_dir.\n\u2018absolute\u2019: Put directly in out_dir.</p>\n</dd>\n</dl>\n</dd>\n<dt>mix_names <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool</span></dt>\n<dd><p class=\"first last\">Whether or not prepend a string composed of a mix of the input\nnames to the final output name.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>A list of output file paths.</strong></dt>\n<dd></dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id31\">\n<h3>get_args_default<a class=\"headerlink\" href=\"#id31\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.multi_io.get_args_default\">\n<code class=\"descclassname\">dipy.workflows.multi_io.</code><code class=\"descname\">get_args_default</code><span class=\"sig-paren\">(</span><em>func</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.multi_io.get_args_default\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</div>\n<div class=\"section\" id=\"glob\">\n<h3>glob<a class=\"headerlink\" href=\"#glob\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.multi_io.glob\">\n<code class=\"descclassname\">dipy.workflows.multi_io.</code><code class=\"descname\">glob</code><span class=\"sig-paren\">(</span><em>pathname</em>, <em>*</em>, <em>recursive=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.multi_io.glob\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return a list of paths matching a pathname pattern.</p>\n<p>The pattern may contain simple shell-style wildcards a la\nfnmatch. However, unlike fnmatch, filenames starting with a\ndot are special cases that are not matched by \u2018*\u2019 and \u2018?\u2019\npatterns.</p>\n<p>If recursive is true, the pattern \u2018**\u2019 will match any files and\nzero or more directories and subdirectories.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"io-iterator\">\n<h3>io_iterator<a class=\"headerlink\" href=\"#io-iterator\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.multi_io.io_iterator\">\n<code class=\"descclassname\">dipy.workflows.multi_io.</code><code class=\"descname\">io_iterator</code><span class=\"sig-paren\">(</span><em>inputs</em>, <em>out_dir</em>, <em>fnames</em>, <em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>out_keys=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.multi_io.io_iterator\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Creates an IOIterator from the parameters.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>inputs</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array</span></dt>\n<dd><blockquote class=\"first\">\n<div><p>List of input files.</p>\n</div></blockquote>\n<dl class=\"last docutils\">\n<dt>out_dir <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">Output directory.</p>\n</dd>\n<dt>fnames <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array</span></dt>\n<dd><p class=\"first last\">File names of all outputs to be created.</p>\n</dd>\n<dt>output_strategy <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">Controls the behavior of the IOIterator for output paths.</p>\n</dd>\n<dt>mix_names <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool</span></dt>\n<dd><p class=\"first last\">Whether or not to append a mix of input names at the beginning.</p>\n</dd>\n</dl>\n</dd>\n<dt><strong>Returns</strong></dt>\n<dd></dd>\n<dt><strong>\u2014\u2014-</strong></dt>\n<dd><p class=\"first last\">Properly instantiated IOIterator object.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id32\">\n<h3><a href=\"#id131\"><span class=\"problematic\" id=\"id132\">io_iterator_</span></a><a class=\"headerlink\" href=\"#id32\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.multi_io.io_iterator_\">\n<code class=\"descclassname\">dipy.workflows.multi_io.</code><code class=\"descname\">io_iterator_</code><span class=\"sig-paren\">(</span><em>frame</em>, <em>fnc</em>, <em>output_strategy='absolute'</em>, <em>mix_names=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.multi_io.io_iterator_\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Creates an IOIterator using introspection.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>frame</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">frameobject</span></dt>\n<dd><blockquote class=\"first\">\n<div><p>Contains the info about the current local variables values.</p>\n</div></blockquote>\n<dl class=\"last docutils\">\n<dt>fnc <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">function</span></dt>\n<dd><p class=\"first last\">The function to inspect</p>\n</dd>\n<dt>output_strategy <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">Controls the behavior of the IOIterator for output paths.</p>\n</dd>\n<dt>mix_names <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool</span></dt>\n<dd><p class=\"first last\">Whether or not to append a mix of input names at the beginning.</p>\n</dd>\n</dl>\n</dd>\n<dt><strong>Returns</strong></dt>\n<dd></dd>\n<dt><strong>\u2014\u2014-</strong></dt>\n<dd><p class=\"first last\">Properly instantiated IOIterator object.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"slash-to-under\">\n<h3>slash_to_under<a class=\"headerlink\" href=\"#slash-to-under\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.multi_io.slash_to_under\">\n<code class=\"descclassname\">dipy.workflows.multi_io.</code><code class=\"descname\">slash_to_under</code><span class=\"sig-paren\">(</span><em>dir_str</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.multi_io.slash_to_under\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</div>\n<div class=\"section\" id=\"constrainedsphericaldeconvmodel\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.reconst.ConstrainedSphericalDeconvModel\" title=\"dipy.workflows.reconst.ConstrainedSphericalDeconvModel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ConstrainedSphericalDeconvModel</span></code></a><a class=\"headerlink\" href=\"#constrainedsphericaldeconvmodel\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.reconst.ConstrainedSphericalDeconvModel\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.reconst.</code><code class=\"descname\">ConstrainedSphericalDeconvModel</code><span class=\"sig-paren\">(</span><em>gtab</em>, <em>response</em>, <em>reg_sphere=None</em>, <em>sh_order=8</em>, <em>lambda_=1</em>, <em>tau=0.1</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.ConstrainedSphericalDeconvModel\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"../dipy.reconst/#dipy.reconst.shm.SphHarmModel\" title=\"dipy.reconst.shm.SphHarmModel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.reconst.shm.SphHarmModel</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">cache_clear</span></code>()</td>\n<td>Clear the cache.</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">cache_get</span></code>(tag,&nbsp;key[,&nbsp;default])</td>\n<td>Retrieve a value from the cache.</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">cache_set</span></code>(tag,&nbsp;key,&nbsp;value)</td>\n<td>Store a value in the cache.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.ConstrainedSphericalDeconvModel.fit\" title=\"dipy.workflows.reconst.ConstrainedSphericalDeconvModel.fit\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">fit</span></code></a>(data[,&nbsp;mask])</td>\n<td>Fit method for every voxel in data</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.ConstrainedSphericalDeconvModel.predict\" title=\"dipy.workflows.reconst.ConstrainedSphericalDeconvModel.predict\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">predict</span></code></a>(sh_coeff[,&nbsp;gtab,&nbsp;S0])</td>\n<td>Compute a signal prediction given spherical harmonic coefficients for the provided GradientTable class instance.</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">sampling_matrix</span></code>(sphere)</td>\n<td>The matrix needed to sample ODFs from coefficients of the model.</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.ConstrainedSphericalDeconvModel.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>gtab</em>, <em>response</em>, <em>reg_sphere=None</em>, <em>sh_order=8</em>, <em>lambda_=1</em>, <em>tau=0.1</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.ConstrainedSphericalDeconvModel.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Constrained Spherical Deconvolution (CSD) <a class=\"reference internal\" href=\"#r83cf0c2022c7-1\" id=\"id33\">[1]</a>.</p>\n<p>Spherical deconvolution computes a fiber orientation distribution\n(FOD), also called fiber ODF (fODF) <a class=\"reference internal\" href=\"#r83cf0c2022c7-2\" id=\"id34\">[2]</a>, as opposed to a diffusion ODF\nas the QballModel or the CsaOdfModel. This results in a sharper angular\nprofile with better angular resolution that is the best object to be\nused for later deterministic and probabilistic tractography <a class=\"reference internal\" href=\"#r83cf0c2022c7-3\" id=\"id35\">[3]</a>.</p>\n<p>A sharp fODF is obtained because a single fiber <em>response</em> function is\ninjected as <em>a priori</em> knowledge. The response function is often\ndata-driven and is thus provided as input to the\nConstrainedSphericalDeconvModel. It will be used as deconvolution\nkernel, as described in <a class=\"reference internal\" href=\"#r83cf0c2022c7-1\" id=\"id36\">[1]</a>.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>gtab</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">GradientTable</span></dt>\n<dd></dd>\n<dt><strong>response</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">tuple or AxSymShResponse object</span></dt>\n<dd><p class=\"first last\">A tuple with two elements. The first is the eigen-values as an (3,)\nndarray and the second is the signal value for the response\nfunction without diffusion weighting.  This is to be able to\ngenerate a single fiber synthetic signal. The response function\nwill be used as deconvolution kernel (<a class=\"reference internal\" href=\"#r83cf0c2022c7-1\" id=\"id37\">[1]</a>)</p>\n</dd>\n<dt><strong>reg_sphere</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">Sphere (optional)</span></dt>\n<dd><p class=\"first last\">sphere used to build the regularization B matrix.\nDefault: \u2018symmetric362\u2019.</p>\n</dd>\n<dt><strong>sh_order</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int (optional)</span></dt>\n<dd><p class=\"first last\">maximal spherical harmonics order. Default: 8</p>\n</dd>\n<dt><strong>lambda_</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float (optional)</span></dt>\n<dd><p class=\"first last\">weight given to the constrained-positivity regularization part of\nthe deconvolution equation (see <a class=\"reference internal\" href=\"#r83cf0c2022c7-1\" id=\"id38\">[1]</a>). Default: 1</p>\n</dd>\n<dt><strong>tau</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float (optional)</span></dt>\n<dd><p class=\"first last\">threshold controlling the amplitude below which the corresponding\nfODF is assumed to be zero.  Ideally, tau should be set to\nzero. However, to improve the stability of the algorithm, tau is\nset to tau*100 % of the mean fODF amplitude (here, 10% by default)\n(see <a class=\"reference internal\" href=\"#r83cf0c2022c7-1\" id=\"id39\">[1]</a>). Default: 0.1</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">References</p>\n<table class=\"docutils citation\" frame=\"void\" id=\"r83cf0c2022c7-1\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\">[1]</td><td><em>(<a class=\"fn-backref\" href=\"#id33\">1</a>, <a class=\"fn-backref\" href=\"#id36\">2</a>, <a class=\"fn-backref\" href=\"#id37\">3</a>, <a class=\"fn-backref\" href=\"#id38\">4</a>, <a class=\"fn-backref\" href=\"#id39\">5</a>, <a class=\"fn-backref\" href=\"#id40\">6</a>)</em> Tournier, J.D., et al. NeuroImage 2007. Robust determination of\nthe fibre orientation distribution in diffusion MRI:\nNon-negativity constrained super-resolved spherical\ndeconvolution</td></tr>\n</tbody>\n</table>\n<table class=\"docutils citation\" frame=\"void\" id=\"r83cf0c2022c7-2\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\">[2]</td><td><em>(<a class=\"fn-backref\" href=\"#id34\">1</a>, <a class=\"fn-backref\" href=\"#id41\">2</a>)</em> Descoteaux, M., et al. IEEE TMI 2009. Deterministic and\nProbabilistic Tractography Based on Complex Fibre Orientation\nDistributions</td></tr>\n</tbody>\n</table>\n<table class=\"docutils citation\" frame=\"void\" id=\"r83cf0c2022c7-3\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\">[3]</td><td><em>(<a class=\"fn-backref\" href=\"#id35\">1</a>, <a class=\"fn-backref\" href=\"#id42\">2</a>)</em> C^ot\u2019e, M-A., et al. Medical Image Analysis 2013. Tractometer:\nTowards validation of tractography pipelines</td></tr>\n</tbody>\n</table>\n<table class=\"docutils citation\" frame=\"void\" id=\"r83cf0c2022c7-4\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\"><a class=\"fn-backref\" href=\"#id43\">[4]</a></td><td>Tournier, J.D, et al. Imaging Systems and Technology\n2012. MRtrix: Diffusion Tractography in Crossing Fiber Regions</td></tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.ConstrainedSphericalDeconvModel.fit\">\n<code class=\"descname\">fit</code><span class=\"sig-paren\">(</span><em>data</em>, <em>mask=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.ConstrainedSphericalDeconvModel.fit\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Fit method for every voxel in data</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.ConstrainedSphericalDeconvModel.predict\">\n<code class=\"descname\">predict</code><span class=\"sig-paren\">(</span><em>sh_coeff</em>, <em>gtab=None</em>, <em>S0=1.0</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.ConstrainedSphericalDeconvModel.predict\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Compute a signal prediction given spherical harmonic coefficients\nfor the provided GradientTable class instance.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>sh_coeff</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">ndarray</span></dt>\n<dd><p class=\"first last\">The spherical harmonic representation of the FOD from which to make\nthe signal prediction.</p>\n</dd>\n<dt><strong>gtab</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">GradientTable</span></dt>\n<dd><p class=\"first last\">The gradients for which the signal will be predicted. Use the\nmodel\u2019s gradient table by default.</p>\n</dd>\n<dt><strong>S0</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">ndarray or float</span></dt>\n<dd><p class=\"first last\">The non diffusion-weighted signal value.</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>pred_sig</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">ndarray</span></dt>\n<dd><p class=\"first last\">The predicted signal.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"csaodfmodel\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.reconst.CsaOdfModel\" title=\"dipy.workflows.reconst.CsaOdfModel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">CsaOdfModel</span></code></a><a class=\"headerlink\" href=\"#csaodfmodel\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.reconst.CsaOdfModel\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.reconst.</code><code class=\"descname\">CsaOdfModel</code><span class=\"sig-paren\">(</span><em>gtab</em>, <em>sh_order</em>, <em>smooth=0.006</em>, <em>min_signal=1.0</em>, <em>assume_normed=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.CsaOdfModel\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"../dipy.reconst/#dipy.reconst.shm.QballBaseModel\" title=\"dipy.reconst.shm.QballBaseModel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.reconst.shm.QballBaseModel</span></code></a></p>\n<p>Implementation of Constant Solid Angle reconstruction method.</p>\n<p class=\"rubric\">References</p>\n<table class=\"docutils citation\" frame=\"void\" id=\"r9e10b82edb3a-1\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\"><a class=\"fn-backref\" href=\"#id44\">[1]</a></td><td>Aganj, I., et al. 2009. ODF Reconstruction in Q-Ball Imaging With\nSolid Angle Consideration.</td></tr>\n</tbody>\n</table>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">cache_clear</span></code>()</td>\n<td>Clear the cache.</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">cache_get</span></code>(tag,&nbsp;key[,&nbsp;default])</td>\n<td>Retrieve a value from the cache.</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">cache_set</span></code>(tag,&nbsp;key,&nbsp;value)</td>\n<td>Store a value in the cache.</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">fit</span></code>(data[,&nbsp;mask])</td>\n<td>Fits the model to diffusion data and returns the model fit</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">sampling_matrix</span></code>(sphere)</td>\n<td>The matrix needed to sample ODFs from coefficients of the model.</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.CsaOdfModel.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>gtab</em>, <em>sh_order</em>, <em>smooth=0.006</em>, <em>min_signal=1.0</em>, <em>assume_normed=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.CsaOdfModel.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Creates a model that can be used to fit or sample diffusion data</p>\n<div class=\"admonition seealso\">\n<p class=\"first admonition-title\">See also</p>\n<p class=\"last\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">normalize_data</span></code></p>\n</div>\n</dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.workflows.reconst.CsaOdfModel.max\">\n<code class=\"descname\">max</code><em class=\"property\"> = 0.999</em><a class=\"headerlink\" href=\"#dipy.workflows.reconst.CsaOdfModel.max\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.workflows.reconst.CsaOdfModel.min\">\n<code class=\"descname\">min</code><em class=\"property\"> = 0.001</em><a class=\"headerlink\" href=\"#dipy.workflows.reconst.CsaOdfModel.min\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"diffusionkurtosismodel\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.reconst.DiffusionKurtosisModel\" title=\"dipy.workflows.reconst.DiffusionKurtosisModel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DiffusionKurtosisModel</span></code></a><a class=\"headerlink\" href=\"#diffusionkurtosismodel\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.reconst.DiffusionKurtosisModel\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.reconst.</code><code class=\"descname\">DiffusionKurtosisModel</code><span class=\"sig-paren\">(</span><em>gtab</em>, <em>fit_method='WLS'</em>, <em>*args</em>, <em>**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.DiffusionKurtosisModel\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"../dipy.reconst/#dipy.reconst.base.ReconstModel\" title=\"dipy.reconst.base.ReconstModel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.reconst.base.ReconstModel</span></code></a></p>\n<p>Class for the Diffusion Kurtosis Model</p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.DiffusionKurtosisModel.fit\" title=\"dipy.workflows.reconst.DiffusionKurtosisModel.fit\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">fit</span></code></a>(data[,&nbsp;mask])</td>\n<td>Fit method of the DKI model class</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.DiffusionKurtosisModel.predict\" title=\"dipy.workflows.reconst.DiffusionKurtosisModel.predict\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">predict</span></code></a>(dki_params[,&nbsp;S0])</td>\n<td>Predict a signal for this DKI model class instance given parameters.</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.DiffusionKurtosisModel.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>gtab</em>, <em>fit_method='WLS'</em>, <em>*args</em>, <em>**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.DiffusionKurtosisModel.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Diffusion Kurtosis Tensor Model [1]</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>gtab</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">GradientTable class instance</span></dt>\n<dd></dd>\n<dt><strong>fit_method</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">str or callable</span></dt>\n<dd><p class=\"first\">str can be one of the following:\n\u2018OLS\u2019 or \u2018ULLS\u2019 for ordinary least squares</p>\n<blockquote>\n<div><p>dki.ols_fit_dki</p>\n</div></blockquote>\n<dl class=\"last docutils\">\n<dt>\u2018WLS\u2019 or \u2018UWLLS\u2019 for weighted ordinary least squares</dt>\n<dd><p class=\"first last\">dki.wls_fit_dki</p>\n</dd>\n<dt>callable has to have the signature:</dt>\n<dd><p class=\"first last\">fit_method(design_matrix, data, <a href=\"#id45\"><span class=\"problematic\" id=\"id46\">*</span></a>args, <a href=\"#id47\"><span class=\"problematic\" id=\"id48\">**</span></a>kwargs)</p>\n</dd>\n</dl>\n</dd>\n<dt><strong>args, kwargs</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">arguments and key-word arguments passed to the</span></dt>\n<dd><p class=\"first last\">fit_method. See dki.ols_fit_dki, dki.wls_fit_dki for details</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">References</p>\n<table class=\"docutils citation\" frame=\"void\" id=\"r05d15d5c8284-1\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\"><a class=\"fn-backref\" href=\"#id49\">[1]</a></td><td>Tabesh, A., Jensen, J.H., Ardekani, B.A., Helpern, J.A., 2011.</td></tr>\n</tbody>\n</table>\n<p>Estimation of tensors and tensor-derived measures in diffusional\nkurtosis imaging. Magn Reson Med. 65(3), 823-836</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.DiffusionKurtosisModel.fit\">\n<code class=\"descname\">fit</code><span class=\"sig-paren\">(</span><em>data</em>, <em>mask=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.DiffusionKurtosisModel.fit\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Fit method of the DKI model class</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>data</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array</span></dt>\n<dd><p class=\"first last\">The measured signal from one voxel.</p>\n</dd>\n<dt><strong>mask</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array</span></dt>\n<dd><p class=\"first last\">A boolean array used to mark the coordinates in the data that\nshould be analyzed that has the shape data.shape[-1]</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.DiffusionKurtosisModel.predict\">\n<code class=\"descname\">predict</code><span class=\"sig-paren\">(</span><em>dki_params</em>, <em>S0=1.0</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.DiffusionKurtosisModel.predict\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Predict a signal for this DKI model class instance given\nparameters.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>dki_params</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">ndarray (x, y, z, 27) or (n, 27)</span></dt>\n<dd><p class=\"first\">All parameters estimated from the diffusion kurtosis model.\nParameters are ordered as follows:</p>\n<blockquote class=\"last\">\n<div><ol class=\"arabic simple\">\n<li>Three diffusion tensor\u2019s eigenvalues</li>\n<li>Three lines of the eigenvector matrix each containing the\nfirst, second and third coordinates of the eigenvector</li>\n<li>Fifteen elements of the kurtosis tensor</li>\n</ol>\n</div></blockquote>\n</dd>\n<dt><strong>S0</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float or ndarray (optional)</span></dt>\n<dd><p class=\"first last\">The non diffusion-weighted signal in every voxel, or across all\nvoxels. Default: 1</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"reconstcsaflow\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.reconst.ReconstCSAFlow\" title=\"dipy.workflows.reconst.ReconstCSAFlow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ReconstCSAFlow</span></code></a><a class=\"headerlink\" href=\"#reconstcsaflow\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.reconst.ReconstCSAFlow\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.reconst.</code><code class=\"descname\">ReconstCSAFlow</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.ReconstCSAFlow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow\" title=\"dipy.workflows.workflow.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.workflows.workflow.Workflow</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code>()</td>\n<td>Create an iterator for IO.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.ReconstCSAFlow.get_short_name\" title=\"dipy.workflows.reconst.ReconstCSAFlow.get_short_name\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code></a>()</td>\n<td>Return A short name for the workflow used to subdivide.</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code>()</td>\n<td>Return No sub runs since this is a simple workflow.</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code>()</td>\n<td>Check if a file will be overwritten upon processing the inputs.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.ReconstCSAFlow.run\" title=\"dipy.workflows.reconst.ReconstCSAFlow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(input_files,&nbsp;bvalues_files,&nbsp;\u2026[,&nbsp;\u2026])</td>\n<td>Constant Solid Angle.</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.ReconstCSAFlow.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.ReconstCSAFlow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"classmethod\">\n<dt id=\"dipy.workflows.reconst.ReconstCSAFlow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.ReconstCSAFlow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return A short name for the workflow used to subdivide.</p>\n<p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name.</p>\n<p>For example, a combined workflow with dti reconstruction and csd\nreconstruction might en up with the b0_threshold parameter. Using short\nnames, we will have dti.b0_threshold and csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.ReconstCSAFlow.run\">\n<code class=\"descname\">run</code><span class=\"sig-paren\">(</span><em>input_files</em>, <em>bvalues_files</em>, <em>bvectors_files</em>, <em>mask_files</em>, <em>sh_order=6</em>, <em>odf_to_sh_order=8</em>, <em>b0_threshold=50.0</em>, <em>bvecs_tol=0.01</em>, <em>extract_pam_values=False</em>, <em>out_dir=''</em>, <em>out_pam='peaks.pam5'</em>, <em>out_shm='shm.nii.gz'</em>, <em>out_peaks_dir='peaks_dirs.nii.gz'</em>, <em>out_peaks_values='peaks_values.nii.gz'</em>, <em>out_peaks_indices='peaks_indices.nii.gz'</em>, <em>out_gfa='gfa.nii.gz'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.ReconstCSAFlow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Constant Solid Angle.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>input_files</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">Path to the input volumes. This path may contain wildcards to\nprocess multiple inputs at once.</p>\n</dd>\n<dt><strong>bvalues_files</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">Path to the bvalues files. This path may contain wildcards to use\nmultiple bvalues files at once.</p>\n</dd>\n<dt><strong>bvectors_files</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">Path to the bvectors files. This path may contain wildcards to use\nmultiple bvectors files at once.</p>\n</dd>\n<dt><strong>mask_files</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">Path to the input masks. This path may contain wildcards to use\nmultiple masks at once. (default: No mask used)</p>\n</dd>\n<dt><strong>sh_order</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int, optional</span></dt>\n<dd><p class=\"first last\">Spherical harmonics order (default 6) used in the CSA fit.</p>\n</dd>\n<dt><strong>odf_to_sh_order</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int, optional</span></dt>\n<dd><p class=\"first last\">Spherical harmonics order used for peak_from_model to compress\nthe ODF to spherical harmonics coefficients (default 8)</p>\n</dd>\n<dt><strong>b0_threshold</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float, optional</span></dt>\n<dd><p class=\"first last\">Threshold used to find b=0 directions</p>\n</dd>\n<dt><strong>bvecs_tol</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float, optional</span></dt>\n<dd><p class=\"first last\">Threshold used so that norm(bvec)=1 (default 0.01)</p>\n</dd>\n<dt><strong>extract_pam_values</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool, optional</span></dt>\n<dd><p class=\"first last\">Wheter or not to save pam volumes as single nifti files.</p>\n</dd>\n<dt><strong>out_dir</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Output directory (default input file directory)</p>\n</dd>\n<dt><strong>out_pam</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the peaks volume to be saved (default \u2018peaks.pam5\u2019)</p>\n</dd>\n<dt><strong>out_shm</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the shperical harmonics volume to be saved\n(default \u2018shm.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_peaks_dir</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the peaks directions volume to be saved\n(default \u2018peaks_dirs.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_peaks_values</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the peaks values volume to be saved\n(default \u2018peaks_values.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_peaks_indices</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the peaks indices volume to be saved\n(default \u2018peaks_indices.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_gfa</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the generalise fa volume to be saved (default \u2018gfa.nii.gz\u2019)</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">References</p>\n<table class=\"docutils citation\" frame=\"void\" id=\"r91123ab0acf1-1\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\"><a class=\"fn-backref\" href=\"#id50\">[1]</a></td><td>Aganj, I., et al. 2009. ODF Reconstruction in Q-Ball Imaging\nwith Solid Angle Consideration.</td></tr>\n</tbody>\n</table>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"reconstcsdflow\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.reconst.ReconstCSDFlow\" title=\"dipy.workflows.reconst.ReconstCSDFlow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ReconstCSDFlow</span></code></a><a class=\"headerlink\" href=\"#reconstcsdflow\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.reconst.ReconstCSDFlow\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.reconst.</code><code class=\"descname\">ReconstCSDFlow</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.ReconstCSDFlow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow\" title=\"dipy.workflows.workflow.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.workflows.workflow.Workflow</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code>()</td>\n<td>Create an iterator for IO.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.ReconstCSDFlow.get_short_name\" title=\"dipy.workflows.reconst.ReconstCSDFlow.get_short_name\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code></a>()</td>\n<td>Return A short name for the workflow used to subdivide.</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code>()</td>\n<td>Return No sub runs since this is a simple workflow.</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code>()</td>\n<td>Check if a file will be overwritten upon processing the inputs.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.ReconstCSDFlow.run\" title=\"dipy.workflows.reconst.ReconstCSDFlow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(input_files,&nbsp;bvalues_files,&nbsp;\u2026[,&nbsp;\u2026])</td>\n<td>Constrained spherical deconvolution</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.ReconstCSDFlow.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.ReconstCSDFlow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"classmethod\">\n<dt id=\"dipy.workflows.reconst.ReconstCSDFlow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.ReconstCSDFlow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return A short name for the workflow used to subdivide.</p>\n<p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name.</p>\n<p>For example, a combined workflow with dti reconstruction and csd\nreconstruction might en up with the b0_threshold parameter. Using short\nnames, we will have dti.b0_threshold and csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.ReconstCSDFlow.run\">\n<code class=\"descname\">run</code><span class=\"sig-paren\">(</span><em>input_files</em>, <em>bvalues_files</em>, <em>bvectors_files</em>, <em>mask_files</em>, <em>b0_threshold=50.0</em>, <em>bvecs_tol=0.01</em>, <em>roi_center=None</em>, <em>roi_radius=10</em>, <em>fa_thr=0.7</em>, <em>frf=None</em>, <em>extract_pam_values=False</em>, <em>sh_order=8</em>, <em>odf_to_sh_order=8</em>, <em>out_dir=''</em>, <em>out_pam='peaks.pam5'</em>, <em>out_shm='shm.nii.gz'</em>, <em>out_peaks_dir='peaks_dirs.nii.gz'</em>, <em>out_peaks_values='peaks_values.nii.gz'</em>, <em>out_peaks_indices='peaks_indices.nii.gz'</em>, <em>out_gfa='gfa.nii.gz'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.ReconstCSDFlow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Constrained spherical deconvolution</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>input_files</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">Path to the input volumes. This path may contain wildcards to\nprocess multiple inputs at once.</p>\n</dd>\n<dt><strong>bvalues_files</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">Path to the bvalues files. This path may contain wildcards to use\nmultiple bvalues files at once.</p>\n</dd>\n<dt><strong>bvectors_files</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">Path to the bvectors files. This path may contain wildcards to use\nmultiple bvectors files at once.</p>\n</dd>\n<dt><strong>mask_files</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">Path to the input masks. This path may contain wildcards to use\nmultiple masks at once. (default: No mask used)</p>\n</dd>\n<dt><strong>b0_threshold</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float, optional</span></dt>\n<dd><p class=\"first last\">Threshold used to find b=0 directions</p>\n</dd>\n<dt><strong>bvecs_tol</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float, optional</span></dt>\n<dd><p class=\"first last\">Bvecs should be unit vectors. (default:0.01)</p>\n</dd>\n<dt><strong>roi_center</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">variable int, optional</span></dt>\n<dd><p class=\"first last\">Center of ROI in data. If center is None, it is assumed that it is\nthe center of the volume with shape <cite>data.shape[:3]</cite> (default None)</p>\n</dd>\n<dt><strong>roi_radius</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int, optional</span></dt>\n<dd><p class=\"first last\">radius of cubic ROI in voxels (default 10)</p>\n</dd>\n<dt><strong>fa_thr</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float, optional</span></dt>\n<dd><p class=\"first last\">FA threshold for calculating the response function (default 0.7)</p>\n</dd>\n<dt><strong>frf</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">variable float, optional</span></dt>\n<dd><p class=\"first last\">Fiber response function can be for example inputed as 15 4 4\n(from the command line) or [15, 4, 4] from a Python script to be\nconverted to float and mutiplied by 10**-4 . If None\nthe fiber response function will be computed automatically\n(default: None).</p>\n</dd>\n<dt><strong>extract_pam_values</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool, optional</span></dt>\n<dd><p class=\"first last\">Save or not to save pam volumes as single nifti files.</p>\n</dd>\n<dt><strong>sh_order</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int, optional</span></dt>\n<dd><p class=\"first last\">Spherical harmonics order (default 6) used in the CSA fit.</p>\n</dd>\n<dt><strong>odf_to_sh_order</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int, optional</span></dt>\n<dd><p class=\"first last\">Spherical harmonics order used for peak_from_model to compress\nthe ODF to spherical harmonics coefficients (default 8)</p>\n</dd>\n<dt><strong>out_dir</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Output directory (default input file directory)</p>\n</dd>\n<dt><strong>out_pam</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the peaks volume to be saved (default \u2018peaks.pam5\u2019)</p>\n</dd>\n<dt><strong>out_shm</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the shperical harmonics volume to be saved\n(default \u2018shm.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_peaks_dir</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the peaks directions volume to be saved\n(default \u2018peaks_dirs.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_peaks_values</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the peaks values volume to be saved\n(default \u2018peaks_values.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_peaks_indices</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the peaks indices volume to be saved\n(default \u2018peaks_indices.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_gfa</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the generalise fa volume to be saved (default \u2018gfa.nii.gz\u2019)</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">References</p>\n<table class=\"docutils citation\" frame=\"void\" id=\"rd2338fb036e0-1\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\"><a class=\"fn-backref\" href=\"#id51\">[1]</a></td><td>Tournier, J.D., et al. NeuroImage 2007. Robust determination of\nthe fibre orientation distribution in diffusion MRI: Non-negativity\nconstrained super-resolved spherical deconvolution.</td></tr>\n</tbody>\n</table>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"reconstdkiflow\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.reconst.ReconstDkiFlow\" title=\"dipy.workflows.reconst.ReconstDkiFlow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ReconstDkiFlow</span></code></a><a class=\"headerlink\" href=\"#reconstdkiflow\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.reconst.ReconstDkiFlow\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.reconst.</code><code class=\"descname\">ReconstDkiFlow</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.ReconstDkiFlow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow\" title=\"dipy.workflows.workflow.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.workflows.workflow.Workflow</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code>()</td>\n<td>Create an iterator for IO.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.ReconstDkiFlow.get_short_name\" title=\"dipy.workflows.reconst.ReconstDkiFlow.get_short_name\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code></a>()</td>\n<td>Return A short name for the workflow used to subdivide.</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code>()</td>\n<td>Return No sub runs since this is a simple workflow.</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code>()</td>\n<td>Check if a file will be overwritten upon processing the inputs.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.ReconstDkiFlow.run\" title=\"dipy.workflows.reconst.ReconstDkiFlow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(input_files,&nbsp;bvalues_files,&nbsp;\u2026[,&nbsp;\u2026])</td>\n<td>Workflow for Diffusion Kurtosis reconstruction and for computing DKI metrics.</td>\n</tr>\n</tbody>\n</table>\n<table border=\"1\" class=\"docutils\">\n<colgroup>\n<col width=\"68%\" />\n<col width=\"32%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><strong>get_dki_model</strong></td>\n<td>&#160;</td>\n</tr>\n<tr class=\"row-even\"><td><strong>get_fitted_tensor</strong></td>\n<td>&#160;</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.ReconstDkiFlow.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.ReconstDkiFlow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.ReconstDkiFlow.get_dki_model\">\n<code class=\"descname\">get_dki_model</code><span class=\"sig-paren\">(</span><em>gtab</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.ReconstDkiFlow.get_dki_model\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.ReconstDkiFlow.get_fitted_tensor\">\n<code class=\"descname\">get_fitted_tensor</code><span class=\"sig-paren\">(</span><em>data</em>, <em>mask</em>, <em>bval</em>, <em>bvec</em>, <em>b0_threshold=50</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.ReconstDkiFlow.get_fitted_tensor\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"classmethod\">\n<dt id=\"dipy.workflows.reconst.ReconstDkiFlow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.ReconstDkiFlow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return A short name for the workflow used to subdivide.</p>\n<p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name.</p>\n<p>For example, a combined workflow with dti reconstruction and csd\nreconstruction might en up with the b0_threshold parameter. Using short\nnames, we will have dti.b0_threshold and csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.ReconstDkiFlow.run\">\n<code class=\"descname\">run</code><span class=\"sig-paren\">(</span><em>input_files</em>, <em>bvalues_files</em>, <em>bvectors_files</em>, <em>mask_files</em>, <em>b0_threshold=50.0</em>, <em>save_metrics=[]</em>, <em>out_dir=''</em>, <em>out_dt_tensor='dti_tensors.nii.gz'</em>, <em>out_fa='fa.nii.gz'</em>, <em>out_ga='ga.nii.gz'</em>, <em>out_rgb='rgb.nii.gz'</em>, <em>out_md='md.nii.gz'</em>, <em>out_ad='ad.nii.gz'</em>, <em>out_rd='rd.nii.gz'</em>, <em>out_mode='mode.nii.gz'</em>, <em>out_evec='evecs.nii.gz'</em>, <em>out_eval='evals.nii.gz'</em>, <em>out_dk_tensor='dki_tensors.nii.gz'</em>, <em>out_mk='mk.nii.gz'</em>, <em>out_ak='ak.nii.gz'</em>, <em>out_rk='rk.nii.gz'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.ReconstDkiFlow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Workflow for Diffusion Kurtosis reconstruction and for computing\nDKI metrics. Performs a DKI reconstruction on the files by \u2018globing\u2019\n<code class=\"docutils literal notranslate\"><span class=\"pre\">input_files</span></code> and saves the DTI metrics in a directory specified by\n<code class=\"docutils literal notranslate\"><span class=\"pre\">out_dir</span></code>.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>input_files</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">Path to the input volumes. This path may contain wildcards to\nprocess multiple inputs at once.</p>\n</dd>\n<dt><strong>bvalues_files</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">Path to the bvalues files. This path may contain wildcards to use\nmultiple bvalues files at once.</p>\n</dd>\n<dt><strong>bvectors_files</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">Path to the bvalues files. This path may contain wildcards to use\nmultiple bvalues files at once.</p>\n</dd>\n<dt><strong>mask_files</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">Path to the input masks. This path may contain wildcards to use\nmultiple masks at once. (default: No mask used)</p>\n</dd>\n<dt><strong>b0_threshold</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float, optional</span></dt>\n<dd><p class=\"first last\">Threshold used to find b=0 directions (default 0.0)</p>\n</dd>\n<dt><strong>save_metrics</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">variable string, optional</span></dt>\n<dd><p class=\"first last\">List of metrics to save.\nPossible values: fa, ga, rgb, md, ad, rd, mode, tensor, evec, eval\n(default [] (all))</p>\n</dd>\n<dt><strong>out_dir</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Output directory (default input file directory)</p>\n</dd>\n<dt><strong>out_dt_tensor</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the tensors volume to be saved\n(default: \u2018dti_tensors.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_dk_tensor</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the tensors volume to be saved\n(default \u2018dki_tensors.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_fa</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the fractional anisotropy volume to be saved\n(default \u2018fa.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_ga</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the geodesic anisotropy volume to be saved\n(default \u2018ga.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_rgb</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the color fa volume to be saved (default \u2018rgb.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_md</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the mean diffusivity volume to be saved\n(default \u2018md.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_ad</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the axial diffusivity volume to be saved\n(default \u2018ad.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_rd</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the radial diffusivity volume to be saved\n(default \u2018rd.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_mode</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the mode volume to be saved (default \u2018mode.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_evec</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the eigenvectors volume to be saved\n(default \u2018evecs.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_eval</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the eigenvalues to be saved (default \u2018evals.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_mk</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the mean kurtosis to be saved (default: \u2018mk.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_ak</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the axial kurtosis to be saved (default: \u2018ak.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_rk</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the radial kurtosis to be saved (default: \u2018rk.nii.gz\u2019)</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">References</p>\n<table class=\"docutils citation\" frame=\"void\" id=\"rba3aa504cda7-1\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\"><a class=\"fn-backref\" href=\"#id52\">[1]</a></td><td>Tabesh, A., Jensen, J.H., Ardekani, B.A., Helpern, J.A., 2011.\nEstimation of tensors and tensor-derived measures in diffusional\nkurtosis imaging. Magn Reson Med. 65(3), 823-836</td></tr>\n</tbody>\n</table>\n<table class=\"docutils citation\" frame=\"void\" id=\"rba3aa504cda7-2\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\"><a class=\"fn-backref\" href=\"#id53\">[2]</a></td><td>Jensen, Jens H., Joseph A. Helpern, Anita Ramani, Hanzhang Lu,\nand Kyle Kaczynski. 2005. Diffusional Kurtosis Imaging: The\nQuantification of Non-Gaussian Water Diffusion by Means of Magnetic\nResonance Imaging. MRM 53 (6):1432-40.</td></tr>\n</tbody>\n</table>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"reconstdtiflow\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.reconst.ReconstDtiFlow\" title=\"dipy.workflows.reconst.ReconstDtiFlow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ReconstDtiFlow</span></code></a><a class=\"headerlink\" href=\"#reconstdtiflow\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.reconst.ReconstDtiFlow\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.reconst.</code><code class=\"descname\">ReconstDtiFlow</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.ReconstDtiFlow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow\" title=\"dipy.workflows.workflow.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.workflows.workflow.Workflow</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code>()</td>\n<td>Create an iterator for IO.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.ReconstDtiFlow.get_short_name\" title=\"dipy.workflows.reconst.ReconstDtiFlow.get_short_name\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code></a>()</td>\n<td>Return A short name for the workflow used to subdivide.</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code>()</td>\n<td>Return No sub runs since this is a simple workflow.</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code>()</td>\n<td>Check if a file will be overwritten upon processing the inputs.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.ReconstDtiFlow.run\" title=\"dipy.workflows.reconst.ReconstDtiFlow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(input_files,&nbsp;bvalues_files,&nbsp;\u2026[,&nbsp;\u2026])</td>\n<td>Workflow for tensor reconstruction and for computing DTI metrics.</td>\n</tr>\n</tbody>\n</table>\n<table border=\"1\" class=\"docutils\">\n<colgroup>\n<col width=\"68%\" />\n<col width=\"32%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><strong>get_fitted_tensor</strong></td>\n<td>&#160;</td>\n</tr>\n<tr class=\"row-even\"><td><strong>get_tensor_model</strong></td>\n<td>&#160;</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.ReconstDtiFlow.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.ReconstDtiFlow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.ReconstDtiFlow.get_fitted_tensor\">\n<code class=\"descname\">get_fitted_tensor</code><span class=\"sig-paren\">(</span><em>data</em>, <em>mask</em>, <em>bval</em>, <em>bvec</em>, <em>b0_threshold=50</em>, <em>bvecs_tol=0.01</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.ReconstDtiFlow.get_fitted_tensor\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"classmethod\">\n<dt id=\"dipy.workflows.reconst.ReconstDtiFlow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.ReconstDtiFlow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return A short name for the workflow used to subdivide.</p>\n<p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name.</p>\n<p>For example, a combined workflow with dti reconstruction and csd\nreconstruction might en up with the b0_threshold parameter. Using short\nnames, we will have dti.b0_threshold and csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.ReconstDtiFlow.get_tensor_model\">\n<code class=\"descname\">get_tensor_model</code><span class=\"sig-paren\">(</span><em>gtab</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.ReconstDtiFlow.get_tensor_model\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.ReconstDtiFlow.run\">\n<code class=\"descname\">run</code><span class=\"sig-paren\">(</span><em>input_files</em>, <em>bvalues_files</em>, <em>bvectors_files</em>, <em>mask_files</em>, <em>b0_threshold=50</em>, <em>bvecs_tol=0.01</em>, <em>save_metrics=[]</em>, <em>out_dir=''</em>, <em>out_tensor='tensors.nii.gz'</em>, <em>out_fa='fa.nii.gz'</em>, <em>out_ga='ga.nii.gz'</em>, <em>out_rgb='rgb.nii.gz'</em>, <em>out_md='md.nii.gz'</em>, <em>out_ad='ad.nii.gz'</em>, <em>out_rd='rd.nii.gz'</em>, <em>out_mode='mode.nii.gz'</em>, <em>out_evec='evecs.nii.gz'</em>, <em>out_eval='evals.nii.gz'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.ReconstDtiFlow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Workflow for tensor reconstruction and for computing DTI metrics.\nusing Weighted Least-Squares.\nPerforms a tensor reconstruction on the files by \u2018globing\u2019\n<code class=\"docutils literal notranslate\"><span class=\"pre\">input_files</span></code> and saves the DTI metrics in a directory specified by\n<code class=\"docutils literal notranslate\"><span class=\"pre\">out_dir</span></code>.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>input_files</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">Path to the input volumes. This path may contain wildcards to\nprocess multiple inputs at once.</p>\n</dd>\n<dt><strong>bvalues_files</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">Path to the bvalues files. This path may contain wildcards to use\nmultiple bvalues files at once.</p>\n</dd>\n<dt><strong>bvectors_files</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">Path to the bvectors files. This path may contain wildcards to use\nmultiple bvectors files at once.</p>\n</dd>\n<dt><strong>mask_files</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">Path to the input masks. This path may contain wildcards to use\nmultiple masks at once. (default: No mask used)</p>\n</dd>\n<dt><strong>b0_threshold</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float, optional</span></dt>\n<dd><p class=\"first last\">Threshold used to find b=0 directions (default 0.0)</p>\n</dd>\n<dt><strong>bvecs_tol</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float, optional</span></dt>\n<dd><p class=\"first last\">Threshold used to check that norm(bvec) = 1 +/- bvecs_tol\nb-vectors are unit vectors (default 0.01)</p>\n</dd>\n<dt><strong>save_metrics</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">variable string, optional</span></dt>\n<dd><p class=\"first last\">List of metrics to save.\nPossible values: fa, ga, rgb, md, ad, rd, mode, tensor, evec, eval\n(default [] (all))</p>\n</dd>\n<dt><strong>out_dir</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Output directory (default input file directory)</p>\n</dd>\n<dt><strong>out_tensor</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the tensors volume to be saved (default \u2018tensors.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_fa</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the fractional anisotropy volume to be saved\n(default \u2018fa.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_ga</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the geodesic anisotropy volume to be saved\n(default \u2018ga.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_rgb</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the color fa volume to be saved (default \u2018rgb.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_md</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the mean diffusivity volume to be saved\n(default \u2018md.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_ad</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the axial diffusivity volume to be saved\n(default \u2018ad.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_rd</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the radial diffusivity volume to be saved\n(default \u2018rd.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_mode</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the mode volume to be saved (default \u2018mode.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_evec</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the eigenvectors volume to be saved\n(default \u2018evecs.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_eval</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the eigenvalues to be saved (default \u2018evals.nii.gz\u2019)</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">References</p>\n<table class=\"docutils citation\" frame=\"void\" id=\"r1c6b043e6f2c-1\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\"><a class=\"fn-backref\" href=\"#id54\">[1]</a></td><td>Basser, P.J., Mattiello, J., LeBihan, D., 1994. Estimation of\nthe effective self-diffusion tensor from the NMR spin echo. J Magn\nReson B 103, 247-254.</td></tr>\n</tbody>\n</table>\n<table class=\"docutils citation\" frame=\"void\" id=\"r1c6b043e6f2c-2\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\"><a class=\"fn-backref\" href=\"#id55\">[2]</a></td><td>Basser, P., Pierpaoli, C., 1996. Microstructural and\nphysiological features of tissues elucidated by quantitative\ndiffusion-tensor MRI.  Journal of Magnetic Resonance 111, 209-219.</td></tr>\n</tbody>\n</table>\n<table class=\"docutils citation\" frame=\"void\" id=\"r1c6b043e6f2c-3\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\"><a class=\"fn-backref\" href=\"#id56\">[3]</a></td><td>Lin-Ching C., Jones D.K., Pierpaoli, C. 2005. RESTORE: Robust\nestimation of tensors by outlier rejection. MRM 53: 1088-1095</td></tr>\n</tbody>\n</table>\n<table class=\"docutils citation\" frame=\"void\" id=\"r1c6b043e6f2c-4\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\"><a class=\"fn-backref\" href=\"#id57\">[4]</a></td><td>hung, SW., Lu, Y., Henry, R.G., 2006. Comparison of bootstrap\napproaches for estimation of uncertainties of DTI parameters.\nNeuroImage 33, 531-541.</td></tr>\n</tbody>\n</table>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"reconstmapmriflow\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.reconst.ReconstMAPMRIFlow\" title=\"dipy.workflows.reconst.ReconstMAPMRIFlow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ReconstMAPMRIFlow</span></code></a><a class=\"headerlink\" href=\"#reconstmapmriflow\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.reconst.ReconstMAPMRIFlow\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.reconst.</code><code class=\"descname\">ReconstMAPMRIFlow</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.ReconstMAPMRIFlow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow\" title=\"dipy.workflows.workflow.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.workflows.workflow.Workflow</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code>()</td>\n<td>Create an iterator for IO.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.ReconstMAPMRIFlow.get_short_name\" title=\"dipy.workflows.reconst.ReconstMAPMRIFlow.get_short_name\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code></a>()</td>\n<td>Return A short name for the workflow used to subdivide.</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code>()</td>\n<td>Return No sub runs since this is a simple workflow.</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code>()</td>\n<td>Check if a file will be overwritten upon processing the inputs.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.ReconstMAPMRIFlow.run\" title=\"dipy.workflows.reconst.ReconstMAPMRIFlow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(data_files,&nbsp;bvals_files,&nbsp;bvecs_files,&nbsp;\u2026)</td>\n<td>Workflow for fitting the MAPMRI model (with optional Laplacian regularization).</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.ReconstMAPMRIFlow.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.ReconstMAPMRIFlow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"classmethod\">\n<dt id=\"dipy.workflows.reconst.ReconstMAPMRIFlow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.ReconstMAPMRIFlow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return A short name for the workflow used to subdivide.</p>\n<p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name.</p>\n<p>For example, a combined workflow with dti reconstruction and csd\nreconstruction might en up with the b0_threshold parameter. Using short\nnames, we will have dti.b0_threshold and csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.ReconstMAPMRIFlow.run\">\n<code class=\"descname\">run</code><span class=\"sig-paren\">(</span><em>data_files</em>, <em>bvals_files</em>, <em>bvecs_files</em>, <em>small_delta</em>, <em>big_delta</em>, <em>b0_threshold=50.0</em>, <em>laplacian=True</em>, <em>positivity=True</em>, <em>bval_threshold=2000</em>, <em>save_metrics=[]</em>, <em>laplacian_weighting=0.05</em>, <em>radial_order=6</em>, <em>out_dir=''</em>, <em>out_rtop='rtop.nii.gz'</em>, <em>out_lapnorm='lapnorm.nii.gz'</em>, <em>out_msd='msd.nii.gz'</em>, <em>out_qiv='qiv.nii.gz'</em>, <em>out_rtap='rtap.nii.gz'</em>, <em>out_rtpp='rtpp.nii.gz'</em>, <em>out_ng='ng.nii.gz'</em>, <em>out_perng='perng.nii.gz'</em>, <em>out_parng='parng.nii.gz'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.ReconstMAPMRIFlow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Workflow for fitting the MAPMRI model (with optional Laplacian\nregularization). Generates rtop, lapnorm, msd, qiv, rtap, rtpp,\nnon-gaussian (ng), parallel ng, perpendicular ng saved in a nifti\nformat in input files provided by <cite>data_files</cite> and saves the nifti\nfiles to an output directory specified by <cite>out_dir</cite>.</p>\n<p>In order for the MAPMRI workflow to work in the way\nintended either the laplacian or positivity or both must\nbe set to True.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>data_files</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">Path to the input volume.</p>\n</dd>\n<dt><strong>bvals_files</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">Path to the bval files.</p>\n</dd>\n<dt><strong>bvecs_files</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">Path to the bvec files.</p>\n</dd>\n<dt><strong>small_delta</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float</span></dt>\n<dd><p class=\"first last\">Small delta value used in generation of gradient table of provided\nbval and bvec.</p>\n</dd>\n<dt><strong>big_delta</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float</span></dt>\n<dd><p class=\"first last\">Big delta value used in generation of gradient table of provided\nbval and bvec.</p>\n</dd>\n<dt><strong>b0_threshold</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float, optional</span></dt>\n<dd><p class=\"first last\">Threshold used to find b=0 directions (default 0.0)</p>\n</dd>\n<dt><strong>laplacian</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool, optional</span></dt>\n<dd><p class=\"first last\">Regularize using the Laplacian of the MAP-MRI basis (default True)</p>\n</dd>\n<dt><strong>positivity</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool, optional</span></dt>\n<dd><p class=\"first last\">Constrain the propagator to be positive. (default True)</p>\n</dd>\n<dt><strong>bval_threshold</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float, optional</span></dt>\n<dd><p class=\"first last\">Sets the b-value threshold to be used in the scale factor\nestimation. In order for the estimated non-Gaussianity to have\nmeaning this value should set to a lower value (b&lt;2000 s/mm^2)\nsuch that the scale factors are estimated on signal points that\nreasonably represent the spins at Gaussian diffusion.\n(default: 2000)</p>\n</dd>\n<dt><strong>save_metrics</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">variable string, optional</span></dt>\n<dd><p class=\"first last\">List of metrics to save.\nPossible values: rtop, laplacian_signal, msd, qiv, rtap, rtpp,\nng, perng, parng\n(default: [] (all))</p>\n</dd>\n<dt><strong>laplacian_weighting</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float, optional</span></dt>\n<dd><p class=\"first last\">Weighting value used in fitting the MAPMRI model in the laplacian\nand both model types. (default: 0.05)</p>\n</dd>\n<dt><strong>radial_order</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">unsigned int, optional</span></dt>\n<dd><p class=\"first last\">Even value used to set the order of the basis\n(default: 6)</p>\n</dd>\n<dt><strong>out_dir</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Output directory (default: input file directory)</p>\n</dd>\n<dt><strong>out_rtop</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the rtop to be saved</p>\n</dd>\n<dt><strong>out_lapnorm</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the norm of laplacian signal to be saved</p>\n</dd>\n<dt><strong>out_msd</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the msd to be saved</p>\n</dd>\n<dt><strong>out_qiv</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the qiv to be saved</p>\n</dd>\n<dt><strong>out_rtap</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the rtap to be saved</p>\n</dd>\n<dt><strong>out_rtpp</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the rtpp to be saved</p>\n</dd>\n<dt><strong>out_ng</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the Non-Gaussianity to be saved</p>\n</dd>\n<dt><strong>out_perng</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the Non-Gaussianity perpendicular to be saved</p>\n</dd>\n<dt><strong>out_parng</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the Non-Gaussianity parallel to be saved</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"tensormodel\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.reconst.TensorModel\" title=\"dipy.workflows.reconst.TensorModel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TensorModel</span></code></a><a class=\"headerlink\" href=\"#tensormodel\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.reconst.TensorModel\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.reconst.</code><code class=\"descname\">TensorModel</code><span class=\"sig-paren\">(</span><em>gtab</em>, <em>fit_method='WLS'</em>, <em>return_S0_hat=False</em>, <em>*args</em>, <em>**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.TensorModel\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"../dipy.reconst/#dipy.reconst.base.ReconstModel\" title=\"dipy.reconst.base.ReconstModel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.reconst.base.ReconstModel</span></code></a></p>\n<p>Diffusion Tensor</p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.TensorModel.fit\" title=\"dipy.workflows.reconst.TensorModel.fit\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">fit</span></code></a>(data[,&nbsp;mask])</td>\n<td>Fit method of the DTI model class</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.TensorModel.predict\" title=\"dipy.workflows.reconst.TensorModel.predict\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">predict</span></code></a>(dti_params[,&nbsp;S0])</td>\n<td>Predict a signal for this TensorModel class instance given parameters.</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.TensorModel.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>gtab</em>, <em>fit_method='WLS'</em>, <em>return_S0_hat=False</em>, <em>*args</em>, <em>**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.TensorModel.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A Diffusion Tensor Model <a class=\"reference internal\" href=\"#rcef4404f4d4d-1\" id=\"id58\">[1]</a>, <a class=\"reference internal\" href=\"#rcef4404f4d4d-2\" id=\"id59\">[2]</a>.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>gtab</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">GradientTable class instance</span></dt>\n<dd></dd>\n<dt><strong>fit_method</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">str or callable</span></dt>\n<dd><p class=\"first\">str can be one of the following:</p>\n<dl class=\"last docutils\">\n<dt>\u2018WLS\u2019 for weighted least squares</dt>\n<dd><p class=\"first last\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">dti.wls_fit_tensor()</span></code></p>\n</dd>\n<dt>\u2018LS\u2019 or \u2018OLS\u2019 for ordinary least squares</dt>\n<dd><p class=\"first last\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">dti.ols_fit_tensor()</span></code></p>\n</dd>\n<dt>\u2018NLLS\u2019 for non-linear least-squares</dt>\n<dd><p class=\"first last\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">dti.nlls_fit_tensor()</span></code></p>\n</dd>\n<dt>\u2018RT\u2019 or \u2018restore\u2019 or \u2018RESTORE\u2019 for RESTORE robust tensor</dt>\n<dd><p class=\"first last\">fitting <a class=\"reference internal\" href=\"#rcef4404f4d4d-3\" id=\"id60\">[3]</a>\n<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">dti.restore_fit_tensor()</span></code></p>\n</dd>\n<dt>callable has to have the signature:</dt>\n<dd><p class=\"first last\">fit_method(design_matrix, data, <a href=\"#id61\"><span class=\"problematic\" id=\"id62\">*</span></a>args, <a href=\"#id63\"><span class=\"problematic\" id=\"id64\">**</span></a>kwargs)</p>\n</dd>\n</dl>\n</dd>\n<dt><strong>return_S0_hat</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool</span></dt>\n<dd><p class=\"first last\">Boolean to return (True) or not (False) the S0 values for the fit.</p>\n</dd>\n<dt><strong>args, kwargs</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">arguments and key-word arguments passed to the</span></dt>\n<dd><p class=\"first last\">fit_method. See dti.wls_fit_tensor, dti.ols_fit_tensor for details</p>\n</dd>\n<dt><strong>min_signal</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float</span></dt>\n<dd><p class=\"first last\">The minimum signal value. Needs to be a strictly positive\nnumber. Default: minimal signal in the data provided to <cite>fit</cite>.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Notes</p>\n<p>In order to increase speed of processing, tensor fitting is done\nsimultaneously over many voxels. Many fit_methods use the \u2018step\u2019\nparameter to set the number of voxels that will be fit at once in each\niteration. This is the chunk size as a number of voxels. A larger step\nvalue should speed things up, but it will also take up more memory. It\nis advisable to keep an eye on memory consumption as this value is\nincreased.</p>\n<p>Example : In <code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">iter_fit_tensor()</span></code> we have a default step value of\n1e4</p>\n<p class=\"rubric\">References</p>\n<table class=\"docutils citation\" frame=\"void\" id=\"rcef4404f4d4d-1\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\">[1]</td><td><em>(<a class=\"fn-backref\" href=\"#id58\">1</a>, <a class=\"fn-backref\" href=\"#id65\">2</a>)</em> Basser, P.J., Mattiello, J., LeBihan, D., 1994. Estimation of\nthe effective self-diffusion tensor from the NMR spin echo. J Magn\nReson B 103, 247-254.</td></tr>\n</tbody>\n</table>\n<table class=\"docutils citation\" frame=\"void\" id=\"rcef4404f4d4d-2\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\">[2]</td><td><em>(<a class=\"fn-backref\" href=\"#id59\">1</a>, <a class=\"fn-backref\" href=\"#id66\">2</a>)</em> Basser, P., Pierpaoli, C., 1996. Microstructural and\nphysiological features of tissues elucidated by quantitative\ndiffusion-tensor MRI.  Journal of Magnetic Resonance 111, 209-219.</td></tr>\n</tbody>\n</table>\n<table class=\"docutils citation\" frame=\"void\" id=\"rcef4404f4d4d-3\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\">[3]</td><td><em>(<a class=\"fn-backref\" href=\"#id60\">1</a>, <a class=\"fn-backref\" href=\"#id67\">2</a>)</em> Lin-Ching C., Jones D.K., Pierpaoli, C. 2005. RESTORE: Robust\nestimation of tensors by outlier rejection. MRM 53: 1088-1095</td></tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.TensorModel.fit\">\n<code class=\"descname\">fit</code><span class=\"sig-paren\">(</span><em>data</em>, <em>mask=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.TensorModel.fit\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Fit method of the DTI model class</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>data</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array</span></dt>\n<dd><p class=\"first last\">The measured signal from one voxel.</p>\n</dd>\n<dt><strong>mask</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array</span></dt>\n<dd><p class=\"first last\">A boolean array used to mark the coordinates in the data that\nshould be analyzed that has the shape data.shape[:-1]</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.TensorModel.predict\">\n<code class=\"descname\">predict</code><span class=\"sig-paren\">(</span><em>dti_params</em>, <em>S0=1.0</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.TensorModel.predict\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Predict a signal for this TensorModel class instance given parameters.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>dti_params</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">ndarray</span></dt>\n<dd><p class=\"first last\">The last dimension should have 12 tensor parameters: 3\neigenvalues, followed by the 3 eigenvectors</p>\n</dd>\n<dt><strong>S0</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float or ndarray</span></dt>\n<dd><p class=\"first last\">The non diffusion-weighted signal in every voxel, or across all\nvoxels. Default: 1</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id68\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.reconst.Workflow\" title=\"dipy.workflows.reconst.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a><a class=\"headerlink\" href=\"#id68\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.reconst.Workflow\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.reconst.</code><code class=\"descname\">Workflow</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.Workflow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.7)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.Workflow.get_io_iterator\" title=\"dipy.workflows.reconst.Workflow.get_io_iterator\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code></a>()</td>\n<td>Create an iterator for IO.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.Workflow.get_short_name\" title=\"dipy.workflows.reconst.Workflow.get_short_name\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code></a>()</td>\n<td>Return A short name for the workflow used to subdivide.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.Workflow.get_sub_runs\" title=\"dipy.workflows.reconst.Workflow.get_sub_runs\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code></a>()</td>\n<td>Return No sub runs since this is a simple workflow.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.Workflow.manage_output_overwrite\" title=\"dipy.workflows.reconst.Workflow.manage_output_overwrite\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code></a>()</td>\n<td>Check if a file will be overwritten upon processing the inputs.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.Workflow.run\" title=\"dipy.workflows.reconst.Workflow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(*args,&nbsp;**kwargs)</td>\n<td>Execute the workflow.</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.Workflow.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.Workflow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.Workflow.get_io_iterator\">\n<code class=\"descname\">get_io_iterator</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.Workflow.get_io_iterator\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Create an iterator for IO.</p>\n<p>Use a couple of inspection tricks to build an IOIterator using the\nprevious frame (values of local variables and other contextuals) and\nthe run method\u2019s docstring.</p>\n</dd></dl>\n\n<dl class=\"classmethod\">\n<dt id=\"dipy.workflows.reconst.Workflow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.Workflow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return A short name for the workflow used to subdivide.</p>\n<p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name.</p>\n<p>For example, a combined workflow with dti reconstruction and csd\nreconstruction might en up with the b0_threshold parameter. Using short\nnames, we will have dti.b0_threshold and csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.Workflow.get_sub_runs\">\n<code class=\"descname\">get_sub_runs</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.Workflow.get_sub_runs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return No sub runs since this is a simple workflow.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.Workflow.manage_output_overwrite\">\n<code class=\"descname\">manage_output_overwrite</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.Workflow.manage_output_overwrite\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Check if a file will be overwritten upon processing the inputs.</p>\n<p>If it is bound to happen, an action is taken depending on\nself._force_overwrite (or \u2013force via command line). A log message is\noutput independently of the outcome to tell the user something\nhappened.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.Workflow.run\">\n<code class=\"descname\">run</code><span class=\"sig-paren\">(</span><em>*args</em>, <em>**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.Workflow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Execute the workflow.</p>\n<p>Since this is an abstract class, raise exception if this code is\nreached (not impletemented in child class or literally called on this\nclass)</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"auto-response\">\n<h3>auto_response<a class=\"headerlink\" href=\"#auto-response\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.reconst.auto_response\">\n<code class=\"descclassname\">dipy.workflows.reconst.</code><code class=\"descname\">auto_response</code><span class=\"sig-paren\">(</span><em>gtab</em>, <em>data</em>, <em>roi_center=None</em>, <em>roi_radius=10</em>, <em>fa_thr=0.7</em>, <em>fa_callable=&lt;function fa_superior&gt;</em>, <em>return_number_of_voxels=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.auto_response\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Automatic estimation of response function using FA.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>gtab</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">GradientTable</span></dt>\n<dd></dd>\n<dt><strong>data</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">ndarray</span></dt>\n<dd><p class=\"first last\">diffusion data</p>\n</dd>\n<dt><strong>roi_center</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">tuple, (3,)</span></dt>\n<dd><p class=\"first last\">Center of ROI in data. If center is None, it is assumed that it is\nthe center of the volume with shape <cite>data.shape[:3]</cite>.</p>\n</dd>\n<dt><strong>roi_radius</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int</span></dt>\n<dd><p class=\"first last\">radius of cubic ROI</p>\n</dd>\n<dt><strong>fa_thr</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float</span></dt>\n<dd><p class=\"first last\">FA threshold</p>\n</dd>\n<dt><strong>fa_callable</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">callable</span></dt>\n<dd><p class=\"first last\">A callable that defines an operation that compares FA with the fa_thr.\nThe operator should have two positional arguments\n(e.g., <cite>fa_operator(FA, fa_thr)</cite>) and it should return a bool array.</p>\n</dd>\n<dt><strong>return_number_of_voxels</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool</span></dt>\n<dd><p class=\"first last\">If True, returns the number of voxels used for estimating the response\nfunction.</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>response</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">tuple, (2,)</span></dt>\n<dd><p class=\"first last\">(<cite>evals</cite>, <cite>S0</cite>)</p>\n</dd>\n<dt><strong>ratio</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float</span></dt>\n<dd><p class=\"first last\">The ratio between smallest versus largest eigenvalue of the response.</p>\n</dd>\n<dt><strong>number of voxels</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int (optional)</span></dt>\n<dd><p class=\"first last\">The number of voxels used for estimating the response function.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Notes</p>\n<p>In CSD there is an important pre-processing step: the estimation of the\nfiber response function. In order to do this we look for voxels with very\nanisotropic configurations. For example we can use an ROI (20x20x20) at\nthe center of the volume and store the signal values for the voxels with\nFA values higher than 0.7. Of course, if we haven\u2019t precalculated FA we\nneed to fit a Tensor model to the datasets. Which is what we do in this\nfunction.</p>\n<p>For the response we also need to find the average S0 in the ROI. This is\npossible using <cite>gtab.b0s_mask()</cite> we can find all the S0 volumes (which\ncorrespond to b-values equal 0) in the dataset.</p>\n<p>The <cite>response</cite> consists always of a prolate tensor created by averaging\nthe highest and second highest eigenvalues in the ROI with FA higher than\nthreshold. We also include the average S0s.</p>\n<p>We also return the <cite>ratio</cite> which is used for the SDT models. If requested,\nthe number of voxels used for estimating the response function is also\nreturned, which can be used to judge the fidelity of the response function.\nAs a rule of thumb, at least 300 voxels should be used to estimate a good\nresponse function (see <a class=\"reference internal\" href=\"#r391093edbf61-1\" id=\"id69\">[1]</a>).</p>\n<p class=\"rubric\">References</p>\n<table class=\"docutils citation\" frame=\"void\" id=\"r391093edbf61-1\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\">[1]</td><td><em>(<a class=\"fn-backref\" href=\"#id69\">1</a>, <a class=\"fn-backref\" href=\"#id70\">2</a>)</em> Tournier, J.D., et al. NeuroImage 2004. Direct estimation of the</td></tr>\n</tbody>\n</table>\n<p>fiber orientation density function from diffusion-weighted MRI\ndata using spherical deconvolution</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"axial-diffusivity\">\n<h3>axial_diffusivity<a class=\"headerlink\" href=\"#axial-diffusivity\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.reconst.axial_diffusivity\">\n<code class=\"descclassname\">dipy.workflows.reconst.</code><code class=\"descname\">axial_diffusivity</code><span class=\"sig-paren\">(</span><em>evals</em>, <em>axis=-1</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.axial_diffusivity\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Axial Diffusivity (AD) of a diffusion tensor.\nAlso called parallel diffusivity.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>evals</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array-like</span></dt>\n<dd><p class=\"first last\">Eigenvalues of a diffusion tensor, must be sorted in descending order\nalong <cite>axis</cite>.</p>\n</dd>\n<dt><strong>axis</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int</span></dt>\n<dd><p class=\"first last\">Axis of <cite>evals</cite> which contains 3 eigenvalues.</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>ad</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array</span></dt>\n<dd><p class=\"first last\">Calculated AD.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Notes</p>\n<p>AD is calculated with the following equation:</p>\n<div class=\"math notranslate nohighlight\">\n\\[AD = \\lambda_1\\]</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"color-fa\">\n<h3>color_fa<a class=\"headerlink\" href=\"#color-fa\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.reconst.color_fa\">\n<code class=\"descclassname\">dipy.workflows.reconst.</code><code class=\"descname\">color_fa</code><span class=\"sig-paren\">(</span><em>fa</em>, <em>evecs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.color_fa\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Color fractional anisotropy of diffusion tensor</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>fa</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array-like</span></dt>\n<dd><blockquote class=\"first\">\n<div><p>Array of the fractional anisotropy (can be 1D, 2D or 3D)</p>\n</div></blockquote>\n<dl class=\"last docutils\">\n<dt>evecs <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array-like</span></dt>\n<dd><p class=\"first last\">eigen vectors from the tensor model</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>rgb</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">Array with 3 channels for each color as the last dimension.</span></dt>\n<dd><p class=\"first last\">Colormap of the FA with red for the x value, y for the green\nvalue and z for the blue value.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p>ec{e}))  imes fa</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"fractional-anisotropy\">\n<h3>fractional_anisotropy<a class=\"headerlink\" href=\"#fractional-anisotropy\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.reconst.fractional_anisotropy\">\n<code class=\"descclassname\">dipy.workflows.reconst.</code><code class=\"descname\">fractional_anisotropy</code><span class=\"sig-paren\">(</span><em>evals</em>, <em>axis=-1</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.fractional_anisotropy\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><blockquote>\n<div>Fractional anisotropy (FA) of a diffusion tensor.</div></blockquote>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>evals</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array-like</span></dt>\n<dd><blockquote class=\"first\">\n<div><p>Eigenvalues of a diffusion tensor.</p>\n</div></blockquote>\n<dl class=\"last docutils\">\n<dt>axis <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int</span></dt>\n<dd><p class=\"first last\">Axis of <cite>evals</cite> which contains 3 eigenvalues.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>fa</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array</span></dt>\n<dd><p class=\"first last\">Calculated FA. Range is 0 &lt;= FA &lt;= 1.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p>rac{1}{2}\nrac{(lambda_1-lambda_2)^2+(lambda_1-</p>\n<blockquote>\n<div>lambda_3)^2+(lambda_2-lambda_3)^2}{lambda_1^2+\nlambda_2^2+lambda_3^2}}</div></blockquote>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"geodesic-anisotropy\">\n<h3>geodesic_anisotropy<a class=\"headerlink\" href=\"#geodesic-anisotropy\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.reconst.geodesic_anisotropy\">\n<code class=\"descclassname\">dipy.workflows.reconst.</code><code class=\"descname\">geodesic_anisotropy</code><span class=\"sig-paren\">(</span><em>evals</em>, <em>axis=-1</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.geodesic_anisotropy\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><blockquote>\n<div>Geodesic anisotropy (GA) of a diffusion tensor.</div></blockquote>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>evals</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array-like</span></dt>\n<dd><blockquote class=\"first\">\n<div><p>Eigenvalues of a diffusion tensor.</p>\n</div></blockquote>\n<dl class=\"last docutils\">\n<dt>axis <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int</span></dt>\n<dd><p class=\"first last\">Axis of <cite>evals</cite> which contains 3 eigenvalues.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>ga</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array</span></dt>\n<dd><p class=\"first last\">Calculated GA. In the range 0 to +infinity</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"docutils\">\n<dt>ight )}},</dt>\n<dd><blockquote class=\"first\">\n<div>quad   extrm{where} quad &lt;mathbf{D}&gt; =\n(lambda_1lambda_2lambda_3)^{1/3}</div></blockquote>\n<p class=\"last\">Note that the notation, <span class=\"math notranslate nohighlight\">\\(&lt;D&gt;\\)</span>, is often used as the mean diffusivity (MD)\nof the diffusion tensor and can lead to confusions in the literature\n(see [Rd98067e65c14-1] versus [Rd98067e65c14-2] versus [Rd98067e65c14-3] for example). Reference [Rd98067e65c14-2] defines\ngeodesic anisotropy (GA) with <span class=\"math notranslate nohighlight\">\\(&lt;D&gt;\\)</span> as the MD in the denominator of the\nsum. This is wrong. The original paper [Rd98067e65c14-1] defines GA with\n<span class=\"math notranslate nohighlight\">\\(&lt;D&gt; = det(D)^{1/3}\\)</span>, as the isotropic part of the distance. This might be\nan explanation for the confusion. The isotropic part of the diffusion\ntensor in Euclidean space is the MD whereas the isotropic part of the\ntensor in log-Euclidean space is <span class=\"math notranslate nohighlight\">\\(det(D)^{1/3}\\)</span>. The Appendix of [Rd98067e65c14-1] and\nlog-Euclidean derivations from [Rd98067e65c14-3] are clear on this. Hence, all that to\nsay that <span class=\"math notranslate nohighlight\">\\(&lt;D&gt; = det(D)^{1/3}\\)</span> here for the GA definition and not MD.</p>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"get-mode\">\n<h3>get_mode<a class=\"headerlink\" href=\"#get-mode\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.reconst.get_mode\">\n<code class=\"descclassname\">dipy.workflows.reconst.</code><code class=\"descname\">get_mode</code><span class=\"sig-paren\">(</span><em>q_form</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.get_mode\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Mode (MO) of a diffusion tensor <a class=\"reference internal\" href=\"#r8502d494f176-1\" id=\"id78\">[1]</a>.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>q_form</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">ndarray</span></dt>\n<dd><p class=\"first last\">The quadratic form of a tensor, or an array with quadratic forms of\ntensors. Should be of shape (x, y, z, 3, 3) or (n, 3, 3) or (3, 3).</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>mode</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array</span></dt>\n<dd><p class=\"first last\">Calculated tensor mode in each spatial coordinate.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Notes</p>\n<p>Mode ranges between -1 (planar anisotropy) and +1 (linear anisotropy)\nwith 0 representing orthotropy. Mode is calculated with the\nfollowing equation (equation 9 in <a class=\"reference internal\" href=\"#r8502d494f176-1\" id=\"id79\">[1]</a>):</p>\n<div class=\"math notranslate nohighlight\">\n\\[Mode = 3*\\sqrt{6}*det(\\widetilde{A}/norm(\\widetilde{A}))\\]</div>\n<p>Where <span class=\"math notranslate nohighlight\">\\(\\widetilde{A}\\)</span> is the deviatoric part of the tensor quadratic form.</p>\n<p class=\"rubric\">References</p>\n<table class=\"docutils citation\" frame=\"void\" id=\"r8502d494f176-1\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\">[1]</td><td><em>(<a class=\"fn-backref\" href=\"#id5\">1</a>, <a class=\"fn-backref\" href=\"#id78\">2</a>, <a class=\"fn-backref\" href=\"#id79\">3</a>, <a class=\"fn-backref\" href=\"#id80\">4</a>)</em> Daniel B. Ennis and G. Kindlmann, \u201cOrthogonal Tensor\nInvariants and the Analysis of Diffusion Tensor Magnetic Resonance\nImages\u201d, Magnetic Resonance in Medicine, vol. 55, no. 1, pp. 136-146,\n2006.</td></tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"get-sphere\">\n<h3>get_sphere<a class=\"headerlink\" href=\"#get-sphere\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.reconst.get_sphere\">\n<code class=\"descclassname\">dipy.workflows.reconst.</code><code class=\"descname\">get_sphere</code><span class=\"sig-paren\">(</span><em>name='symmetric362'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.get_sphere\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>provide triangulated spheres</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>name</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">str</span></dt>\n<dd><p class=\"first last\">which sphere - one of:\n* \u2018symmetric362\u2019\n* \u2018symmetric642\u2019\n* \u2018symmetric724\u2019\n* \u2018repulsion724\u2019\n* \u2018repulsion100\u2019\n* \u2018repulsion200\u2019</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>sphere</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">a dipy.core.sphere.Sphere class instance</span></dt>\n<dd></dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">dipy.data</span> <span class=\"k\">import</span> <span class=\"n\">get_sphere</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sphere</span> <span class=\"o\">=</span> <span class=\"n\">get_sphere</span><span class=\"p\">(</span><span class=\"s1\">&#39;symmetric362&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">verts</span><span class=\"p\">,</span> <span class=\"n\">faces</span> <span class=\"o\">=</span> <span class=\"n\">sphere</span><span class=\"o\">.</span><span class=\"n\">vertices</span><span class=\"p\">,</span> <span class=\"n\">sphere</span><span class=\"o\">.</span><span class=\"n\">faces</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">verts</span><span class=\"o\">.</span><span class=\"n\">shape</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"mi\">362</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">faces</span><span class=\"o\">.</span><span class=\"n\">shape</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"mi\">720</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">verts</span><span class=\"p\">,</span> <span class=\"n\">faces</span> <span class=\"o\">=</span> <span class=\"n\">get_sphere</span><span class=\"p\">(</span><span class=\"s1\">&#39;not a sphere name&#39;</span><span class=\"p\">)</span> \n<span class=\"gt\">Traceback (most recent call last):</span>\n    <span class=\"o\">...</span>\n<span class=\"gr\">DataError</span>: <span class=\"n\">No sphere called &quot;not a sphere name&quot;</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"gradient-table\">\n<h3>gradient_table<a class=\"headerlink\" href=\"#gradient-table\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.reconst.gradient_table\">\n<code class=\"descclassname\">dipy.workflows.reconst.</code><code class=\"descname\">gradient_table</code><span class=\"sig-paren\">(</span><em>bvals</em>, <em>bvecs=None</em>, <em>big_delta=None</em>, <em>small_delta=None</em>, <em>b0_threshold=50</em>, <em>atol=0.01</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.gradient_table\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A general function for creating diffusion MR gradients.</p>\n<p>It reads, loads and prepares scanner parameters like the b-values and\nb-vectors so that they can be useful during the reconstruction process.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>bvals</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">can be any of the four options</span></dt>\n<dd><ol class=\"first last arabic simple\">\n<li>an array of shape (N,) or (1, N) or (N, 1) with the b-values.</li>\n<li>a path for the file which contains an array like the above (1).</li>\n<li>an array of shape (N, 4) or (4, N). Then this parameter is\nconsidered to be a b-table which contains both bvals and bvecs. In\nthis case the next parameter is skipped.</li>\n<li>a path for the file which contains an array like the one at (3).</li>\n</ol>\n</dd>\n<dt><strong>bvecs</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">can be any of two options</span></dt>\n<dd><ol class=\"first last arabic simple\">\n<li>an array of shape (N, 3) or (3, N) with the b-vectors.</li>\n<li>a path for the file which contains an array like the previous.</li>\n</ol>\n</dd>\n<dt><strong>big_delta</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float</span></dt>\n<dd><p class=\"first last\">acquisition pulse separation time in seconds (default None)</p>\n</dd>\n<dt><strong>small_delta</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float</span></dt>\n<dd><p class=\"first last\">acquisition pulse duration time in seconds (default None)</p>\n</dd>\n<dt><strong>b0_threshold</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float</span></dt>\n<dd><p class=\"first last\">All b-values with values less than or equal to <cite>bo_threshold</cite> are\nconsidered as b0s i.e. without diffusion weighting.</p>\n</dd>\n<dt><strong>atol</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float</span></dt>\n<dd><p class=\"first last\">All b-vectors need to be unit vectors up to a tolerance.</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>gradients</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">GradientTable</span></dt>\n<dd><p class=\"first last\">A GradientTable with all the gradient information.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Notes</p>\n<ol class=\"arabic simple\">\n<li>Often b0s (b-values which correspond to images without diffusion\nweighting) have 0 values however in some cases the scanner cannot\nprovide b0s of an exact 0 value and it gives a bit higher values\ne.g. 6 or 12. This is the purpose of the b0_threshold in the __init__.</li>\n<li>We assume that the minimum number of b-values is 7.</li>\n<li>B-vectors should be unit vectors.</li>\n</ol>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">dipy.core.gradients</span> <span class=\"k\">import</span> <span class=\"n\">gradient_table</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">bvals</span> <span class=\"o\">=</span> <span class=\"mi\">1500</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">bvals</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sq2</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">bvecs</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                  <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                  <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                  <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                  <span class=\"p\">[</span><span class=\"n\">sq2</span><span class=\"p\">,</span> <span class=\"n\">sq2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                  <span class=\"p\">[</span><span class=\"n\">sq2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">sq2</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                  <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">sq2</span><span class=\"p\">,</span> <span class=\"n\">sq2</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">gt</span> <span class=\"o\">=</span> <span class=\"n\">gradient_table</span><span class=\"p\">(</span><span class=\"n\">bvals</span><span class=\"p\">,</span> <span class=\"n\">bvecs</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">gt</span><span class=\"o\">.</span><span class=\"n\">bvecs</span><span class=\"o\">.</span><span class=\"n\">shape</span> <span class=\"o\">==</span> <span class=\"n\">bvecs</span><span class=\"o\">.</span><span class=\"n\">shape</span>\n<span class=\"go\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">gt</span> <span class=\"o\">=</span> <span class=\"n\">gradient_table</span><span class=\"p\">(</span><span class=\"n\">bvals</span><span class=\"p\">,</span> <span class=\"n\">bvecs</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">gt</span><span class=\"o\">.</span><span class=\"n\">bvecs</span><span class=\"o\">.</span><span class=\"n\">shape</span> <span class=\"o\">==</span> <span class=\"n\">bvecs</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"o\">.</span><span class=\"n\">shape</span>\n<span class=\"go\">False</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"literal-eval\">\n<h3>literal_eval<a class=\"headerlink\" href=\"#literal-eval\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.reconst.literal_eval\">\n<code class=\"descclassname\">dipy.workflows.reconst.</code><code class=\"descname\">literal_eval</code><span class=\"sig-paren\">(</span><em>node_or_string</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.literal_eval\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Safely evaluate an expression node or a string containing a Python\nexpression.  The string or node provided may only consist of the following\nPython literal structures: strings, bytes, numbers, tuples, lists, dicts,\nsets, booleans, and None.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id81\">\n<h3>load_nifti<a class=\"headerlink\" href=\"#id81\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.reconst.load_nifti\">\n<code class=\"descclassname\">dipy.workflows.reconst.</code><code class=\"descname\">load_nifti</code><span class=\"sig-paren\">(</span><em>fname</em>, <em>return_img=False</em>, <em>return_voxsize=False</em>, <em>return_coords=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.load_nifti\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</div>\n<div class=\"section\" id=\"lower-triangular\">\n<h3>lower_triangular<a class=\"headerlink\" href=\"#lower-triangular\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.reconst.lower_triangular\">\n<code class=\"descclassname\">dipy.workflows.reconst.</code><code class=\"descname\">lower_triangular</code><span class=\"sig-paren\">(</span><em>tensor</em>, <em>b0=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.lower_triangular\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns the six lower triangular values of the tensor and a dummy variable\nif b0 is not None</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>tensor</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array_like (\u2026, 3, 3)</span></dt>\n<dd><p class=\"first last\">a collection of 3, 3 diffusion tensors</p>\n</dd>\n<dt><strong>b0</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float</span></dt>\n<dd><p class=\"first last\">if b0 is not none log(b0) is returned as the dummy variable</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>D</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">ndarray</span></dt>\n<dd><p class=\"first last\">If b0 is none, then the shape will be (\u2026, 6) otherwise (\u2026, 7)</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"mean-diffusivity\">\n<h3>mean_diffusivity<a class=\"headerlink\" href=\"#mean-diffusivity\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.reconst.mean_diffusivity\">\n<code class=\"descclassname\">dipy.workflows.reconst.</code><code class=\"descname\">mean_diffusivity</code><span class=\"sig-paren\">(</span><em>evals</em>, <em>axis=-1</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.mean_diffusivity\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><blockquote>\n<div>Mean Diffusivity (MD) of a diffusion tensor.</div></blockquote>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>evals</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array-like</span></dt>\n<dd><blockquote class=\"first\">\n<div><p>Eigenvalues of a diffusion tensor.</p>\n</div></blockquote>\n<dl class=\"last docutils\">\n<dt>axis <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int</span></dt>\n<dd><p class=\"first last\">Axis of <cite>evals</cite> which contains 3 eigenvalues.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>md</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array</span></dt>\n<dd><p class=\"first last\">Calculated MD.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p>rac{lambda_1 + lambda_2 + lambda_3}{3}</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"peaks-from-model\">\n<h3>peaks_from_model<a class=\"headerlink\" href=\"#peaks-from-model\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.reconst.peaks_from_model\">\n<code class=\"descclassname\">dipy.workflows.reconst.</code><code class=\"descname\">peaks_from_model</code><span class=\"sig-paren\">(</span><em>model</em>, <em>data</em>, <em>sphere</em>, <em>relative_peak_threshold</em>, <em>min_separation_angle</em>, <em>mask=None</em>, <em>return_odf=False</em>, <em>return_sh=True</em>, <em>gfa_thr=0</em>, <em>normalize_peaks=False</em>, <em>sh_order=8</em>, <em>sh_basis_type=None</em>, <em>npeaks=5</em>, <em>B=None</em>, <em>invB=None</em>, <em>parallel=False</em>, <em>nbr_processes=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.peaks_from_model\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Fit the model to data and computes peaks and metrics</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>model</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">a model instance</span></dt>\n<dd><p class=\"first last\"><cite>model</cite> will be used to fit the data.</p>\n</dd>\n<dt><strong>sphere</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">Sphere</span></dt>\n<dd><p class=\"first last\">The Sphere providing discrete directions for evaluation.</p>\n</dd>\n<dt><strong>relative_peak_threshold</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float</span></dt>\n<dd><p class=\"first last\">Only return peaks greater than <code class=\"docutils literal notranslate\"><span class=\"pre\">relative_peak_threshold</span> <span class=\"pre\">*</span> <span class=\"pre\">m</span></code> where m\nis the largest peak.</p>\n</dd>\n<dt><strong>min_separation_angle</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float in [0, 90] The minimum distance between</span></dt>\n<dd><p class=\"first last\">directions. If two peaks are too close only the larger of the two is\nreturned.</p>\n</dd>\n<dt><strong>mask</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, optional</span></dt>\n<dd><p class=\"first last\">If <cite>mask</cite> is provided, voxels that are False in <cite>mask</cite> are skipped and\nno peaks are returned.</p>\n</dd>\n<dt><strong>return_odf</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool</span></dt>\n<dd><p class=\"first last\">If True, the odfs are returned.</p>\n</dd>\n<dt><strong>return_sh</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool</span></dt>\n<dd><p class=\"first last\">If True, the odf as spherical harmonics coefficients is returned</p>\n</dd>\n<dt><strong>gfa_thr</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float</span></dt>\n<dd><p class=\"first last\">Voxels with gfa less than <cite>gfa_thr</cite> are skipped, no peaks are returned.</p>\n</dd>\n<dt><strong>normalize_peaks</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool</span></dt>\n<dd><p class=\"first last\">If true, all peak values are calculated relative to <cite>max(odf)</cite>.</p>\n</dd>\n<dt><strong>sh_order</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int, optional</span></dt>\n<dd><p class=\"first last\">Maximum SH order in the SH fit.  For <cite>sh_order</cite>, there will be\n<code class=\"docutils literal notranslate\"><span class=\"pre\">(sh_order</span> <span class=\"pre\">+</span> <span class=\"pre\">1)</span> <span class=\"pre\">*</span> <span class=\"pre\">(sh_order</span> <span class=\"pre\">+</span> <span class=\"pre\">2)</span> <span class=\"pre\">/</span> <span class=\"pre\">2</span></code> SH coefficients (default 8).</p>\n</dd>\n<dt><strong>sh_basis_type</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">{None, \u2018tournier07\u2019, \u2018descoteaux07\u2019}</span></dt>\n<dd><p class=\"first last\"><code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> for the default DIPY basis,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">tournier07</span></code> for the Tournier 2007 <a class=\"reference internal\" href=\"#r238c65f161c0-2\" id=\"id82\">[2]</a> basis, and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">descoteaux07</span></code> for the Descoteaux 2007 <a class=\"reference internal\" href=\"#r238c65f161c0-1\" id=\"id83\">[1]</a> basis\n(<code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> defaults to <code class=\"docutils literal notranslate\"><span class=\"pre\">descoteaux07</span></code>).</p>\n</dd>\n<dt><strong>sh_smooth</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float, optional</span></dt>\n<dd><p class=\"first last\">Lambda-regularization in the SH fit (default 0.0).</p>\n</dd>\n<dt><strong>npeaks</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int</span></dt>\n<dd><p class=\"first last\">Maximum number of peaks found (default 5 peaks).</p>\n</dd>\n<dt><strong>B</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">ndarray, optional</span></dt>\n<dd><p class=\"first last\">Matrix that transforms spherical harmonics to spherical function\n<code class=\"docutils literal notranslate\"><span class=\"pre\">sf</span> <span class=\"pre\">=</span> <span class=\"pre\">np.dot(sh,</span> <span class=\"pre\">B)</span></code>.</p>\n</dd>\n<dt><strong>invB</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">ndarray, optional</span></dt>\n<dd><p class=\"first last\">Inverse of B.</p>\n</dd>\n<dt><strong>parallel: bool</strong></dt>\n<dd><p class=\"first last\">If True, use multiprocessing to compute peaks and metric\n(default False). Temporary files are saved in the default temporary\ndirectory of the system. It can be changed using <code class=\"docutils literal notranslate\"><span class=\"pre\">import</span> <span class=\"pre\">tempfile</span></code>\nand <code class=\"docutils literal notranslate\"><span class=\"pre\">tempfile.tempdir</span> <span class=\"pre\">=</span> <span class=\"pre\">'/path/to/tempdir'</span></code>.</p>\n</dd>\n<dt><strong>nbr_processes: int</strong></dt>\n<dd><p class=\"first last\">If <cite>parallel</cite> is True, the number of subprocesses to use\n(default multiprocessing.cpu_count()).</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>pam</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">PeaksAndMetrics</span></dt>\n<dd><p class=\"first last\">An object with <code class=\"docutils literal notranslate\"><span class=\"pre\">gfa</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">peak_directions</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">peak_values</span></code>,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">peak_indices</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">odf</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">shm_coeffs</span></code> as attributes</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">References</p>\n<table class=\"docutils citation\" frame=\"void\" id=\"r238c65f161c0-1\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\">[1]</td><td><em>(<a class=\"fn-backref\" href=\"#id83\">1</a>, <a class=\"fn-backref\" href=\"#id84\">2</a>)</em> Descoteaux, M., Angelino, E., Fitzgibbons, S. and Deriche, R.\nRegularized, Fast, and Robust Analytical Q-ball Imaging.\nMagn. Reson. Med. 2007;58:497-510.</td></tr>\n</tbody>\n</table>\n<table class=\"docutils citation\" frame=\"void\" id=\"r238c65f161c0-2\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\">[2]</td><td><em>(<a class=\"fn-backref\" href=\"#id82\">1</a>, <a class=\"fn-backref\" href=\"#id85\">2</a>)</em> Tournier J.D., Calamante F. and Connelly A. Robust determination\nof the fibre orientation distribution in diffusion MRI:\nNon-negativity constrained super-resolved spherical deconvolution.\nNeuroImage. 2007;35(4):1459-1472.</td></tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"peaks-to-niftis\">\n<h3>peaks_to_niftis<a class=\"headerlink\" href=\"#peaks-to-niftis\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.reconst.peaks_to_niftis\">\n<code class=\"descclassname\">dipy.workflows.reconst.</code><code class=\"descname\">peaks_to_niftis</code><span class=\"sig-paren\">(</span><em>pam</em>, <em>fname_shm</em>, <em>fname_dirs</em>, <em>fname_values</em>, <em>fname_indices</em>, <em>fname_gfa</em>, <em>reshape_dirs=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.peaks_to_niftis\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Save SH, directions, indices and values of peaks to Nifti.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"radial-diffusivity\">\n<h3>radial_diffusivity<a class=\"headerlink\" href=\"#radial-diffusivity\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.reconst.radial_diffusivity\">\n<code class=\"descclassname\">dipy.workflows.reconst.</code><code class=\"descname\">radial_diffusivity</code><span class=\"sig-paren\">(</span><em>evals</em>, <em>axis=-1</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.radial_diffusivity\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><blockquote>\n<div>Radial Diffusivity (RD) of a diffusion tensor.\nAlso called perpendicular diffusivity.</div></blockquote>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>evals</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array-like</span></dt>\n<dd><blockquote class=\"first\">\n<div><p>Eigenvalues of a diffusion tensor, must be sorted in descending order\nalong <cite>axis</cite>.</p>\n</div></blockquote>\n<dl class=\"last docutils\">\n<dt>axis <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int</span></dt>\n<dd><p class=\"first last\">Axis of <cite>evals</cite> which contains 3 eigenvalues.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>rd</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array</span></dt>\n<dd><p class=\"first last\">Calculated RD.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p>rac{lambda_2 + lambda_3}{2}</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"read-bvals-bvecs\">\n<h3>read_bvals_bvecs<a class=\"headerlink\" href=\"#read-bvals-bvecs\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.reconst.read_bvals_bvecs\">\n<code class=\"descclassname\">dipy.workflows.reconst.</code><code class=\"descname\">read_bvals_bvecs</code><span class=\"sig-paren\">(</span><em>fbvals</em>, <em>fbvecs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.read_bvals_bvecs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Read b-values and b-vectors from disk</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>fbvals</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">str</span></dt>\n<dd><p class=\"first last\">Full path to file with b-values. None to not read bvals.</p>\n</dd>\n<dt><strong>fbvecs</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">str</span></dt>\n<dd><p class=\"first last\">Full path of file with b-vectors. None to not read bvecs.</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>bvals</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, (N,) or None</span></dt>\n<dd></dd>\n<dt><strong>bvecs</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, (N, 3) or None</span></dt>\n<dd></dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Notes</p>\n<p>Files can be either \u2018.bvals\u2019/\u2019.bvecs\u2019 or \u2018.txt\u2019 or \u2018.npy\u2019 (containing\narrays stored with the appropriate values).</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id86\">\n<h3>save_nifti<a class=\"headerlink\" href=\"#id86\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.reconst.save_nifti\">\n<code class=\"descclassname\">dipy.workflows.reconst.</code><code class=\"descname\">save_nifti</code><span class=\"sig-paren\">(</span><em>fname</em>, <em>data</em>, <em>affine</em>, <em>hdr=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.save_nifti\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</div>\n<div class=\"section\" id=\"save-peaks\">\n<h3>save_peaks<a class=\"headerlink\" href=\"#save-peaks\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.reconst.save_peaks\">\n<code class=\"descclassname\">dipy.workflows.reconst.</code><code class=\"descname\">save_peaks</code><span class=\"sig-paren\">(</span><em>fname</em>, <em>pam</em>, <em>affine=None</em>, <em>verbose=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.save_peaks\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Save all important attributes of object PeaksAndMetrics in a PAM5 file\n(HDF5).</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>fname</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">Filename of PAM5 file</p>\n</dd>\n<dt><strong>pam</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">PeaksAndMetrics</span></dt>\n<dd><p class=\"first last\">Object holding peak_dirs, shm_coeffs and other attributes</p>\n</dd>\n<dt><strong>affine</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array</span></dt>\n<dd><p class=\"first last\">The 4x4 matrix transforming the date from native to world coordinates.\nPeaksAndMetrics should have that attribute but if not it can be\nprovided here. Default None.</p>\n</dd>\n<dt><strong>verbose</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool</span></dt>\n<dd><p class=\"first last\">Print summary information about the saved file.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"split-dki-param\">\n<h3>split_dki_param<a class=\"headerlink\" href=\"#split-dki-param\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.reconst.split_dki_param\">\n<code class=\"descclassname\">dipy.workflows.reconst.</code><code class=\"descname\">split_dki_param</code><span class=\"sig-paren\">(</span><em>dki_params</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.split_dki_param\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Extract the diffusion tensor eigenvalues, the diffusion tensor\neigenvector matrix, and the 15 independent elements of the kurtosis tensor\nfrom the model parameters estimated from the DKI model</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>dki_params</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">ndarray (x, y, z, 27) or (n, 27)</span></dt>\n<dd><p class=\"first\">All parameters estimated from the diffusion kurtosis model.\nParameters are ordered as follows:</p>\n<blockquote class=\"last\">\n<div><ol class=\"arabic simple\">\n<li>Three diffusion tensor\u2019s eigenvalues</li>\n<li>Three lines of the eigenvector matrix each containing the first,\nsecond and third coordinates of the eigenvector</li>\n<li>Fifteen elements of the kurtosis tensor</li>\n</ol>\n</div></blockquote>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>eigvals</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array (x, y, z, 3) or (n, 3)</span></dt>\n<dd><p class=\"first last\">Eigenvalues from eigen decomposition of the tensor.</p>\n</dd>\n<dt><strong>eigvecs</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array (x, y, z, 3, 3) or (n, 3, 3)</span></dt>\n<dd><p class=\"first last\">Associated eigenvectors from eigen decomposition of the tensor.\nEigenvectors are columnar (e.g. eigvecs[:,j] is associated with\neigvals[j])</p>\n</dd>\n<dt><strong>kt</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array (x, y, z, 15) or (n, 15)</span></dt>\n<dd><p class=\"first last\">Fifteen elements of the kurtosis tensor</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id87\">\n<h3>warn<a class=\"headerlink\" href=\"#id87\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.reconst.warn\">\n<code class=\"descclassname\">dipy.workflows.reconst.</code><code class=\"descname\">warn</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.warn\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Issue a warning, or maybe ignore it or raise an exception.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"labelsbundlesflow\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.segment.LabelsBundlesFlow\" title=\"dipy.workflows.segment.LabelsBundlesFlow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">LabelsBundlesFlow</span></code></a><a class=\"headerlink\" href=\"#labelsbundlesflow\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.segment.LabelsBundlesFlow\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.segment.</code><code class=\"descname\">LabelsBundlesFlow</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.LabelsBundlesFlow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow\" title=\"dipy.workflows.workflow.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.workflows.workflow.Workflow</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code>()</td>\n<td>Create an iterator for IO.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.segment.LabelsBundlesFlow.get_short_name\" title=\"dipy.workflows.segment.LabelsBundlesFlow.get_short_name\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code></a>()</td>\n<td>Return A short name for the workflow used to subdivide.</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code>()</td>\n<td>Return No sub runs since this is a simple workflow.</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code>()</td>\n<td>Check if a file will be overwritten upon processing the inputs.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.segment.LabelsBundlesFlow.run\" title=\"dipy.workflows.segment.LabelsBundlesFlow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(streamline_files,&nbsp;labels_files[,&nbsp;\u2026])</td>\n<td>Extract bundles using existing indices (labels)</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.segment.LabelsBundlesFlow.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.LabelsBundlesFlow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"classmethod\">\n<dt id=\"dipy.workflows.segment.LabelsBundlesFlow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.LabelsBundlesFlow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return A short name for the workflow used to subdivide.</p>\n<p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name.</p>\n<p>For example, a combined workflow with dti reconstruction and csd\nreconstruction might en up with the b0_threshold parameter. Using short\nnames, we will have dti.b0_threshold and csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.segment.LabelsBundlesFlow.run\">\n<code class=\"descname\">run</code><span class=\"sig-paren\">(</span><em>streamline_files</em>, <em>labels_files</em>, <em>out_dir=''</em>, <em>out_bundle='recognized_orig.trk'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.LabelsBundlesFlow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Extract bundles using existing indices (labels)</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>streamline_files</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">The path of streamline files where you want to recognize bundles</p>\n</dd>\n<dt><strong>labels_files</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">The path of model bundle files</p>\n</dd>\n<dt><strong>out_dir</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Output directory (default input file directory)</p>\n</dd>\n<dt><strong>out_bundle</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Recognized bundle in the space of the model bundle\n(default \u2018recognized_orig.trk\u2019)</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">References</p>\n<table class=\"docutils citation\" frame=\"void\" id=\"r1bded19041bc-garyfallidis17\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\"><a class=\"fn-backref\" href=\"#id88\">[Garyfallidis17]</a></td><td>Garyfallidis et al. Recognition of white matter\nbundles using local and global streamline-based registration and\nclustering, Neuroimage, 2017.</td></tr>\n</tbody>\n</table>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"medianotsuflow\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.segment.MedianOtsuFlow\" title=\"dipy.workflows.segment.MedianOtsuFlow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">MedianOtsuFlow</span></code></a><a class=\"headerlink\" href=\"#medianotsuflow\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.segment.MedianOtsuFlow\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.segment.</code><code class=\"descname\">MedianOtsuFlow</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.MedianOtsuFlow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow\" title=\"dipy.workflows.workflow.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.workflows.workflow.Workflow</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code>()</td>\n<td>Create an iterator for IO.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.segment.MedianOtsuFlow.get_short_name\" title=\"dipy.workflows.segment.MedianOtsuFlow.get_short_name\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code></a>()</td>\n<td>Return A short name for the workflow used to subdivide.</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code>()</td>\n<td>Return No sub runs since this is a simple workflow.</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code>()</td>\n<td>Check if a file will be overwritten upon processing the inputs.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.segment.MedianOtsuFlow.run\" title=\"dipy.workflows.segment.MedianOtsuFlow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(input_files[,&nbsp;save_masked,&nbsp;\u2026])</td>\n<td>Workflow wrapping the median_otsu segmentation method.</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.segment.MedianOtsuFlow.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.MedianOtsuFlow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"classmethod\">\n<dt id=\"dipy.workflows.segment.MedianOtsuFlow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.MedianOtsuFlow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return A short name for the workflow used to subdivide.</p>\n<p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name.</p>\n<p>For example, a combined workflow with dti reconstruction and csd\nreconstruction might en up with the b0_threshold parameter. Using short\nnames, we will have dti.b0_threshold and csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.segment.MedianOtsuFlow.run\">\n<code class=\"descname\">run</code><span class=\"sig-paren\">(</span><em>input_files</em>, <em>save_masked=False</em>, <em>median_radius=2</em>, <em>numpass=5</em>, <em>autocrop=False</em>, <em>vol_idx=None</em>, <em>dilate=None</em>, <em>out_dir=''</em>, <em>out_mask='brain_mask.nii.gz'</em>, <em>out_masked='dwi_masked.nii.gz'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.MedianOtsuFlow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Workflow wrapping the median_otsu segmentation method.</p>\n<p>Applies median_otsu segmentation on each file found by \u2018globing\u2019\n<code class=\"docutils literal notranslate\"><span class=\"pre\">input_files</span></code> and saves the results in a directory specified by\n<code class=\"docutils literal notranslate\"><span class=\"pre\">out_dir</span></code>.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>input_files</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">Path to the input volumes. This path may contain wildcards to\nprocess multiple inputs at once.</p>\n</dd>\n<dt><strong>save_masked</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool, optional</span></dt>\n<dd><p class=\"first last\">Save mask</p>\n</dd>\n<dt><strong>median_radius</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int, optional</span></dt>\n<dd><p class=\"first last\">Radius (in voxels) of the applied median filter (default 2)</p>\n</dd>\n<dt><strong>numpass</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int, optional</span></dt>\n<dd><p class=\"first last\">Number of pass of the median filter (default 5)</p>\n</dd>\n<dt><strong>autocrop</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool, optional</span></dt>\n<dd><p class=\"first last\">If True, the masked input_volumes will also be cropped using the\nbounding box defined by the masked data. For example, if diffusion\nimages are of 1x1x1 (mm^3) or higher resolution auto-cropping could\nreduce their size in memory and speed up some of the analysis.\n(default False)</p>\n</dd>\n<dt><strong>vol_idx</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">variable int, optional</span></dt>\n<dd><p class=\"first last\">1D array representing indices of <code class=\"docutils literal notranslate\"><span class=\"pre\">axis=3</span></code> of a 4D <cite>input_volume</cite>\n\u2018None\u2019 (the default) corresponds to <code class=\"docutils literal notranslate\"><span class=\"pre\">(0,)</span></code> (assumes first volume\nin 4D array). From cmd line use 3 4 5 6. From script use\n[3, 4, 5, 6].</p>\n</dd>\n<dt><strong>dilate</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int, optional</span></dt>\n<dd><p class=\"first last\">number of iterations for binary dilation (default \u2018None\u2019)</p>\n</dd>\n<dt><strong>out_dir</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Output directory (default input file directory)</p>\n</dd>\n<dt><strong>out_mask</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the mask volume to be saved (default \u2018brain_mask.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_masked</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the masked volume to be saved (default \u2018dwi_masked.nii.gz\u2019)</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"recobundles\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.segment.RecoBundles\" title=\"dipy.workflows.segment.RecoBundles\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">RecoBundles</span></code></a><a class=\"headerlink\" href=\"#recobundles\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.segment.RecoBundles\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.segment.</code><code class=\"descname\">RecoBundles</code><span class=\"sig-paren\">(</span><em>streamlines</em>, <em>greater_than=50</em>, <em>less_than=1000000</em>, <em>cluster_map=None</em>, <em>clust_thr=15</em>, <em>nb_pts=20</em>, <em>rng=None</em>, <em>verbose=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.RecoBundles\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.7)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.segment.RecoBundles.evaluate_results\" title=\"dipy.workflows.segment.RecoBundles.evaluate_results\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">evaluate_results</span></code></a>(model_bundle,&nbsp;\u2026)</td>\n<td>Comapare the similiarity between two given bundles, model bundle, and extracted bundle.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.segment.RecoBundles.recognize\" title=\"dipy.workflows.segment.RecoBundles.recognize\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">recognize</span></code></a>(model_bundle,&nbsp;model_clust_thr[,&nbsp;\u2026])</td>\n<td>Recognize the model_bundle in self.streamlines</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.segment.RecoBundles.refine\" title=\"dipy.workflows.segment.RecoBundles.refine\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">refine</span></code></a>(model_bundle,&nbsp;pruned_streamlines,&nbsp;\u2026)</td>\n<td>Refine and recognize the model_bundle in self.streamlines This method expects once pruned streamlines as input.</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.segment.RecoBundles.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>streamlines</em>, <em>greater_than=50</em>, <em>less_than=1000000</em>, <em>cluster_map=None</em>, <em>clust_thr=15</em>, <em>nb_pts=20</em>, <em>rng=None</em>, <em>verbose=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.RecoBundles.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Recognition of bundles</p>\n<p>Extract bundles from a participants\u2019 tractograms using model bundles\nsegmented from a different subject or an atlas of bundles.\nSee <a class=\"reference internal\" href=\"#ra1143d88a4bf-garyfallidis17\" id=\"id89\">[Garyfallidis17]</a> for the details.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>streamlines</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">Streamlines</span></dt>\n<dd><p class=\"first last\">The tractogram in which you want to recognize bundles.</p>\n</dd>\n<dt><strong>greater_than</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int, optional</span></dt>\n<dd><p class=\"first last\">Keep streamlines that have length greater than\nthis value (default 50)</p>\n</dd>\n<dt><strong>less_than</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int, optional</span></dt>\n<dd><p class=\"first last\">Keep streamlines have length less than this value (default 1000000)</p>\n</dd>\n<dt><strong>cluster_map</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">QB map</span></dt>\n<dd><p class=\"first last\">Provide existing clustering to start RB faster (default None).</p>\n</dd>\n<dt><strong>clust_thr</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float</span></dt>\n<dd><p class=\"first last\">Distance threshold in mm for clustering <cite>streamlines</cite></p>\n</dd>\n<dt><strong>rng</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">RandomState</span></dt>\n<dd><p class=\"first last\">If None define RandomState in initialization function.</p>\n</dd>\n<dt><strong>nb_pts</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int</span></dt>\n<dd><p class=\"first last\">Number of points per streamline (default 20)</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Notes</p>\n<p>Make sure that before creating this class that the streamlines and\nthe model bundles are roughly in the same space.\nAlso default thresholds are assumed in RAS 1mm^3 space. You may\nwant to adjust those if your streamlines are not in world coordinates.</p>\n<p class=\"rubric\">References</p>\n<table class=\"docutils citation\" frame=\"void\" id=\"ra1143d88a4bf-garyfallidis17\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\">[Garyfallidis17]</td><td><em>(<a class=\"fn-backref\" href=\"#id89\">1</a>, <a class=\"fn-backref\" href=\"#id90\">2</a>)</em> Garyfallidis et al. Recognition of white matter\nbundles using local and global streamline-based registration and\nclustering, Neuroimage, 2017.</td></tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.segment.RecoBundles.evaluate_results\">\n<code class=\"descname\">evaluate_results</code><span class=\"sig-paren\">(</span><em>model_bundle</em>, <em>pruned_streamlines</em>, <em>slr_select</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.RecoBundles.evaluate_results\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Comapare the similiarity between two given bundles, model bundle,\nand extracted bundle.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>model_bundle</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">Streamlines</span></dt>\n<dd></dd>\n<dt><strong>pruned_streamlines</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">Streamlines</span></dt>\n<dd></dd>\n<dt><strong>slr_select</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">tuple</span></dt>\n<dd><p class=\"first last\">Select the number of streamlines from model to neirborhood of\nmodel to perform the local SLR.</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>ba_value</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float</span></dt>\n<dd><p class=\"first last\">bundle analytics value between model bundle and pruned bundle</p>\n</dd>\n<dt><strong>bmd_value</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float</span></dt>\n<dd><p class=\"first last\">bundle minimum distance value between model bundle and\npruned bundle</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.segment.RecoBundles.recognize\">\n<code class=\"descname\">recognize</code><span class=\"sig-paren\">(</span><em>model_bundle</em>, <em>model_clust_thr</em>, <em>reduction_thr=10</em>, <em>reduction_distance='mdf'</em>, <em>slr=True</em>, <em>slr_metric=None</em>, <em>slr_x0=None</em>, <em>slr_bounds=None</em>, <em>slr_select=(400</em>, <em>600)</em>, <em>slr_method='L-BFGS-B'</em>, <em>pruning_thr=5</em>, <em>pruning_distance='mdf'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.RecoBundles.recognize\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Recognize the model_bundle in self.streamlines</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>model_bundle</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">Streamlines</span></dt>\n<dd></dd>\n<dt><strong>model_clust_thr</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float</span></dt>\n<dd></dd>\n<dt><strong>reduction_thr</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float</span></dt>\n<dd></dd>\n<dt><strong>reduction_distance</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">mdf or mam (default mam)</p>\n</dd>\n<dt><strong>slr</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool</span></dt>\n<dd><p class=\"first last\">Use Streamline-based Linear Registration (SLR) locally\n(default True)</p>\n</dd>\n<dt><strong>slr_metric</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">BundleMinDistanceMetric</span></dt>\n<dd></dd>\n<dt><strong>slr_x0</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array</span></dt>\n<dd><p class=\"first last\">(default None)</p>\n</dd>\n<dt><strong>slr_bounds</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array</span></dt>\n<dd><p class=\"first last\">(default None)</p>\n</dd>\n<dt><strong>slr_select</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">tuple</span></dt>\n<dd><p class=\"first last\">Select the number of streamlines from model to neirborhood of\nmodel to perform the local SLR.</p>\n</dd>\n<dt><strong>slr_method</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">Optimization method (default \u2018L-BFGS-B\u2019)</p>\n</dd>\n<dt><strong>pruning_thr</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float</span></dt>\n<dd></dd>\n<dt><strong>pruning_distance</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">MDF (\u2018mdf\u2019) and MAM (\u2018mam\u2019)</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>recognized_transf</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">Streamlines</span></dt>\n<dd><p class=\"first last\">Recognized bundle in the space of the model tractogram</p>\n</dd>\n<dt><strong>recognized_labels</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array</span></dt>\n<dd><p class=\"first last\">Indices of recognized bundle in the original tractogram</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">References</p>\n<table class=\"docutils citation\" frame=\"void\" id=\"r925a62eea99f-garyfallidis17\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\"><a class=\"fn-backref\" href=\"#id91\">[Garyfallidis17]</a></td><td>Garyfallidis et al. Recognition of white matter\nbundles using local and global streamline-based registration and\nclustering, Neuroimage, 2017.</td></tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.segment.RecoBundles.refine\">\n<code class=\"descname\">refine</code><span class=\"sig-paren\">(</span><em>model_bundle</em>, <em>pruned_streamlines</em>, <em>model_clust_thr</em>, <em>reduction_thr=14</em>, <em>reduction_distance='mdf'</em>, <em>slr=True</em>, <em>slr_metric=None</em>, <em>slr_x0=None</em>, <em>slr_bounds=None</em>, <em>slr_select=(400</em>, <em>600)</em>, <em>slr_method='L-BFGS-B'</em>, <em>pruning_thr=6</em>, <em>pruning_distance='mdf'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.RecoBundles.refine\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Refine and recognize the model_bundle in self.streamlines\nThis method expects once pruned streamlines as input. It refines the\nfirst ouput of recobundle by applying second local slr (optional),\nand second pruning. This method is useful when we are dealing with\nnoisy data or when we want to extract small tracks from tractograms.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>model_bundle</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">Streamlines</span></dt>\n<dd></dd>\n<dt><strong>pruned_streamlines</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">Streamlines</span></dt>\n<dd></dd>\n<dt><strong>model_clust_thr</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float</span></dt>\n<dd></dd>\n<dt><strong>reduction_thr</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float</span></dt>\n<dd></dd>\n<dt><strong>reduction_distance</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">mdf or mam (default mam)</p>\n</dd>\n<dt><strong>slr</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool</span></dt>\n<dd><p class=\"first last\">Use Streamline-based Linear Registration (SLR) locally\n(default True)</p>\n</dd>\n<dt><strong>slr_metric</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">BundleMinDistanceMetric</span></dt>\n<dd></dd>\n<dt><strong>slr_x0</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array</span></dt>\n<dd><p class=\"first last\">(default None)</p>\n</dd>\n<dt><strong>slr_bounds</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array</span></dt>\n<dd><p class=\"first last\">(default None)</p>\n</dd>\n<dt><strong>slr_select</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">tuple</span></dt>\n<dd><p class=\"first last\">Select the number of streamlines from model to neirborhood of\nmodel to perform the local SLR.</p>\n</dd>\n<dt><strong>slr_method</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">Optimization method (default \u2018L-BFGS-B\u2019)</p>\n</dd>\n<dt><strong>pruning_thr</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float</span></dt>\n<dd></dd>\n<dt><strong>pruning_distance</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">MDF (\u2018mdf\u2019) and MAM (\u2018mam\u2019)</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>recognized_transf</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">Streamlines</span></dt>\n<dd><p class=\"first last\">Recognized bundle in the space of the model tractogram</p>\n</dd>\n<dt><strong>recognized_labels</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array</span></dt>\n<dd><p class=\"first last\">Indices of recognized bundle in the original tractogram</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">References</p>\n<table class=\"docutils citation\" frame=\"void\" id=\"r2ea201a40830-garyfallidis17\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\"><a class=\"fn-backref\" href=\"#id92\">[Garyfallidis17]</a></td><td>Garyfallidis et al. Recognition of white matter\nbundles using local and global streamline-based registration and\nclustering, Neuroimage, 2017.</td></tr>\n</tbody>\n</table>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"recobundlesflow\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.segment.RecoBundlesFlow\" title=\"dipy.workflows.segment.RecoBundlesFlow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">RecoBundlesFlow</span></code></a><a class=\"headerlink\" href=\"#recobundlesflow\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.segment.RecoBundlesFlow\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.segment.</code><code class=\"descname\">RecoBundlesFlow</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.RecoBundlesFlow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow\" title=\"dipy.workflows.workflow.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.workflows.workflow.Workflow</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code>()</td>\n<td>Create an iterator for IO.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.segment.RecoBundlesFlow.get_short_name\" title=\"dipy.workflows.segment.RecoBundlesFlow.get_short_name\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code></a>()</td>\n<td>Return A short name for the workflow used to subdivide.</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code>()</td>\n<td>Return No sub runs since this is a simple workflow.</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code>()</td>\n<td>Check if a file will be overwritten upon processing the inputs.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.segment.RecoBundlesFlow.run\" title=\"dipy.workflows.segment.RecoBundlesFlow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(streamline_files,&nbsp;model_bundle_files[,&nbsp;\u2026])</td>\n<td>Recognize bundles</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.segment.RecoBundlesFlow.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.RecoBundlesFlow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"classmethod\">\n<dt id=\"dipy.workflows.segment.RecoBundlesFlow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.RecoBundlesFlow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return A short name for the workflow used to subdivide.</p>\n<p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name.</p>\n<p>For example, a combined workflow with dti reconstruction and csd\nreconstruction might en up with the b0_threshold parameter. Using short\nnames, we will have dti.b0_threshold and csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.segment.RecoBundlesFlow.run\">\n<code class=\"descname\">run</code><span class=\"sig-paren\">(</span><em>streamline_files</em>, <em>model_bundle_files</em>, <em>greater_than=50</em>, <em>less_than=1000000</em>, <em>no_slr=False</em>, <em>clust_thr=15.0</em>, <em>reduction_thr=15.0</em>, <em>reduction_distance='mdf'</em>, <em>model_clust_thr=2.5</em>, <em>pruning_thr=8.0</em>, <em>pruning_distance='mdf'</em>, <em>slr_metric='symmetric'</em>, <em>slr_transform='similarity'</em>, <em>slr_matrix='small'</em>, <em>refine=False</em>, <em>r_reduction_thr=12.0</em>, <em>r_pruning_thr=6.0</em>, <em>no_r_slr=False</em>, <em>out_dir=''</em>, <em>out_recognized_transf='recognized.trk'</em>, <em>out_recognized_labels='labels.npy'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.RecoBundlesFlow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Recognize bundles</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>streamline_files</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">The path of streamline files where you want to recognize bundles</p>\n</dd>\n<dt><strong>model_bundle_files</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">The path of model bundle files</p>\n</dd>\n<dt><strong>greater_than</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int, optional</span></dt>\n<dd><p class=\"first last\">Keep streamlines that have length greater than\nthis value (default 50) in mm.</p>\n</dd>\n<dt><strong>less_than</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int, optional</span></dt>\n<dd><p class=\"first last\">Keep streamlines have length less than this value\n(default 1000000) in mm.</p>\n</dd>\n<dt><strong>no_slr</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool, optional</span></dt>\n<dd><p class=\"first last\">Don\u2019t enable local Streamline-based Linear\nRegistration (default False).</p>\n</dd>\n<dt><strong>clust_thr</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float, optional</span></dt>\n<dd><p class=\"first last\">MDF distance threshold for all streamlines (default 15)</p>\n</dd>\n<dt><strong>reduction_thr</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float, optional</span></dt>\n<dd><p class=\"first last\">Reduce search space by (mm) (default 15)</p>\n</dd>\n<dt><strong>reduction_distance</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Reduction distance type can be mdf or mam (default mdf)</p>\n</dd>\n<dt><strong>model_clust_thr</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float, optional</span></dt>\n<dd><p class=\"first last\">MDF distance threshold for the model bundles (default 2.5)</p>\n</dd>\n<dt><strong>pruning_thr</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float, optional</span></dt>\n<dd><p class=\"first last\">Pruning after matching (default 8).</p>\n</dd>\n<dt><strong>pruning_distance</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Pruning distance type can be mdf or mam (default mdf)</p>\n</dd>\n<dt><strong>slr_metric</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Options are None, symmetric, asymmetric or diagonal\n(default symmetric).</p>\n</dd>\n<dt><strong>slr_transform</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Transformation allowed. translation, rigid, similarity or scaling\n(Default \u2018similarity\u2019).</p>\n</dd>\n<dt><strong>slr_matrix</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Options are \u2018nano\u2019, \u2018tiny\u2019, \u2018small\u2019, \u2018medium\u2019, \u2018large\u2019, \u2018huge\u2019\n(default \u2018small\u2019)</p>\n</dd>\n<dt><strong>refine</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool, optional</span></dt>\n<dd><p class=\"first last\">Enable refine recognized bunle (default False)</p>\n</dd>\n<dt><strong>r_reduction_thr</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float, optional</span></dt>\n<dd><p class=\"first last\">Refine reduce search space by (mm) (default 12)</p>\n</dd>\n<dt><strong>r_pruning_thr</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float, optional</span></dt>\n<dd><p class=\"first last\">Refine pruning after matching (default 6).</p>\n</dd>\n<dt><strong>no_r_slr</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool, optional</span></dt>\n<dd><p class=\"first last\">Don\u2019t enable Refine local Streamline-based Linear\nRegistration (default False).</p>\n</dd>\n<dt><strong>out_dir</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Output directory (default input file directory)</p>\n</dd>\n<dt><strong>out_recognized_transf</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Recognized bundle in the space of the model bundle\n(default \u2018recognized.trk\u2019)</p>\n</dd>\n<dt><strong>out_recognized_labels</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Indices of recognized bundle in the original tractogram\n(default \u2018labels.npy\u2019)</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">References</p>\n<table class=\"docutils citation\" frame=\"void\" id=\"rbfdf3a404c62-garyfallidis17\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\"><a class=\"fn-backref\" href=\"#id93\">[Garyfallidis17]</a></td><td>Garyfallidis et al. Recognition of white matter\nbundles using local and global streamline-based registration and\nclustering, Neuroimage, 2017.</td></tr>\n</tbody>\n</table>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id94\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.segment.Workflow\" title=\"dipy.workflows.segment.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a><a class=\"headerlink\" href=\"#id94\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.segment.Workflow\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.segment.</code><code class=\"descname\">Workflow</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.Workflow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.7)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.segment.Workflow.get_io_iterator\" title=\"dipy.workflows.segment.Workflow.get_io_iterator\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code></a>()</td>\n<td>Create an iterator for IO.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.segment.Workflow.get_short_name\" title=\"dipy.workflows.segment.Workflow.get_short_name\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code></a>()</td>\n<td>Return A short name for the workflow used to subdivide.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.segment.Workflow.get_sub_runs\" title=\"dipy.workflows.segment.Workflow.get_sub_runs\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code></a>()</td>\n<td>Return No sub runs since this is a simple workflow.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.segment.Workflow.manage_output_overwrite\" title=\"dipy.workflows.segment.Workflow.manage_output_overwrite\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code></a>()</td>\n<td>Check if a file will be overwritten upon processing the inputs.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.segment.Workflow.run\" title=\"dipy.workflows.segment.Workflow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(*args,&nbsp;**kwargs)</td>\n<td>Execute the workflow.</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.segment.Workflow.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.Workflow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.segment.Workflow.get_io_iterator\">\n<code class=\"descname\">get_io_iterator</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.Workflow.get_io_iterator\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Create an iterator for IO.</p>\n<p>Use a couple of inspection tricks to build an IOIterator using the\nprevious frame (values of local variables and other contextuals) and\nthe run method\u2019s docstring.</p>\n</dd></dl>\n\n<dl class=\"classmethod\">\n<dt id=\"dipy.workflows.segment.Workflow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.Workflow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return A short name for the workflow used to subdivide.</p>\n<p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name.</p>\n<p>For example, a combined workflow with dti reconstruction and csd\nreconstruction might en up with the b0_threshold parameter. Using short\nnames, we will have dti.b0_threshold and csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.segment.Workflow.get_sub_runs\">\n<code class=\"descname\">get_sub_runs</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.Workflow.get_sub_runs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return No sub runs since this is a simple workflow.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.segment.Workflow.manage_output_overwrite\">\n<code class=\"descname\">manage_output_overwrite</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.Workflow.manage_output_overwrite\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Check if a file will be overwritten upon processing the inputs.</p>\n<p>If it is bound to happen, an action is taken depending on\nself._force_overwrite (or \u2013force via command line). A log message is\noutput independently of the outcome to tell the user something\nhappened.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.segment.Workflow.run\">\n<code class=\"descname\">run</code><span class=\"sig-paren\">(</span><em>*args</em>, <em>**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.Workflow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Execute the workflow.</p>\n<p>Since this is an abstract class, raise exception if this code is\nreached (not impletemented in child class or literally called on this\nclass)</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id95\">\n<h3>load_nifti<a class=\"headerlink\" href=\"#id95\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.segment.load_nifti\">\n<code class=\"descclassname\">dipy.workflows.segment.</code><code class=\"descname\">load_nifti</code><span class=\"sig-paren\">(</span><em>fname</em>, <em>return_img=False</em>, <em>return_voxsize=False</em>, <em>return_coords=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.load_nifti\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</div>\n<div class=\"section\" id=\"id96\">\n<h3>load_trk<a class=\"headerlink\" href=\"#id96\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.segment.load_trk\">\n<code class=\"descclassname\">dipy.workflows.segment.</code><code class=\"descname\">load_trk</code><span class=\"sig-paren\">(</span><em>filename</em>, <em>lazy_load=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.load_trk\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Loads tractogram files (<a href=\"#id97\"><span class=\"problematic\" id=\"id98\">*</span></a>.tck)</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>filename</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">str</span></dt>\n<dd><p class=\"first last\">input trk filename</p>\n</dd>\n<dt><strong>lazy_load</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">{False, True}, optional</span></dt>\n<dd><p class=\"first last\">If True, load streamlines in a lazy manner i.e. they will not be kept\nin memory and only be loaded when needed.\nOtherwise, load all streamlines in memory.</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>streamlines</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">list of 2D arrays</span></dt>\n<dd><p class=\"first last\">Each 2D array represents a sequence of 3D points (points, 3).</p>\n</dd>\n<dt><strong>hdr</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">dict</span></dt>\n<dd><p class=\"first last\">header from a trk file</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"median-otsu\">\n<h3>median_otsu<a class=\"headerlink\" href=\"#median-otsu\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.segment.median_otsu\">\n<code class=\"descclassname\">dipy.workflows.segment.</code><code class=\"descname\">median_otsu</code><span class=\"sig-paren\">(</span><em>input_volume</em>, <em>median_radius=4</em>, <em>numpass=4</em>, <em>autocrop=False</em>, <em>vol_idx=None</em>, <em>dilate=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.median_otsu\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Simple brain extraction tool method for images from DWI data.</p>\n<p>It uses a median filter smoothing of the input_volumes <cite>vol_idx</cite> and an\nautomatic histogram Otsu thresholding technique, hence the name\n<em>median_otsu</em>.</p>\n<p>This function is inspired from Mrtrix\u2019s bet which has default values\n<code class=\"docutils literal notranslate\"><span class=\"pre\">median_radius=3</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">numpass=2</span></code>. However, from tests on multiple 1.5T\nand 3T data     from GE, Philips, Siemens, the most robust choice is\n<code class=\"docutils literal notranslate\"><span class=\"pre\">median_radius=4</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">numpass=4</span></code>.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>input_volume</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">ndarray</span></dt>\n<dd><p class=\"first last\">ndarray of the brain volume</p>\n</dd>\n<dt><strong>median_radius</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int</span></dt>\n<dd><p class=\"first last\">Radius (in voxels) of the applied median filter (default: 4).</p>\n</dd>\n<dt><strong>numpass: int</strong></dt>\n<dd><p class=\"first last\">Number of pass of the median filter (default: 4).</p>\n</dd>\n<dt><strong>autocrop: bool, optional</strong></dt>\n<dd><p class=\"first last\">if True, the masked input_volume will also be cropped using the\nbounding box defined by the masked data. Should be on if DWI is\nupsampled to 1x1x1 resolution. (default: False).</p>\n</dd>\n<dt><strong>vol_idx</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">None or array, optional</span></dt>\n<dd><p class=\"first last\">1D array representing indices of <code class=\"docutils literal notranslate\"><span class=\"pre\">axis=3</span></code> of a 4D <cite>input_volume</cite> None\n(the default) corresponds to <code class=\"docutils literal notranslate\"><span class=\"pre\">(0,)</span></code> (assumes first volume in\n4D array).</p>\n</dd>\n<dt><strong>dilate</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">None or int, optional</span></dt>\n<dd><p class=\"first last\">number of iterations for binary dilation</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>maskedvolume</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">ndarray</span></dt>\n<dd><p class=\"first last\">Masked input_volume</p>\n</dd>\n<dt><strong>mask</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">3D ndarray</span></dt>\n<dd><p class=\"first last\">The binary brain mask</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Notes</p>\n<p>Copyright (C) 2011, the scikit-image team\nAll rights reserved.</p>\n<p>Redistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:</p>\n<blockquote>\n<div><ol class=\"arabic simple\">\n<li>Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.</li>\n<li>Redistributions in binary form must reproduce the above copyright\nnotice, this list of conditions and the following disclaimer in\nthe documentation and/or other materials provided with the\ndistribution.</li>\n<li>Neither the name of skimage nor the names of its contributors may be\nused to endorse or promote products derived from this software without\nspecific prior written permission.</li>\n</ol>\n</div></blockquote>\n<p>THIS SOFTWARE IS PROVIDED BY THE AUTHOR <a href=\"#id99\"><span class=\"problematic\" id=\"id100\">``</span></a>AS IS\u2019\u2019 AND ANY EXPRESS OR\nIMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,\nINDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\nHOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\nSTRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\nIN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGE.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id101\">\n<h3>save_nifti<a class=\"headerlink\" href=\"#id101\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.segment.save_nifti\">\n<code class=\"descclassname\">dipy.workflows.segment.</code><code class=\"descname\">save_nifti</code><span class=\"sig-paren\">(</span><em>fname</em>, <em>data</em>, <em>affine</em>, <em>hdr=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.save_nifti\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</div>\n<div class=\"section\" id=\"time\">\n<h3>time<a class=\"headerlink\" href=\"#time\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.segment.time\">\n<code class=\"descclassname\">dipy.workflows.segment.</code><code class=\"descname\">time</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span> &#x2192; floating point number<a class=\"headerlink\" href=\"#dipy.workflows.segment.time\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return the current time in seconds since the Epoch.\nFractions of a second may be present if the system clock provides them.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"snrinccflow\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.stats.SNRinCCFlow\" title=\"dipy.workflows.stats.SNRinCCFlow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SNRinCCFlow</span></code></a><a class=\"headerlink\" href=\"#snrinccflow\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.stats.SNRinCCFlow\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.stats.</code><code class=\"descname\">SNRinCCFlow</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.stats.SNRinCCFlow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow\" title=\"dipy.workflows.workflow.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.workflows.workflow.Workflow</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code>()</td>\n<td>Create an iterator for IO.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.stats.SNRinCCFlow.get_short_name\" title=\"dipy.workflows.stats.SNRinCCFlow.get_short_name\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code></a>()</td>\n<td>Return A short name for the workflow used to subdivide.</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code>()</td>\n<td>Return No sub runs since this is a simple workflow.</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code>()</td>\n<td>Check if a file will be overwritten upon processing the inputs.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.stats.SNRinCCFlow.run\" title=\"dipy.workflows.stats.SNRinCCFlow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(data_files,&nbsp;bvals_files,&nbsp;bvecs_files,&nbsp;\u2026)</td>\n<td>Compute the signal-to-noise ratio in the corpus callosum.</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.stats.SNRinCCFlow.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.stats.SNRinCCFlow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"classmethod\">\n<dt id=\"dipy.workflows.stats.SNRinCCFlow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.stats.SNRinCCFlow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return A short name for the workflow used to subdivide.</p>\n<p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name.</p>\n<p>For example, a combined workflow with dti reconstruction and csd\nreconstruction might en up with the b0_threshold parameter. Using short\nnames, we will have dti.b0_threshold and csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.stats.SNRinCCFlow.run\">\n<code class=\"descname\">run</code><span class=\"sig-paren\">(</span><em>data_files, bvals_files, bvecs_files, mask_files, bbox_threshold=[0.6, 1, 0, 0.1, 0, 0.1], out_dir='', out_file='product.json', out_mask_cc='cc.nii.gz', out_mask_noise='mask_noise.nii.gz'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.stats.SNRinCCFlow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Compute the signal-to-noise ratio in the corpus callosum.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>data_files</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">Path to the dwi.nii.gz file. This path may contain wildcards to\nprocess multiple inputs at once.</p>\n</dd>\n<dt><strong>bvals_files</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">Path of bvals.</p>\n</dd>\n<dt><strong>bvecs_files</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">Path of bvecs.</p>\n</dd>\n<dt><strong>mask_files</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">Path of brain mask</p>\n</dd>\n<dt><strong>bbox_threshold</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">variable float, optional</span></dt>\n<dd><p class=\"first last\">Threshold for bounding box, values separated with commas for ex.\n[0.6,1,0,0.1,0,0.1]. (default (0.6, 1, 0, 0.1, 0, 0.1))</p>\n</dd>\n<dt><strong>out_dir</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Where the resulting file will be saved. (default \u2018\u2019)</p>\n</dd>\n<dt><strong>out_file</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the result file to be saved. (default \u2018product.json\u2019)</p>\n</dd>\n<dt><strong>out_mask_cc</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the CC mask volume to be saved (default \u2018cc.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_mask_noise</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the mask noise volume to be saved\n(default \u2018mask_noise.nii.gz\u2019)</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id102\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.stats.TensorModel\" title=\"dipy.workflows.stats.TensorModel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TensorModel</span></code></a><a class=\"headerlink\" href=\"#id102\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.stats.TensorModel\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.stats.</code><code class=\"descname\">TensorModel</code><span class=\"sig-paren\">(</span><em>gtab</em>, <em>fit_method='WLS'</em>, <em>return_S0_hat=False</em>, <em>*args</em>, <em>**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.stats.TensorModel\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"../dipy.reconst/#dipy.reconst.base.ReconstModel\" title=\"dipy.reconst.base.ReconstModel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.reconst.base.ReconstModel</span></code></a></p>\n<p>Diffusion Tensor</p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.stats.TensorModel.fit\" title=\"dipy.workflows.stats.TensorModel.fit\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">fit</span></code></a>(data[,&nbsp;mask])</td>\n<td>Fit method of the DTI model class</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.stats.TensorModel.predict\" title=\"dipy.workflows.stats.TensorModel.predict\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">predict</span></code></a>(dti_params[,&nbsp;S0])</td>\n<td>Predict a signal for this TensorModel class instance given parameters.</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.stats.TensorModel.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>gtab</em>, <em>fit_method='WLS'</em>, <em>return_S0_hat=False</em>, <em>*args</em>, <em>**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.stats.TensorModel.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A Diffusion Tensor Model <a class=\"reference internal\" href=\"#r6966379adcdc-1\" id=\"id103\">[1]</a>, <a class=\"reference internal\" href=\"#r6966379adcdc-2\" id=\"id104\">[2]</a>.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>gtab</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">GradientTable class instance</span></dt>\n<dd></dd>\n<dt><strong>fit_method</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">str or callable</span></dt>\n<dd><p class=\"first\">str can be one of the following:</p>\n<dl class=\"last docutils\">\n<dt>\u2018WLS\u2019 for weighted least squares</dt>\n<dd><p class=\"first last\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">dti.wls_fit_tensor()</span></code></p>\n</dd>\n<dt>\u2018LS\u2019 or \u2018OLS\u2019 for ordinary least squares</dt>\n<dd><p class=\"first last\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">dti.ols_fit_tensor()</span></code></p>\n</dd>\n<dt>\u2018NLLS\u2019 for non-linear least-squares</dt>\n<dd><p class=\"first last\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">dti.nlls_fit_tensor()</span></code></p>\n</dd>\n<dt>\u2018RT\u2019 or \u2018restore\u2019 or \u2018RESTORE\u2019 for RESTORE robust tensor</dt>\n<dd><p class=\"first last\">fitting <a class=\"reference internal\" href=\"#r6966379adcdc-3\" id=\"id105\">[3]</a>\n<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">dti.restore_fit_tensor()</span></code></p>\n</dd>\n<dt>callable has to have the signature:</dt>\n<dd><p class=\"first last\">fit_method(design_matrix, data, <a href=\"#id106\"><span class=\"problematic\" id=\"id107\">*</span></a>args, <a href=\"#id108\"><span class=\"problematic\" id=\"id109\">**</span></a>kwargs)</p>\n</dd>\n</dl>\n</dd>\n<dt><strong>return_S0_hat</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool</span></dt>\n<dd><p class=\"first last\">Boolean to return (True) or not (False) the S0 values for the fit.</p>\n</dd>\n<dt><strong>args, kwargs</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">arguments and key-word arguments passed to the</span></dt>\n<dd><p class=\"first last\">fit_method. See dti.wls_fit_tensor, dti.ols_fit_tensor for details</p>\n</dd>\n<dt><strong>min_signal</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float</span></dt>\n<dd><p class=\"first last\">The minimum signal value. Needs to be a strictly positive\nnumber. Default: minimal signal in the data provided to <cite>fit</cite>.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Notes</p>\n<p>In order to increase speed of processing, tensor fitting is done\nsimultaneously over many voxels. Many fit_methods use the \u2018step\u2019\nparameter to set the number of voxels that will be fit at once in each\niteration. This is the chunk size as a number of voxels. A larger step\nvalue should speed things up, but it will also take up more memory. It\nis advisable to keep an eye on memory consumption as this value is\nincreased.</p>\n<p>Example : In <code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">iter_fit_tensor()</span></code> we have a default step value of\n1e4</p>\n<p class=\"rubric\">References</p>\n<table class=\"docutils citation\" frame=\"void\" id=\"r6966379adcdc-1\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\">[1]</td><td><em>(<a class=\"fn-backref\" href=\"#id103\">1</a>, <a class=\"fn-backref\" href=\"#id110\">2</a>)</em> Basser, P.J., Mattiello, J., LeBihan, D., 1994. Estimation of\nthe effective self-diffusion tensor from the NMR spin echo. J Magn\nReson B 103, 247-254.</td></tr>\n</tbody>\n</table>\n<table class=\"docutils citation\" frame=\"void\" id=\"r6966379adcdc-2\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\">[2]</td><td><em>(<a class=\"fn-backref\" href=\"#id104\">1</a>, <a class=\"fn-backref\" href=\"#id111\">2</a>)</em> Basser, P., Pierpaoli, C., 1996. Microstructural and\nphysiological features of tissues elucidated by quantitative\ndiffusion-tensor MRI.  Journal of Magnetic Resonance 111, 209-219.</td></tr>\n</tbody>\n</table>\n<table class=\"docutils citation\" frame=\"void\" id=\"r6966379adcdc-3\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\">[3]</td><td><em>(<a class=\"fn-backref\" href=\"#id105\">1</a>, <a class=\"fn-backref\" href=\"#id112\">2</a>)</em> Lin-Ching C., Jones D.K., Pierpaoli, C. 2005. RESTORE: Robust\nestimation of tensors by outlier rejection. MRM 53: 1088-1095</td></tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.stats.TensorModel.fit\">\n<code class=\"descname\">fit</code><span class=\"sig-paren\">(</span><em>data</em>, <em>mask=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.stats.TensorModel.fit\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Fit method of the DTI model class</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>data</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array</span></dt>\n<dd><p class=\"first last\">The measured signal from one voxel.</p>\n</dd>\n<dt><strong>mask</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array</span></dt>\n<dd><p class=\"first last\">A boolean array used to mark the coordinates in the data that\nshould be analyzed that has the shape data.shape[:-1]</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.stats.TensorModel.predict\">\n<code class=\"descname\">predict</code><span class=\"sig-paren\">(</span><em>dti_params</em>, <em>S0=1.0</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.stats.TensorModel.predict\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Predict a signal for this TensorModel class instance given parameters.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>dti_params</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">ndarray</span></dt>\n<dd><p class=\"first last\">The last dimension should have 12 tensor parameters: 3\neigenvalues, followed by the 3 eigenvectors</p>\n</dd>\n<dt><strong>S0</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float or ndarray</span></dt>\n<dd><p class=\"first last\">The non diffusion-weighted signal in every voxel, or across all\nvoxels. Default: 1</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id113\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.stats.Workflow\" title=\"dipy.workflows.stats.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a><a class=\"headerlink\" href=\"#id113\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.stats.Workflow\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.stats.</code><code class=\"descname\">Workflow</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.stats.Workflow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.7)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.stats.Workflow.get_io_iterator\" title=\"dipy.workflows.stats.Workflow.get_io_iterator\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code></a>()</td>\n<td>Create an iterator for IO.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.stats.Workflow.get_short_name\" title=\"dipy.workflows.stats.Workflow.get_short_name\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code></a>()</td>\n<td>Return A short name for the workflow used to subdivide.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.stats.Workflow.get_sub_runs\" title=\"dipy.workflows.stats.Workflow.get_sub_runs\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code></a>()</td>\n<td>Return No sub runs since this is a simple workflow.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.stats.Workflow.manage_output_overwrite\" title=\"dipy.workflows.stats.Workflow.manage_output_overwrite\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code></a>()</td>\n<td>Check if a file will be overwritten upon processing the inputs.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.stats.Workflow.run\" title=\"dipy.workflows.stats.Workflow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(*args,&nbsp;**kwargs)</td>\n<td>Execute the workflow.</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.stats.Workflow.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.stats.Workflow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.stats.Workflow.get_io_iterator\">\n<code class=\"descname\">get_io_iterator</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.stats.Workflow.get_io_iterator\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Create an iterator for IO.</p>\n<p>Use a couple of inspection tricks to build an IOIterator using the\nprevious frame (values of local variables and other contextuals) and\nthe run method\u2019s docstring.</p>\n</dd></dl>\n\n<dl class=\"classmethod\">\n<dt id=\"dipy.workflows.stats.Workflow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.stats.Workflow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return A short name for the workflow used to subdivide.</p>\n<p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name.</p>\n<p>For example, a combined workflow with dti reconstruction and csd\nreconstruction might en up with the b0_threshold parameter. Using short\nnames, we will have dti.b0_threshold and csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.stats.Workflow.get_sub_runs\">\n<code class=\"descname\">get_sub_runs</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.stats.Workflow.get_sub_runs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return No sub runs since this is a simple workflow.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.stats.Workflow.manage_output_overwrite\">\n<code class=\"descname\">manage_output_overwrite</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.stats.Workflow.manage_output_overwrite\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Check if a file will be overwritten upon processing the inputs.</p>\n<p>If it is bound to happen, an action is taken depending on\nself._force_overwrite (or \u2013force via command line). A log message is\noutput independently of the outcome to tell the user something\nhappened.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.stats.Workflow.run\">\n<code class=\"descname\">run</code><span class=\"sig-paren\">(</span><em>*args</em>, <em>**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.stats.Workflow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Execute the workflow.</p>\n<p>Since this is an abstract class, raise exception if this code is\nreached (not impletemented in child class or literally called on this\nclass)</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"binary-dilation\">\n<h3>binary_dilation<a class=\"headerlink\" href=\"#binary-dilation\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.stats.binary_dilation\">\n<code class=\"descclassname\">dipy.workflows.stats.</code><code class=\"descname\">binary_dilation</code><span class=\"sig-paren\">(</span><em>input</em>, <em>structure=None</em>, <em>iterations=1</em>, <em>mask=None</em>, <em>output=None</em>, <em>border_value=0</em>, <em>origin=0</em>, <em>brute_force=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.stats.binary_dilation\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Multi-dimensional binary dilation with the given structuring element.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>input</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array_like</span></dt>\n<dd><p class=\"first last\">Binary array_like to be dilated. Non-zero (True) elements form\nthe subset to be dilated.</p>\n</dd>\n<dt><strong>structure</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array_like, optional</span></dt>\n<dd><p class=\"first last\">Structuring element used for the dilation. Non-zero elements are\nconsidered True. If no structuring element is provided an element\nis generated with a square connectivity equal to one.</p>\n</dd>\n<dt><strong>iterations</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">{int, float}, optional</span></dt>\n<dd><p class=\"first last\">The dilation is repeated <cite>iterations</cite> times (one, by default).\nIf iterations is less than 1, the dilation is repeated until the\nresult does not change anymore.</p>\n</dd>\n<dt><strong>mask</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array_like, optional</span></dt>\n<dd><p class=\"first last\">If a mask is given, only those elements with a True value at\nthe corresponding mask element are modified at each iteration.</p>\n</dd>\n<dt><strong>output</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">ndarray, optional</span></dt>\n<dd><p class=\"first last\">Array of the same shape as input, into which the output is placed.\nBy default, a new array is created.</p>\n</dd>\n<dt><strong>border_value</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int (cast to 0 or 1), optional</span></dt>\n<dd><p class=\"first last\">Value at the border in the output array.</p>\n</dd>\n<dt><strong>origin</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int or tuple of ints, optional</span></dt>\n<dd><p class=\"first last\">Placement of the filter, by default 0.</p>\n</dd>\n<dt><strong>brute_force</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">boolean, optional</span></dt>\n<dd><p class=\"first last\">Memory condition: if False, only the pixels whose value was changed in\nthe last iteration are tracked as candidates to be updated (dilated)\nin the current iteration; if True all pixels are considered as\ncandidates for dilation, regardless of what happened in the previous\niteration. False by default.</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>binary_dilation</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">ndarray of bools</span></dt>\n<dd><p class=\"first last\">Dilation of the input by the structuring element.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<div class=\"admonition seealso\">\n<p class=\"first admonition-title\">See also</p>\n<p class=\"last\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">grey_dilation</span></code>, <code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">binary_erosion</span></code>, <code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">binary_closing</span></code>, <code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">binary_opening</span></code>, <code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">generate_binary_structure</span></code></p>\n</div>\n<p class=\"rubric\">Notes</p>\n<p>Dilation <a class=\"reference internal\" href=\"#rf074e351565f-1\" id=\"id114\">[1]</a> is a mathematical morphology operation <a class=\"reference internal\" href=\"#rf074e351565f-2\" id=\"id115\">[2]</a> that uses a\nstructuring element for expanding the shapes in an image. The binary\ndilation of an image by a structuring element is the locus of the points\ncovered by the structuring element, when its center lies within the\nnon-zero points of the image.</p>\n<p class=\"rubric\">References</p>\n<table class=\"docutils citation\" frame=\"void\" id=\"rf074e351565f-1\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\">[1]</td><td><em>(<a class=\"fn-backref\" href=\"#id114\">1</a>, <a class=\"fn-backref\" href=\"#id116\">2</a>)</em> <a class=\"reference external\" href=\"http://en.wikipedia.org/wiki/Dilation_%28morphology%29\">http://en.wikipedia.org/wiki/Dilation_%28morphology%29</a></td></tr>\n</tbody>\n</table>\n<table class=\"docutils citation\" frame=\"void\" id=\"rf074e351565f-2\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\">[2]</td><td><em>(<a class=\"fn-backref\" href=\"#id115\">1</a>, <a class=\"fn-backref\" href=\"#id117\">2</a>)</em> <a class=\"reference external\" href=\"http://en.wikipedia.org/wiki/Mathematical_morphology\">http://en.wikipedia.org/wiki/Mathematical_morphology</a></td></tr>\n</tbody>\n</table>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">scipy</span> <span class=\"k\">import</span> <span class=\"n\">ndimage</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">((</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span>\n<span class=\"go\">array([[ 0.,  0.,  0.,  0.,  0.],</span>\n<span class=\"go\">       [ 0.,  0.,  0.,  0.,  0.],</span>\n<span class=\"go\">       [ 0.,  0.,  1.,  0.,  0.],</span>\n<span class=\"go\">       [ 0.,  0.,  0.,  0.,  0.],</span>\n<span class=\"go\">       [ 0.,  0.,  0.,  0.,  0.]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ndimage</span><span class=\"o\">.</span><span class=\"n\">binary_dilation</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>\n<span class=\"go\">array([[False, False, False, False, False],</span>\n<span class=\"go\">       [False, False,  True, False, False],</span>\n<span class=\"go\">       [False,  True,  True,  True, False],</span>\n<span class=\"go\">       [False, False,  True, False, False],</span>\n<span class=\"go\">       [False, False, False, False, False]], dtype=bool)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ndimage</span><span class=\"o\">.</span><span class=\"n\">binary_dilation</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">)</span>\n<span class=\"go\">array([[ 0.,  0.,  0.,  0.,  0.],</span>\n<span class=\"go\">       [ 0.,  0.,  1.,  0.,  0.],</span>\n<span class=\"go\">       [ 0.,  1.,  1.,  1.,  0.],</span>\n<span class=\"go\">       [ 0.,  0.,  1.,  0.,  0.],</span>\n<span class=\"go\">       [ 0.,  0.,  0.,  0.,  0.]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># 3x3 structuring element with connectivity 1, used by default</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">struct1</span> <span class=\"o\">=</span> <span class=\"n\">ndimage</span><span class=\"o\">.</span><span class=\"n\">generate_binary_structure</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">struct1</span>\n<span class=\"go\">array([[False,  True, False],</span>\n<span class=\"go\">       [ True,  True,  True],</span>\n<span class=\"go\">       [False,  True, False]], dtype=bool)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># 3x3 structuring element with connectivity 2</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">struct2</span> <span class=\"o\">=</span> <span class=\"n\">ndimage</span><span class=\"o\">.</span><span class=\"n\">generate_binary_structure</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">struct2</span>\n<span class=\"go\">array([[ True,  True,  True],</span>\n<span class=\"go\">       [ True,  True,  True],</span>\n<span class=\"go\">       [ True,  True,  True]], dtype=bool)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ndimage</span><span class=\"o\">.</span><span class=\"n\">binary_dilation</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">structure</span><span class=\"o\">=</span><span class=\"n\">struct1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">)</span>\n<span class=\"go\">array([[ 0.,  0.,  0.,  0.,  0.],</span>\n<span class=\"go\">       [ 0.,  0.,  1.,  0.,  0.],</span>\n<span class=\"go\">       [ 0.,  1.,  1.,  1.,  0.],</span>\n<span class=\"go\">       [ 0.,  0.,  1.,  0.,  0.],</span>\n<span class=\"go\">       [ 0.,  0.,  0.,  0.,  0.]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ndimage</span><span class=\"o\">.</span><span class=\"n\">binary_dilation</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">structure</span><span class=\"o\">=</span><span class=\"n\">struct2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">)</span>\n<span class=\"go\">array([[ 0.,  0.,  0.,  0.,  0.],</span>\n<span class=\"go\">       [ 0.,  1.,  1.,  1.,  0.],</span>\n<span class=\"go\">       [ 0.,  1.,  1.,  1.,  0.],</span>\n<span class=\"go\">       [ 0.,  1.,  1.,  1.,  0.],</span>\n<span class=\"go\">       [ 0.,  0.,  0.,  0.,  0.]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ndimage</span><span class=\"o\">.</span><span class=\"n\">binary_dilation</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">structure</span><span class=\"o\">=</span><span class=\"n\">struct1</span><span class=\"p\">,</span>\\\n<span class=\"gp\">... </span><span class=\"n\">iterations</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">)</span>\n<span class=\"go\">array([[ 0.,  0.,  1.,  0.,  0.],</span>\n<span class=\"go\">       [ 0.,  1.,  1.,  1.,  0.],</span>\n<span class=\"go\">       [ 1.,  1.,  1.,  1.,  1.],</span>\n<span class=\"go\">       [ 0.,  1.,  1.,  1.,  0.],</span>\n<span class=\"go\">       [ 0.,  0.,  1.,  0.,  0.]])</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"bounding-box\">\n<h3>bounding_box<a class=\"headerlink\" href=\"#bounding-box\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.stats.bounding_box\">\n<code class=\"descclassname\">dipy.workflows.stats.</code><code class=\"descname\">bounding_box</code><span class=\"sig-paren\">(</span><em>vol</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.stats.bounding_box\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Compute the bounding box of nonzero intensity voxels in the volume.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>vol</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">ndarray</span></dt>\n<dd><p class=\"first last\">Volume to compute bounding box on.</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>npmins</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">list</span></dt>\n<dd><p class=\"first last\">Array containg minimum index of each dimension</p>\n</dd>\n<dt><strong>npmaxs</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">list</span></dt>\n<dd><p class=\"first last\">Array containg maximum index of each dimension</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id118\">\n<h3>gradient_table<a class=\"headerlink\" href=\"#id118\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.stats.gradient_table\">\n<code class=\"descclassname\">dipy.workflows.stats.</code><code class=\"descname\">gradient_table</code><span class=\"sig-paren\">(</span><em>bvals</em>, <em>bvecs=None</em>, <em>big_delta=None</em>, <em>small_delta=None</em>, <em>b0_threshold=50</em>, <em>atol=0.01</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.stats.gradient_table\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A general function for creating diffusion MR gradients.</p>\n<p>It reads, loads and prepares scanner parameters like the b-values and\nb-vectors so that they can be useful during the reconstruction process.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>bvals</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">can be any of the four options</span></dt>\n<dd><ol class=\"first last arabic simple\">\n<li>an array of shape (N,) or (1, N) or (N, 1) with the b-values.</li>\n<li>a path for the file which contains an array like the above (1).</li>\n<li>an array of shape (N, 4) or (4, N). Then this parameter is\nconsidered to be a b-table which contains both bvals and bvecs. In\nthis case the next parameter is skipped.</li>\n<li>a path for the file which contains an array like the one at (3).</li>\n</ol>\n</dd>\n<dt><strong>bvecs</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">can be any of two options</span></dt>\n<dd><ol class=\"first last arabic simple\">\n<li>an array of shape (N, 3) or (3, N) with the b-vectors.</li>\n<li>a path for the file which contains an array like the previous.</li>\n</ol>\n</dd>\n<dt><strong>big_delta</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float</span></dt>\n<dd><p class=\"first last\">acquisition pulse separation time in seconds (default None)</p>\n</dd>\n<dt><strong>small_delta</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float</span></dt>\n<dd><p class=\"first last\">acquisition pulse duration time in seconds (default None)</p>\n</dd>\n<dt><strong>b0_threshold</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float</span></dt>\n<dd><p class=\"first last\">All b-values with values less than or equal to <cite>bo_threshold</cite> are\nconsidered as b0s i.e. without diffusion weighting.</p>\n</dd>\n<dt><strong>atol</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float</span></dt>\n<dd><p class=\"first last\">All b-vectors need to be unit vectors up to a tolerance.</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>gradients</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">GradientTable</span></dt>\n<dd><p class=\"first last\">A GradientTable with all the gradient information.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Notes</p>\n<ol class=\"arabic simple\">\n<li>Often b0s (b-values which correspond to images without diffusion\nweighting) have 0 values however in some cases the scanner cannot\nprovide b0s of an exact 0 value and it gives a bit higher values\ne.g. 6 or 12. This is the purpose of the b0_threshold in the __init__.</li>\n<li>We assume that the minimum number of b-values is 7.</li>\n<li>B-vectors should be unit vectors.</li>\n</ol>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">dipy.core.gradients</span> <span class=\"k\">import</span> <span class=\"n\">gradient_table</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">bvals</span> <span class=\"o\">=</span> <span class=\"mi\">1500</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">bvals</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sq2</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">bvecs</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                  <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                  <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                  <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                  <span class=\"p\">[</span><span class=\"n\">sq2</span><span class=\"p\">,</span> <span class=\"n\">sq2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                  <span class=\"p\">[</span><span class=\"n\">sq2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">sq2</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                  <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">sq2</span><span class=\"p\">,</span> <span class=\"n\">sq2</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">gt</span> <span class=\"o\">=</span> <span class=\"n\">gradient_table</span><span class=\"p\">(</span><span class=\"n\">bvals</span><span class=\"p\">,</span> <span class=\"n\">bvecs</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">gt</span><span class=\"o\">.</span><span class=\"n\">bvecs</span><span class=\"o\">.</span><span class=\"n\">shape</span> <span class=\"o\">==</span> <span class=\"n\">bvecs</span><span class=\"o\">.</span><span class=\"n\">shape</span>\n<span class=\"go\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">gt</span> <span class=\"o\">=</span> <span class=\"n\">gradient_table</span><span class=\"p\">(</span><span class=\"n\">bvals</span><span class=\"p\">,</span> <span class=\"n\">bvecs</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">gt</span><span class=\"o\">.</span><span class=\"n\">bvecs</span><span class=\"o\">.</span><span class=\"n\">shape</span> <span class=\"o\">==</span> <span class=\"n\">bvecs</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"o\">.</span><span class=\"n\">shape</span>\n<span class=\"go\">False</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id119\">\n<h3>load_nifti<a class=\"headerlink\" href=\"#id119\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.stats.load_nifti\">\n<code class=\"descclassname\">dipy.workflows.stats.</code><code class=\"descname\">load_nifti</code><span class=\"sig-paren\">(</span><em>fname</em>, <em>return_img=False</em>, <em>return_voxsize=False</em>, <em>return_coords=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.stats.load_nifti\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</div>\n<div class=\"section\" id=\"id120\">\n<h3>median_otsu<a class=\"headerlink\" href=\"#id120\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.stats.median_otsu\">\n<code class=\"descclassname\">dipy.workflows.stats.</code><code class=\"descname\">median_otsu</code><span class=\"sig-paren\">(</span><em>input_volume</em>, <em>median_radius=4</em>, <em>numpass=4</em>, <em>autocrop=False</em>, <em>vol_idx=None</em>, <em>dilate=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.stats.median_otsu\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Simple brain extraction tool method for images from DWI data.</p>\n<p>It uses a median filter smoothing of the input_volumes <cite>vol_idx</cite> and an\nautomatic histogram Otsu thresholding technique, hence the name\n<em>median_otsu</em>.</p>\n<p>This function is inspired from Mrtrix\u2019s bet which has default values\n<code class=\"docutils literal notranslate\"><span class=\"pre\">median_radius=3</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">numpass=2</span></code>. However, from tests on multiple 1.5T\nand 3T data     from GE, Philips, Siemens, the most robust choice is\n<code class=\"docutils literal notranslate\"><span class=\"pre\">median_radius=4</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">numpass=4</span></code>.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>input_volume</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">ndarray</span></dt>\n<dd><p class=\"first last\">ndarray of the brain volume</p>\n</dd>\n<dt><strong>median_radius</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int</span></dt>\n<dd><p class=\"first last\">Radius (in voxels) of the applied median filter (default: 4).</p>\n</dd>\n<dt><strong>numpass: int</strong></dt>\n<dd><p class=\"first last\">Number of pass of the median filter (default: 4).</p>\n</dd>\n<dt><strong>autocrop: bool, optional</strong></dt>\n<dd><p class=\"first last\">if True, the masked input_volume will also be cropped using the\nbounding box defined by the masked data. Should be on if DWI is\nupsampled to 1x1x1 resolution. (default: False).</p>\n</dd>\n<dt><strong>vol_idx</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">None or array, optional</span></dt>\n<dd><p class=\"first last\">1D array representing indices of <code class=\"docutils literal notranslate\"><span class=\"pre\">axis=3</span></code> of a 4D <cite>input_volume</cite> None\n(the default) corresponds to <code class=\"docutils literal notranslate\"><span class=\"pre\">(0,)</span></code> (assumes first volume in\n4D array).</p>\n</dd>\n<dt><strong>dilate</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">None or int, optional</span></dt>\n<dd><p class=\"first last\">number of iterations for binary dilation</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>maskedvolume</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">ndarray</span></dt>\n<dd><p class=\"first last\">Masked input_volume</p>\n</dd>\n<dt><strong>mask</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">3D ndarray</span></dt>\n<dd><p class=\"first last\">The binary brain mask</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Notes</p>\n<p>Copyright (C) 2011, the scikit-image team\nAll rights reserved.</p>\n<p>Redistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:</p>\n<blockquote>\n<div><ol class=\"arabic simple\">\n<li>Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.</li>\n<li>Redistributions in binary form must reproduce the above copyright\nnotice, this list of conditions and the following disclaimer in\nthe documentation and/or other materials provided with the\ndistribution.</li>\n<li>Neither the name of skimage nor the names of its contributors may be\nused to endorse or promote products derived from this software without\nspecific prior written permission.</li>\n</ol>\n</div></blockquote>\n<p>THIS SOFTWARE IS PROVIDED BY THE AUTHOR <a href=\"#id121\"><span class=\"problematic\" id=\"id122\">``</span></a>AS IS\u2019\u2019 AND ANY EXPRESS OR\nIMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,\nINDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\nHOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\nSTRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\nIN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGE.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id123\">\n<h3>read_bvals_bvecs<a class=\"headerlink\" href=\"#id123\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.stats.read_bvals_bvecs\">\n<code class=\"descclassname\">dipy.workflows.stats.</code><code class=\"descname\">read_bvals_bvecs</code><span class=\"sig-paren\">(</span><em>fbvals</em>, <em>fbvecs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.stats.read_bvals_bvecs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Read b-values and b-vectors from disk</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>fbvals</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">str</span></dt>\n<dd><p class=\"first last\">Full path to file with b-values. None to not read bvals.</p>\n</dd>\n<dt><strong>fbvecs</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">str</span></dt>\n<dd><p class=\"first last\">Full path of file with b-vectors. None to not read bvecs.</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>bvals</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, (N,) or None</span></dt>\n<dd></dd>\n<dt><strong>bvecs</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, (N, 3) or None</span></dt>\n<dd></dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Notes</p>\n<p>Files can be either \u2018.bvals\u2019/\u2019.bvecs\u2019 or \u2018.txt\u2019 or \u2018.npy\u2019 (containing\narrays stored with the appropriate values).</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id124\">\n<h3>save_nifti<a class=\"headerlink\" href=\"#id124\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.stats.save_nifti\">\n<code class=\"descclassname\">dipy.workflows.stats.</code><code class=\"descname\">save_nifti</code><span class=\"sig-paren\">(</span><em>fname</em>, <em>data</em>, <em>affine</em>, <em>hdr=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.stats.save_nifti\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</div>\n<div class=\"section\" id=\"segment-from-cfa\">\n<h3>segment_from_cfa<a class=\"headerlink\" href=\"#segment-from-cfa\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.stats.segment_from_cfa\">\n<code class=\"descclassname\">dipy.workflows.stats.</code><code class=\"descname\">segment_from_cfa</code><span class=\"sig-paren\">(</span><em>tensor_fit</em>, <em>roi</em>, <em>threshold</em>, <em>return_cfa=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.stats.segment_from_cfa\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Segment the cfa inside roi using the values from threshold as bounds.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>tensor_fit</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">TensorFit object</span></dt>\n<dd><p class=\"first last\">TensorFit object</p>\n</dd>\n<dt><strong>roi</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">ndarray</span></dt>\n<dd><p class=\"first last\">A binary mask, which contains the bounding box for the segmentation.</p>\n</dd>\n<dt><strong>threshold</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array-like</span></dt>\n<dd><p class=\"first last\">An iterable that defines the min and max values to use for the\nthresholding.\nThe values are specified as (R_min, R_max, G_min, G_max, B_min, B_max)</p>\n</dd>\n<dt><strong>return_cfa</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool, optional</span></dt>\n<dd><p class=\"first last\">If True, the cfa is also returned.</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>mask</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">ndarray</span></dt>\n<dd><p class=\"first last\">Binary mask of the segmentation.</p>\n</dd>\n<dt><strong>cfa</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">ndarray, optional</span></dt>\n<dd><p class=\"first last\">Array with shape = (\u2026, 3), where \u2026 is the shape of tensor_fit.\nThe color fractional anisotropy, ordered as a nd array with the last\ndimension of size 3 for the R, G and B channels.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"dettrackpamflow\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.tracking.DetTrackPAMFlow\" title=\"dipy.workflows.tracking.DetTrackPAMFlow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DetTrackPAMFlow</span></code></a><a class=\"headerlink\" href=\"#dettrackpamflow\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.tracking.DetTrackPAMFlow\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.tracking.</code><code class=\"descname\">DetTrackPAMFlow</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.DetTrackPAMFlow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.workflows.tracking.GenericTrackFlow\" title=\"dipy.workflows.tracking.GenericTrackFlow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.workflows.tracking.GenericTrackFlow</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code>()</td>\n<td>Create an iterator for IO.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.tracking.DetTrackPAMFlow.get_short_name\" title=\"dipy.workflows.tracking.DetTrackPAMFlow.get_short_name\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code></a>()</td>\n<td>Return A short name for the workflow used to subdivide.</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code>()</td>\n<td>Return No sub runs since this is a simple workflow.</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code>()</td>\n<td>Check if a file will be overwritten upon processing the inputs.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.tracking.DetTrackPAMFlow.run\" title=\"dipy.workflows.tracking.DetTrackPAMFlow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(pam_files,&nbsp;stopping_files,&nbsp;seeding_files)</td>\n<td>Workflow for deterministic using a saved peaks and metrics (PAM) file as input.</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.tracking.DetTrackPAMFlow.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.DetTrackPAMFlow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"classmethod\">\n<dt id=\"dipy.workflows.tracking.DetTrackPAMFlow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.DetTrackPAMFlow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return A short name for the workflow used to subdivide.</p>\n<p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name.</p>\n<p>For example, a combined workflow with dti reconstruction and csd\nreconstruction might en up with the b0_threshold parameter. Using short\nnames, we will have dti.b0_threshold and csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.tracking.DetTrackPAMFlow.run\">\n<code class=\"descname\">run</code><span class=\"sig-paren\">(</span><em>pam_files</em>, <em>stopping_files</em>, <em>seeding_files</em>, <em>stopping_thr=0.2</em>, <em>seed_density=1</em>, <em>use_sh=False</em>, <em>out_dir=''</em>, <em>out_tractogram='tractogram.trk'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.DetTrackPAMFlow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Workflow for deterministic using a saved peaks and metrics (PAM)\nfile as input.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>pam_files</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><dl class=\"first last docutils\">\n<dt>Path to the peaks and metrics files. This path may contain</dt>\n<dd><p class=\"first last\">wildcards to use multiple masks at once.</p>\n</dd>\n</dl>\n</dd>\n<dt><strong>stopping_files</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">Path of FA or other images used for stopping criteria for tracking.</p>\n</dd>\n<dt><strong>seeding_files</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">A binary image showing where we need to seed for tracking.</p>\n</dd>\n<dt><strong>stopping_thr</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float, optional</span></dt>\n<dd><dl class=\"first last docutils\">\n<dt>Threshold applied to stopping volume\u2019s data to identify where</dt>\n<dd><p class=\"first last\">tracking has to stop (default 0.25).</p>\n</dd>\n</dl>\n</dd>\n<dt><strong>seed_density</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int, optional</span></dt>\n<dd><dl class=\"first last docutils\">\n<dt>Number of seeds per dimension inside voxel (default 1).</dt>\n<dd><p class=\"first last\">For example, seed_density of 2 means 8 regularly distributed points\nin the voxel. And seed density of 1 means 1 point at the center\nof the voxel.</p>\n</dd>\n</dl>\n</dd>\n<dt><strong>use_sh</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool, optional</span></dt>\n<dd><dl class=\"first last docutils\">\n<dt>Use spherical harmonics saved in peaks to find the</dt>\n<dd><p class=\"first last\">maximum peak cone. (default False)</p>\n</dd>\n</dl>\n</dd>\n<dt><strong>out_dir</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Output directory (default input file directory)</p>\n</dd>\n<dt><strong>out_tractogram</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the tractogram file to be saved (default \u2018tractogram.trk\u2019)</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">References</p>\n<p>Garyfallidis, University of Cambridge, PhD thesis 2012.\nAmirbekian, University of California San Francisco, PhD thesis 2017.</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"deterministicmaximumdirectiongetter\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.tracking.DeterministicMaximumDirectionGetter\" title=\"dipy.workflows.tracking.DeterministicMaximumDirectionGetter\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DeterministicMaximumDirectionGetter</span></code></a><a class=\"headerlink\" href=\"#deterministicmaximumdirectiongetter\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.tracking.DeterministicMaximumDirectionGetter\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.tracking.</code><code class=\"descname\">DeterministicMaximumDirectionGetter</code><a class=\"headerlink\" href=\"#dipy.workflows.tracking.DeterministicMaximumDirectionGetter\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.direction.probabilistic_direction_getter.ProbabilisticDirectionGetter</span></code></p>\n<p>Return direction of a sphere with the highest probability mass\nfunction (pmf).</p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">from_pmf</span></code></td>\n<td>Constructor for making a DirectionGetter from an array of Pmfs</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">from_shcoeff</span></code></td>\n<td>Probabilistic direction getter from a distribution of directions on the sphere</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">initial_direction</span></code></td>\n<td>Returns best directions at seed location to start tracking.</td>\n</tr>\n</tbody>\n</table>\n<table border=\"1\" class=\"docutils\">\n<colgroup>\n<col width=\"63%\" />\n<col width=\"37%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><strong>get_direction</strong></td>\n<td>&#160;</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.tracking.DeterministicMaximumDirectionGetter.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>$self</em>, <em>/</em>, <em>*args</em>, <em>**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.DeterministicMaximumDirectionGetter.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize self.  See help(type(self)) for accurate signature.</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"generictrackflow\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.tracking.GenericTrackFlow\" title=\"dipy.workflows.tracking.GenericTrackFlow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">GenericTrackFlow</span></code></a><a class=\"headerlink\" href=\"#generictrackflow\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.tracking.GenericTrackFlow\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.tracking.</code><code class=\"descname\">GenericTrackFlow</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.GenericTrackFlow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow\" title=\"dipy.workflows.workflow.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.workflows.workflow.Workflow</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code>()</td>\n<td>Create an iterator for IO.</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code>()</td>\n<td>Return A short name for the workflow used to subdivide.</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code>()</td>\n<td>Return No sub runs since this is a simple workflow.</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code>()</td>\n<td>Check if a file will be overwritten upon processing the inputs.</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code>(*args,&nbsp;**kwargs)</td>\n<td>Execute the workflow.</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.tracking.GenericTrackFlow.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.GenericTrackFlow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"localtracking\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.tracking.LocalTracking\" title=\"dipy.workflows.tracking.LocalTracking\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">LocalTracking</span></code></a><a class=\"headerlink\" href=\"#localtracking\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.tracking.LocalTracking\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.tracking.</code><code class=\"descname\">LocalTracking</code><span class=\"sig-paren\">(</span><em>direction_getter</em>, <em>tissue_classifier</em>, <em>seeds</em>, <em>affine</em>, <em>step_size</em>, <em>max_cross=None</em>, <em>maxlen=500</em>, <em>fixedstep=True</em>, <em>return_all=True</em>, <em>random_seed=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.LocalTracking\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.7)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.tracking.LocalTracking.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>direction_getter</em>, <em>tissue_classifier</em>, <em>seeds</em>, <em>affine</em>, <em>step_size</em>, <em>max_cross=None</em>, <em>maxlen=500</em>, <em>fixedstep=True</em>, <em>return_all=True</em>, <em>random_seed=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.LocalTracking.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Creates streamlines by using local fiber-tracking.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>direction_getter</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">instance of DirectionGetter</span></dt>\n<dd><p class=\"first last\">Used to get directions for fiber tracking.</p>\n</dd>\n<dt><strong>tissue_classifier</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">instance of TissueClassifier</span></dt>\n<dd><p class=\"first last\">Identifies endpoints and invalid points to inform tracking.</p>\n</dd>\n<dt><strong>seeds</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array (N, 3)</span></dt>\n<dd><p class=\"first last\">Points to seed the tracking. Seed points should be given in point\nspace of the track (see <code class=\"docutils literal notranslate\"><span class=\"pre\">affine</span></code>).</p>\n</dd>\n<dt><strong>affine</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array (4, 4)</span></dt>\n<dd><p class=\"first last\">Coordinate space for the streamline point with respect to voxel\nindices of input data. This affine can contain scaling, rotational,\nand translational components but should not contain any shearing.\nAn identity matrix can be used to generate streamlines in \u201cvoxel\ncoordinates\u201d as long as isotropic voxels were used to acquire the\ndata.</p>\n</dd>\n<dt><strong>step_size</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float</span></dt>\n<dd><p class=\"first last\">Step size used for tracking.</p>\n</dd>\n<dt><strong>max_cross</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int or None</span></dt>\n<dd><p class=\"first last\">The maximum number of direction to track from each seed in crossing\nvoxels. By default all initial directions are tracked.</p>\n</dd>\n<dt><strong>maxlen</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int</span></dt>\n<dd><p class=\"first last\">Maximum number of steps to track from seed. Used to prevent\ninfinite loops.</p>\n</dd>\n<dt><strong>fixedstep</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool</span></dt>\n<dd><p class=\"first last\">If true, a fixed stepsize is used, otherwise a variable step size\nis used.</p>\n</dd>\n<dt><strong>return_all</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool</span></dt>\n<dd><p class=\"first last\">If true, return all generated streamlines, otherwise only\nstreamlines reaching end points or exiting the image.</p>\n</dd>\n<dt><strong>random_seed</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int</span></dt>\n<dd><p class=\"first last\">The seed for the random seed generator (numpy.random.seed and\nrandom.seed).</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"thresholdtissueclassifier\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.tracking.ThresholdTissueClassifier\" title=\"dipy.workflows.tracking.ThresholdTissueClassifier\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ThresholdTissueClassifier</span></code></a><a class=\"headerlink\" href=\"#thresholdtissueclassifier\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.tracking.ThresholdTissueClassifier\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.tracking.</code><code class=\"descname\">ThresholdTissueClassifier</code><a class=\"headerlink\" href=\"#dipy.workflows.tracking.ThresholdTissueClassifier\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.tracking.local.tissue_classifier.TissueClassifier</span></code></p>\n<p># Declarations from tissue_classifier.pxd bellow\ncdef:</p>\n<blockquote>\n<div>double threshold, interp_out_double[1]\ndouble[:]  interp_out_view = interp_out_view\ndouble[:, :, :] metric_map</div></blockquote>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"docutils\">\n<colgroup>\n<col width=\"60%\" />\n<col width=\"40%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><strong>check_point</strong></td>\n<td>&#160;</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.tracking.ThresholdTissueClassifier.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>$self</em>, <em>/</em>, <em>*args</em>, <em>**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.ThresholdTissueClassifier.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize self.  See help(type(self)) for accurate signature.</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"tractogram\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.tracking.Tractogram\" title=\"dipy.workflows.tracking.Tractogram\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Tractogram</span></code></a><a class=\"headerlink\" href=\"#tractogram\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.tracking.Tractogram\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.tracking.</code><code class=\"descname\">Tractogram</code><span class=\"sig-paren\">(</span><em>streamlines=None</em>, <em>data_per_streamline=None</em>, <em>data_per_point=None</em>, <em>affine_to_rasmm=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.Tractogram\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.7)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p>Container for streamlines and their data information.</p>\n<p>Streamlines of a tractogram can be in any coordinate system of your\nchoice as long as you provide the correct <cite>affine_to_rasmm</cite> matrix, at\nconstruction time. When applied to streamlines coordinates, that\ntransformation matrix should bring the streamlines back to world space\n(RAS+ and mm space) <a href=\"#id133\"><span class=\"problematic\" id=\"id125\">[1]_</span></a>.</p>\n<p>Moreover, when streamlines are mapped back to voxel space <a href=\"#id134\"><span class=\"problematic\" id=\"id126\">[2]_</span></a>, a\nstreamline point located at an integer coordinate (i,j,k) is considered\nto be at the center of the corresponding voxel. This is in contrast with\nother conventions where it might have referred to a corner.</p>\n<p class=\"rubric\">References</p>\n<p>[1] <a class=\"reference external\" href=\"http://nipy.org/nibabel/coordinate_systems.html#naming-reference-spaces\">http://nipy.org/nibabel/coordinate_systems.html#naming-reference-spaces</a>\n[2] <a class=\"reference external\" href=\"http://nipy.org/nibabel/coordinate_systems.html#voxel-coordinates-are-in-voxel-space\">http://nipy.org/nibabel/coordinate_systems.html#voxel-coordinates-are-in-voxel-space</a></p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Attributes:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>streamlines</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ArraySequence</span></code> object</span></dt>\n<dd><p class=\"first last\">Sequence of <span class=\"math notranslate nohighlight\">\\(T\\)</span> streamlines. Each streamline is an ndarray of\nshape (<span class=\"math notranslate nohighlight\">\\(N_t\\)</span>, 3) where <span class=\"math notranslate nohighlight\">\\(N_t\\)</span> is the number of points of\nstreamline <span class=\"math notranslate nohighlight\">\\(t\\)</span>.</p>\n</dd>\n<dt><strong>data_per_streamline</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">PerArrayDict</span></code> object</span></dt>\n<dd><p class=\"first last\">Dictionary where the items are (str, 2D array).  Each key represents a\npiece of information <span class=\"math notranslate nohighlight\">\\(i\\)</span> to be kept alongside every streamline, and its\nassociated value is a 2D array of shape (<span class=\"math notranslate nohighlight\">\\(T\\)</span>, <span class=\"math notranslate nohighlight\">\\(P_i\\)</span>) where <span class=\"math notranslate nohighlight\">\\(T\\)</span> is the\nnumber of streamlines and <span class=\"math notranslate nohighlight\">\\(P_i\\)</span> is the number of values to store for\nthat particular piece of information <span class=\"math notranslate nohighlight\">\\(i\\)</span>.</p>\n</dd>\n<dt><strong>data_per_point</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">PerArraySequenceDict</span></code> object</span></dt>\n<dd><p class=\"first last\">Dictionary where the items are (str, <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ArraySequence</span></code>).  Each key\nrepresents a piece of information <span class=\"math notranslate nohighlight\">\\(i\\)</span> to be kept alongside every point\nof every streamline, and its associated value is an iterable of\nndarrays of shape (<span class=\"math notranslate nohighlight\">\\(N_t\\)</span>, <span class=\"math notranslate nohighlight\">\\(M_i\\)</span>) where <span class=\"math notranslate nohighlight\">\\(N_t\\)</span> is the number of points\nfor a particular streamline <span class=\"math notranslate nohighlight\">\\(t\\)</span> and <span class=\"math notranslate nohighlight\">\\(M_i\\)</span> is the number values to store\nfor that particular piece of information <span class=\"math notranslate nohighlight\">\\(i\\)</span>.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.tracking.Tractogram.apply_affine\" title=\"dipy.workflows.tracking.Tractogram.apply_affine\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">apply_affine</span></code></a>(affine[,&nbsp;lazy])</td>\n<td>Applies an affine transformation on the points of each streamline.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.tracking.Tractogram.copy\" title=\"dipy.workflows.tracking.Tractogram.copy\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">copy</span></code></a>()</td>\n<td>Returns a copy of this <a class=\"reference internal\" href=\"#dipy.workflows.tracking.Tractogram\" title=\"dipy.workflows.tracking.Tractogram\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Tractogram</span></code></a> object.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.tracking.Tractogram.extend\" title=\"dipy.workflows.tracking.Tractogram.extend\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">extend</span></code></a>(other)</td>\n<td>Appends the data of another <a class=\"reference internal\" href=\"#dipy.workflows.tracking.Tractogram\" title=\"dipy.workflows.tracking.Tractogram\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Tractogram</span></code></a>.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.tracking.Tractogram.to_world\" title=\"dipy.workflows.tracking.Tractogram.to_world\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">to_world</span></code></a>([lazy])</td>\n<td>Brings the streamlines to world space (i.e.</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.tracking.Tractogram.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>streamlines=None</em>, <em>data_per_streamline=None</em>, <em>data_per_point=None</em>, <em>affine_to_rasmm=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.Tractogram.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>streamlines</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">iterable of ndarrays or <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ArraySequence</span></code>, optional</span></dt>\n<dd><p class=\"first last\">Sequence of <span class=\"math notranslate nohighlight\">\\(T\\)</span> streamlines. Each streamline is an ndarray of\nshape (<span class=\"math notranslate nohighlight\">\\(N_t\\)</span>, 3) where <span class=\"math notranslate nohighlight\">\\(N_t\\)</span> is the number of points of\nstreamline <span class=\"math notranslate nohighlight\">\\(t\\)</span>.</p>\n</dd>\n<dt><strong>data_per_streamline</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">dict of iterable of ndarrays, optional</span></dt>\n<dd><p class=\"first last\">Dictionary where the items are (str, iterable).\nEach key represents an information <span class=\"math notranslate nohighlight\">\\(i\\)</span> to be kept alongside every\nstreamline, and its associated value is an iterable of ndarrays of\nshape (<span class=\"math notranslate nohighlight\">\\(P_i\\)</span>,) where <span class=\"math notranslate nohighlight\">\\(P_i\\)</span> is the number of scalar values to store\nfor that particular information <span class=\"math notranslate nohighlight\">\\(i\\)</span>.</p>\n</dd>\n<dt><strong>data_per_point</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">dict of iterable of ndarrays, optional</span></dt>\n<dd><p class=\"first last\">Dictionary where the items are (str, iterable).\nEach key represents an information <span class=\"math notranslate nohighlight\">\\(i\\)</span> to be kept alongside every\npoint of every streamline, and its associated value is an iterable\nof ndarrays of shape (<span class=\"math notranslate nohighlight\">\\(N_t\\)</span>, <span class=\"math notranslate nohighlight\">\\(M_i\\)</span>) where <span class=\"math notranslate nohighlight\">\\(N_t\\)</span> is the number of\npoints for a particular streamline <span class=\"math notranslate nohighlight\">\\(t\\)</span> and <span class=\"math notranslate nohighlight\">\\(M_i\\)</span> is the number\nscalar values to store for that particular information <span class=\"math notranslate nohighlight\">\\(i\\)</span>.</p>\n</dd>\n<dt><strong>affine_to_rasmm</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">ndarray of shape (4, 4) or None, optional</span></dt>\n<dd><p class=\"first last\">Transformation matrix that brings the streamlines contained in\nthis tractogram to <em>RAS+</em> and <em>mm</em> space where coordinate (0,0,0)\nrefers to the center of the voxel. By default, the streamlines\nare in an unknown space, i.e. affine_to_rasmm is None.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.workflows.tracking.Tractogram.affine_to_rasmm\">\n<code class=\"descname\">affine_to_rasmm</code><a class=\"headerlink\" href=\"#dipy.workflows.tracking.Tractogram.affine_to_rasmm\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Affine bringing streamlines in this tractogram to RAS+mm.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.tracking.Tractogram.apply_affine\">\n<code class=\"descname\">apply_affine</code><span class=\"sig-paren\">(</span><em>affine</em>, <em>lazy=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.Tractogram.apply_affine\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Applies an affine transformation on the points of each streamline.</p>\n<p>If <cite>lazy</cite> is not specified, this is performed <em>in-place</em>.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>affine</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">ndarray of shape (4, 4)</span></dt>\n<dd><p class=\"first last\">Transformation that will be applied to every streamline.</p>\n</dd>\n<dt><strong>lazy</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">{False, True}, optional</span></dt>\n<dd><p class=\"first last\">If True, streamlines are <em>not</em> transformed in-place and a\n<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">LazyTractogram</span></code> object is returned. Otherwise, streamlines\nare modified in-place.</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>tractogram</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\"><a class=\"reference internal\" href=\"#dipy.workflows.tracking.Tractogram\" title=\"dipy.workflows.tracking.Tractogram\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Tractogram</span></code></a> or <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">LazyTractogram</span></code> object</span></dt>\n<dd><p class=\"first last\">Tractogram where the streamlines have been transformed according\nto the given affine transformation. If the <cite>lazy</cite> option is true,\nit returns a <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">LazyTractogram</span></code> object, otherwise it returns a\nreference to this <a class=\"reference internal\" href=\"#dipy.workflows.tracking.Tractogram\" title=\"dipy.workflows.tracking.Tractogram\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Tractogram</span></code></a> object with updated\nstreamlines.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.tracking.Tractogram.copy\">\n<code class=\"descname\">copy</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.Tractogram.copy\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns a copy of this <a class=\"reference internal\" href=\"#dipy.workflows.tracking.Tractogram\" title=\"dipy.workflows.tracking.Tractogram\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Tractogram</span></code></a> object.</p>\n</dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.workflows.tracking.Tractogram.data_per_point\">\n<code class=\"descname\">data_per_point</code><a class=\"headerlink\" href=\"#dipy.workflows.tracking.Tractogram.data_per_point\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.workflows.tracking.Tractogram.data_per_streamline\">\n<code class=\"descname\">data_per_streamline</code><a class=\"headerlink\" href=\"#dipy.workflows.tracking.Tractogram.data_per_streamline\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.tracking.Tractogram.extend\">\n<code class=\"descname\">extend</code><span class=\"sig-paren\">(</span><em>other</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.Tractogram.extend\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Appends the data of another <a class=\"reference internal\" href=\"#dipy.workflows.tracking.Tractogram\" title=\"dipy.workflows.tracking.Tractogram\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Tractogram</span></code></a>.</p>\n<p>Data that will be appended includes the streamlines and the content\nof both dictionaries <cite>data_per_streamline</cite> and <cite>data_per_point</cite>.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>other</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\"><a class=\"reference internal\" href=\"#dipy.workflows.tracking.Tractogram\" title=\"dipy.workflows.tracking.Tractogram\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Tractogram</span></code></a> object</span></dt>\n<dd><p class=\"first last\">Its data will be appended to the data of this tractogram.</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>None</strong></dt>\n<dd></dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Notes</p>\n<p>The entries in both dictionaries <cite>self.data_per_streamline</cite> and\n<cite>self.data_per_point</cite> must match respectively those contained in\nthe other tractogram.</p>\n</dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.workflows.tracking.Tractogram.streamlines\">\n<code class=\"descname\">streamlines</code><a class=\"headerlink\" href=\"#dipy.workflows.tracking.Tractogram.streamlines\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.tracking.Tractogram.to_world\">\n<code class=\"descname\">to_world</code><span class=\"sig-paren\">(</span><em>lazy=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.Tractogram.to_world\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Brings the streamlines to world space (i.e. RAS+ and mm).</p>\n<p>If <cite>lazy</cite> is not specified, this is performed <em>in-place</em>.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>lazy</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">{False, True}, optional</span></dt>\n<dd><p class=\"first last\">If True, streamlines are <em>not</em> transformed in-place and a\n<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">LazyTractogram</span></code> object is returned. Otherwise, streamlines\nare modified in-place.</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>tractogram</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\"><a class=\"reference internal\" href=\"#dipy.workflows.tracking.Tractogram\" title=\"dipy.workflows.tracking.Tractogram\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Tractogram</span></code></a> or <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">LazyTractogram</span></code> object</span></dt>\n<dd><p class=\"first last\">Tractogram where the streamlines have been sent to world space.\nIf the <cite>lazy</cite> option is true, it returns a <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">LazyTractogram</span></code>\nobject, otherwise it returns a reference to this\n<a class=\"reference internal\" href=\"#dipy.workflows.tracking.Tractogram\" title=\"dipy.workflows.tracking.Tractogram\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Tractogram</span></code></a> object with updated streamlines.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id127\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.tracking.Workflow\" title=\"dipy.workflows.tracking.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a><a class=\"headerlink\" href=\"#id127\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.tracking.Workflow\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.tracking.</code><code class=\"descname\">Workflow</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.Workflow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.7)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.tracking.Workflow.get_io_iterator\" title=\"dipy.workflows.tracking.Workflow.get_io_iterator\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code></a>()</td>\n<td>Create an iterator for IO.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.tracking.Workflow.get_short_name\" title=\"dipy.workflows.tracking.Workflow.get_short_name\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code></a>()</td>\n<td>Return A short name for the workflow used to subdivide.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.tracking.Workflow.get_sub_runs\" title=\"dipy.workflows.tracking.Workflow.get_sub_runs\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code></a>()</td>\n<td>Return No sub runs since this is a simple workflow.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.tracking.Workflow.manage_output_overwrite\" title=\"dipy.workflows.tracking.Workflow.manage_output_overwrite\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code></a>()</td>\n<td>Check if a file will be overwritten upon processing the inputs.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.tracking.Workflow.run\" title=\"dipy.workflows.tracking.Workflow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(*args,&nbsp;**kwargs)</td>\n<td>Execute the workflow.</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.tracking.Workflow.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.Workflow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.tracking.Workflow.get_io_iterator\">\n<code class=\"descname\">get_io_iterator</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.Workflow.get_io_iterator\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Create an iterator for IO.</p>\n<p>Use a couple of inspection tricks to build an IOIterator using the\nprevious frame (values of local variables and other contextuals) and\nthe run method\u2019s docstring.</p>\n</dd></dl>\n\n<dl class=\"classmethod\">\n<dt id=\"dipy.workflows.tracking.Workflow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.Workflow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return A short name for the workflow used to subdivide.</p>\n<p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name.</p>\n<p>For example, a combined workflow with dti reconstruction and csd\nreconstruction might en up with the b0_threshold parameter. Using short\nnames, we will have dti.b0_threshold and csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.tracking.Workflow.get_sub_runs\">\n<code class=\"descname\">get_sub_runs</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.Workflow.get_sub_runs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return No sub runs since this is a simple workflow.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.tracking.Workflow.manage_output_overwrite\">\n<code class=\"descname\">manage_output_overwrite</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.Workflow.manage_output_overwrite\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Check if a file will be overwritten upon processing the inputs.</p>\n<p>If it is bound to happen, an action is taken depending on\nself._force_overwrite (or \u2013force via command line). A log message is\noutput independently of the outcome to tell the user something\nhappened.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.tracking.Workflow.run\">\n<code class=\"descname\">run</code><span class=\"sig-paren\">(</span><em>*args</em>, <em>**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.Workflow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Execute the workflow.</p>\n<p>Since this is an abstract class, raise exception if this code is\nreached (not impletemented in child class or literally called on this\nclass)</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id128\">\n<h3>load_nifti<a class=\"headerlink\" href=\"#id128\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.tracking.load_nifti\">\n<code class=\"descclassname\">dipy.workflows.tracking.</code><code class=\"descname\">load_nifti</code><span class=\"sig-paren\">(</span><em>fname</em>, <em>return_img=False</em>, <em>return_voxsize=False</em>, <em>return_coords=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.load_nifti\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</div>\n<div class=\"section\" id=\"load-peaks\">\n<h3>load_peaks<a class=\"headerlink\" href=\"#load-peaks\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.tracking.load_peaks\">\n<code class=\"descclassname\">dipy.workflows.tracking.</code><code class=\"descname\">load_peaks</code><span class=\"sig-paren\">(</span><em>fname</em>, <em>verbose=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.load_peaks\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Load a PeaksAndMetrics HDF5 file (PAM5)</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>fname</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">Filename of PAM5 file.</p>\n</dd>\n<dt><strong>verbose</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool</span></dt>\n<dd><p class=\"first last\">Print summary information about the loaded file.</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>pam</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">PeaksAndMetrics object</span></dt>\n<dd></dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"save\">\n<h3>save<a class=\"headerlink\" href=\"#save\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.tracking.save\">\n<code class=\"descclassname\">dipy.workflows.tracking.</code><code class=\"descname\">save</code><span class=\"sig-paren\">(</span><em>tractogram</em>, <em>filename</em>, <em>**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.save\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Saves a tractogram to a file.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>tractogram</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\"><a class=\"reference internal\" href=\"#dipy.workflows.tracking.Tractogram\" title=\"dipy.workflows.tracking.Tractogram\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Tractogram</span></code></a> object or <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TractogramFile</span></code> object</span></dt>\n<dd><p class=\"first last\">If <a class=\"reference internal\" href=\"#dipy.workflows.tracking.Tractogram\" title=\"dipy.workflows.tracking.Tractogram\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Tractogram</span></code></a> object, the file format will be guessed from\n<cite>filename</cite> and a <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TractogramFile</span></code> object will be created using\nprovided keyword arguments.\nIf <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TractogramFile</span></code> object, the file format is known and will\nbe used to save its content to <cite>filename</cite>.</p>\n</dd>\n<dt><strong>filename</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">str</span></dt>\n<dd><p class=\"first last\">Name of the file where the tractogram will be saved.</p>\n</dd>\n<dt><strong>**kwargs</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">keyword arguments</span></dt>\n<dd><p class=\"first last\">Keyword arguments passed to <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TractogramFile</span></code> constructor.\nShould not be specified if <cite>tractogram</cite> is already an instance of\n<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TractogramFile</span></code>.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id129\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow\" title=\"dipy.workflows.workflow.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a><a class=\"headerlink\" href=\"#id129\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.workflow.Workflow\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.workflow.</code><code class=\"descname\">Workflow</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.workflow.Workflow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.7)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow.get_io_iterator\" title=\"dipy.workflows.workflow.Workflow.get_io_iterator\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code></a>()</td>\n<td>Create an iterator for IO.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow.get_short_name\" title=\"dipy.workflows.workflow.Workflow.get_short_name\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code></a>()</td>\n<td>Return A short name for the workflow used to subdivide.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow.get_sub_runs\" title=\"dipy.workflows.workflow.Workflow.get_sub_runs\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code></a>()</td>\n<td>Return No sub runs since this is a simple workflow.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow.manage_output_overwrite\" title=\"dipy.workflows.workflow.Workflow.manage_output_overwrite\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code></a>()</td>\n<td>Check if a file will be overwritten upon processing the inputs.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow.run\" title=\"dipy.workflows.workflow.Workflow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(*args,&nbsp;**kwargs)</td>\n<td>Execute the workflow.</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.workflow.Workflow.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.workflow.Workflow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.workflow.Workflow.get_io_iterator\">\n<code class=\"descname\">get_io_iterator</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.workflow.Workflow.get_io_iterator\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Create an iterator for IO.</p>\n<p>Use a couple of inspection tricks to build an IOIterator using the\nprevious frame (values of local variables and other contextuals) and\nthe run method\u2019s docstring.</p>\n</dd></dl>\n\n<dl class=\"classmethod\">\n<dt id=\"dipy.workflows.workflow.Workflow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.workflow.Workflow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return A short name for the workflow used to subdivide.</p>\n<p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name.</p>\n<p>For example, a combined workflow with dti reconstruction and csd\nreconstruction might en up with the b0_threshold parameter. Using short\nnames, we will have dti.b0_threshold and csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.workflow.Workflow.get_sub_runs\">\n<code class=\"descname\">get_sub_runs</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.workflow.Workflow.get_sub_runs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return No sub runs since this is a simple workflow.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.workflow.Workflow.manage_output_overwrite\">\n<code class=\"descname\">manage_output_overwrite</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.workflow.Workflow.manage_output_overwrite\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Check if a file will be overwritten upon processing the inputs.</p>\n<p>If it is bound to happen, an action is taken depending on\nself._force_overwrite (or \u2013force via command line). A log message is\noutput independently of the outcome to tell the user something\nhappened.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.workflow.Workflow.run\">\n<code class=\"descname\">run</code><span class=\"sig-paren\">(</span><em>*args</em>, <em>**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.workflow.Workflow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Execute the workflow.</p>\n<p>Since this is an abstract class, raise exception if this code is\nreached (not impletemented in child class or literally called on this\nclass)</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id130\">\n<h3><a href=\"#id135\"><span class=\"problematic\" id=\"id136\">io_iterator_</span></a><a class=\"headerlink\" href=\"#id130\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.workflow.io_iterator_\">\n<code class=\"descclassname\">dipy.workflows.workflow.</code><code class=\"descname\">io_iterator_</code><span class=\"sig-paren\">(</span><em>frame</em>, <em>fnc</em>, <em>output_strategy='absolute'</em>, <em>mix_names=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.workflow.io_iterator_\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Creates an IOIterator using introspection.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>frame</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">frameobject</span></dt>\n<dd><blockquote class=\"first\">\n<div><p>Contains the info about the current local variables values.</p>\n</div></blockquote>\n<dl class=\"last docutils\">\n<dt>fnc <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">function</span></dt>\n<dd><p class=\"first last\">The function to inspect</p>\n</dd>\n<dt>output_strategy <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">Controls the behavior of the IOIterator for output paths.</p>\n</dd>\n<dt>mix_names <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool</span></dt>\n<dd><p class=\"first last\">Whether or not to append a mix of input names at the beginning.</p>\n</dd>\n</dl>\n</dd>\n<dt><strong>Returns</strong></dt>\n<dd></dd>\n<dt><strong>\u2014\u2014-</strong></dt>\n<dd><p class=\"first last\">Properly instantiated IOIterator object.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["reference/dipy.viz", "<code class=\"docutils literal notranslate\"><span class=\"pre\">viz</span></code>", "P", "previous"]], "sourcename": "reference/dipy.workflows.rst.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\"><code class=\"docutils literal notranslate\"><span class=\"pre\">workflows</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#module-dipy.workflows.align\">Module: <code class=\"docutils literal notranslate\"><span class=\"pre\">workflows.align</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.workflows.base\">Module: <code class=\"docutils literal notranslate\"><span class=\"pre\">workflows.base</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.workflows.combined_workflow\">Module: <code class=\"docutils literal notranslate\"><span class=\"pre\">workflows.combined_workflow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.workflows.denoise\">Module: <code class=\"docutils literal notranslate\"><span class=\"pre\">workflows.denoise</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.workflows.docstring_parser\">Module: <code class=\"docutils literal notranslate\"><span class=\"pre\">workflows.docstring_parser</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.workflows.flow_runner\">Module: <code class=\"docutils literal notranslate\"><span class=\"pre\">workflows.flow_runner</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.workflows.io\">Module: <code class=\"docutils literal notranslate\"><span class=\"pre\">workflows.io</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.workflows.mask\">Module: <code class=\"docutils literal notranslate\"><span class=\"pre\">workflows.mask</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.workflows.multi_io\">Module: <code class=\"docutils literal notranslate\"><span class=\"pre\">workflows.multi_io</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.workflows.reconst\">Module: <code class=\"docutils literal notranslate\"><span class=\"pre\">workflows.reconst</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.workflows.segment\">Module: <code class=\"docutils literal notranslate\"><span class=\"pre\">workflows.segment</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.workflows.stats\">Module: <code class=\"docutils literal notranslate\"><span class=\"pre\">workflows.stats</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.workflows.tracking\">Module: <code class=\"docutils literal notranslate\"><span class=\"pre\">workflows.tracking</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.workflows.workflow\">Module: <code class=\"docutils literal notranslate\"><span class=\"pre\">workflows.workflow</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#resliceflow\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ResliceFlow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#slrwithqbxflow\"><code class=\"docutils literal notranslate\"><span class=\"pre\">SlrWithQbxFlow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#workflow\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#load-nifti\">load_nifti</a></li>\n<li><a class=\"reference internal\" href=\"#load-trk\">load_trk</a></li>\n<li><a class=\"reference internal\" href=\"#reslice\">reslice</a></li>\n<li><a class=\"reference internal\" href=\"#save-nifti\">save_nifti</a></li>\n<li><a class=\"reference internal\" href=\"#slr-with-qbx\">slr_with_qbx</a></li>\n<li><a class=\"reference internal\" href=\"#transform-streamlines\">transform_streamlines</a></li>\n<li><a class=\"reference internal\" href=\"#introspectiveargumentparser\"><code class=\"docutils literal notranslate\"><span class=\"pre\">IntrospectiveArgumentParser</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#numpydocstring\"><code class=\"docutils literal notranslate\"><span class=\"pre\">NumpyDocString</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#get-args-default\">get_args_default</a></li>\n<li><a class=\"reference internal\" href=\"#combinedworkflow\"><code class=\"docutils literal notranslate\"><span class=\"pre\">CombinedWorkflow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#id18\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#iteritems\">iteritems</a></li>\n<li><a class=\"reference internal\" href=\"#nlmeansflow\"><code class=\"docutils literal notranslate\"><span class=\"pre\">NLMeansFlow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#id19\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#estimate-sigma\">estimate_sigma</a></li>\n<li><a class=\"reference internal\" href=\"#id20\">load_nifti</a></li>\n<li><a class=\"reference internal\" href=\"#nlmeans\">nlmeans</a></li>\n<li><a class=\"reference internal\" href=\"#id22\">save_nifti</a></li>\n<li><a class=\"reference internal\" href=\"#id23\"><code class=\"docutils literal notranslate\"><span class=\"pre\">NumpyDocString</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#reader\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Reader</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dedent-lines\">dedent_lines</a></li>\n<li><a class=\"reference internal\" href=\"#warn\">warn</a></li>\n<li><a class=\"reference internal\" href=\"#id24\"><code class=\"docutils literal notranslate\"><span class=\"pre\">IntrospectiveArgumentParser</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#get-level\">get_level</a></li>\n<li><a class=\"reference internal\" href=\"#id25\">iteritems</a></li>\n<li><a class=\"reference internal\" href=\"#run-flow\">run_flow</a></li>\n<li><a class=\"reference internal\" href=\"#ioinfoflow\"><code class=\"docutils literal notranslate\"><span class=\"pre\">IoInfoFlow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#id26\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#id27\">load_nifti</a></li>\n<li><a class=\"reference internal\" href=\"#maskflow\"><code class=\"docutils literal notranslate\"><span class=\"pre\">MaskFlow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#id28\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#id29\">load_nifti</a></li>\n<li><a class=\"reference internal\" href=\"#id30\">save_nifti</a></li>\n<li><a class=\"reference internal\" href=\"#ioiterator\"><code class=\"docutils literal notranslate\"><span class=\"pre\">IOIterator</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#basename-without-extension\">basename_without_extension</a></li>\n<li><a class=\"reference internal\" href=\"#common-start\">common_start</a></li>\n<li><a class=\"reference internal\" href=\"#concatenate-inputs\">concatenate_inputs</a></li>\n<li><a class=\"reference internal\" href=\"#connect-output-paths\">connect_output_paths</a></li>\n<li><a class=\"reference internal\" href=\"#id31\">get_args_default</a></li>\n<li><a class=\"reference internal\" href=\"#glob\">glob</a></li>\n<li><a class=\"reference internal\" href=\"#io-iterator\">io_iterator</a></li>\n<li><a class=\"reference internal\" href=\"#id32\">io_iterator_</a></li>\n<li><a class=\"reference internal\" href=\"#slash-to-under\">slash_to_under</a></li>\n<li><a class=\"reference internal\" href=\"#constrainedsphericaldeconvmodel\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ConstrainedSphericalDeconvModel</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#csaodfmodel\"><code class=\"docutils literal notranslate\"><span class=\"pre\">CsaOdfModel</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#diffusionkurtosismodel\"><code class=\"docutils literal notranslate\"><span class=\"pre\">DiffusionKurtosisModel</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#reconstcsaflow\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ReconstCSAFlow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#reconstcsdflow\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ReconstCSDFlow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#reconstdkiflow\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ReconstDkiFlow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#reconstdtiflow\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ReconstDtiFlow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#reconstmapmriflow\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ReconstMAPMRIFlow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#tensormodel\"><code class=\"docutils literal notranslate\"><span class=\"pre\">TensorModel</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#id68\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#auto-response\">auto_response</a></li>\n<li><a class=\"reference internal\" href=\"#axial-diffusivity\">axial_diffusivity</a></li>\n<li><a class=\"reference internal\" href=\"#color-fa\">color_fa</a></li>\n<li><a class=\"reference internal\" href=\"#fractional-anisotropy\">fractional_anisotropy</a></li>\n<li><a class=\"reference internal\" href=\"#geodesic-anisotropy\">geodesic_anisotropy</a></li>\n<li><a class=\"reference internal\" href=\"#get-mode\">get_mode</a></li>\n<li><a class=\"reference internal\" href=\"#get-sphere\">get_sphere</a></li>\n<li><a class=\"reference internal\" href=\"#gradient-table\">gradient_table</a></li>\n<li><a class=\"reference internal\" href=\"#literal-eval\">literal_eval</a></li>\n<li><a class=\"reference internal\" href=\"#id81\">load_nifti</a></li>\n<li><a class=\"reference internal\" href=\"#lower-triangular\">lower_triangular</a></li>\n<li><a class=\"reference internal\" href=\"#mean-diffusivity\">mean_diffusivity</a></li>\n<li><a class=\"reference internal\" href=\"#peaks-from-model\">peaks_from_model</a></li>\n<li><a class=\"reference internal\" href=\"#peaks-to-niftis\">peaks_to_niftis</a></li>\n<li><a class=\"reference internal\" href=\"#radial-diffusivity\">radial_diffusivity</a></li>\n<li><a class=\"reference internal\" href=\"#read-bvals-bvecs\">read_bvals_bvecs</a></li>\n<li><a class=\"reference internal\" href=\"#id86\">save_nifti</a></li>\n<li><a class=\"reference internal\" href=\"#save-peaks\">save_peaks</a></li>\n<li><a class=\"reference internal\" href=\"#split-dki-param\">split_dki_param</a></li>\n<li><a class=\"reference internal\" href=\"#id87\">warn</a></li>\n<li><a class=\"reference internal\" href=\"#labelsbundlesflow\"><code class=\"docutils literal notranslate\"><span class=\"pre\">LabelsBundlesFlow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#medianotsuflow\"><code class=\"docutils literal notranslate\"><span class=\"pre\">MedianOtsuFlow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#recobundles\"><code class=\"docutils literal notranslate\"><span class=\"pre\">RecoBundles</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#recobundlesflow\"><code class=\"docutils literal notranslate\"><span class=\"pre\">RecoBundlesFlow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#id94\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#id95\">load_nifti</a></li>\n<li><a class=\"reference internal\" href=\"#id96\">load_trk</a></li>\n<li><a class=\"reference internal\" href=\"#median-otsu\">median_otsu</a></li>\n<li><a class=\"reference internal\" href=\"#id101\">save_nifti</a></li>\n<li><a class=\"reference internal\" href=\"#time\">time</a></li>\n<li><a class=\"reference internal\" href=\"#snrinccflow\"><code class=\"docutils literal notranslate\"><span class=\"pre\">SNRinCCFlow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#id102\"><code class=\"docutils literal notranslate\"><span class=\"pre\">TensorModel</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#id113\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#binary-dilation\">binary_dilation</a></li>\n<li><a class=\"reference internal\" href=\"#bounding-box\">bounding_box</a></li>\n<li><a class=\"reference internal\" href=\"#id118\">gradient_table</a></li>\n<li><a class=\"reference internal\" href=\"#id119\">load_nifti</a></li>\n<li><a class=\"reference internal\" href=\"#id120\">median_otsu</a></li>\n<li><a class=\"reference internal\" href=\"#id123\">read_bvals_bvecs</a></li>\n<li><a class=\"reference internal\" href=\"#id124\">save_nifti</a></li>\n<li><a class=\"reference internal\" href=\"#segment-from-cfa\">segment_from_cfa</a></li>\n<li><a class=\"reference internal\" href=\"#dettrackpamflow\"><code class=\"docutils literal notranslate\"><span class=\"pre\">DetTrackPAMFlow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#deterministicmaximumdirectiongetter\"><code class=\"docutils literal notranslate\"><span class=\"pre\">DeterministicMaximumDirectionGetter</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#generictrackflow\"><code class=\"docutils literal notranslate\"><span class=\"pre\">GenericTrackFlow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#localtracking\"><code class=\"docutils literal notranslate\"><span class=\"pre\">LocalTracking</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#thresholdtissueclassifier\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ThresholdTissueClassifier</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#tractogram\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Tractogram</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#id127\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#id128\">load_nifti</a></li>\n<li><a class=\"reference internal\" href=\"#load-peaks\">load_peaks</a></li>\n<li><a class=\"reference internal\" href=\"#save\">save</a></li>\n<li><a class=\"reference internal\" href=\"#id129\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#id130\">io_iterator_</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".rst", "current_page_name": "reference/dipy.workflows", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.11"}