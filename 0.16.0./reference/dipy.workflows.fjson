{"parents": [{"link": "../../documentation/", "title": "Documentation"}, {"link": "../", "title": "API Reference"}], "prev": {"link": "../dipy.viz/", "title": "<code class=\"docutils literal notranslate\"><span class=\"pre\">viz</span></code>"}, "next": null, "title": "<code class=\"docutils literal notranslate\"><span class=\"pre\">workflows</span></code>", "meta": {}, "body": "<div class=\"section\" id=\"module-dipy.workflows\">\n<span id=\"workflows\"></span><h1><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">workflows</span></code><a class=\"headerlink\" href=\"#module-dipy.workflows\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n</tbody>\n</table>\n<div class=\"section\" id=\"module-dipy.workflows.align\">\n<span id=\"module-workflows-align\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">workflows.align</span></code><a class=\"headerlink\" href=\"#module-dipy.workflows.align\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.AffineMap\" title=\"dipy.workflows.align.AffineMap\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">AffineMap</span></code></a>(affine[,&nbsp;domain_grid_shape,&nbsp;\u2026])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.AffineRegistration\" title=\"dipy.workflows.align.AffineRegistration\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">AffineRegistration</span></code></a>([metric,&nbsp;level_iters,&nbsp;\u2026])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.AffineTransform3D\" title=\"dipy.workflows.align.AffineTransform3D\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">AffineTransform3D</span></code></a></td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.ApplyTransformFlow\" title=\"dipy.workflows.align.ApplyTransformFlow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">ApplyTransformFlow</span></code></a>([output_strategy,&nbsp;\u2026])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.CCMetric\" title=\"dipy.workflows.align.CCMetric\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">CCMetric</span></code></a>(dim[,&nbsp;sigma_diff,&nbsp;radius])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.DiffeomorphicMap\" title=\"dipy.workflows.align.DiffeomorphicMap\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">DiffeomorphicMap</span></code></a>(dim,&nbsp;disp_shape[,&nbsp;\u2026])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.EMMetric\" title=\"dipy.workflows.align.EMMetric\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">EMMetric</span></code></a>(dim[,&nbsp;smooth,&nbsp;inner_iter,&nbsp;\u2026])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.ImageRegistrationFlow\" title=\"dipy.workflows.align.ImageRegistrationFlow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">ImageRegistrationFlow</span></code></a>([output_strategy,&nbsp;\u2026])</td>\n<td>The registration workflow is organized as a collection of different functions.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.MutualInformationMetric\" title=\"dipy.workflows.align.MutualInformationMetric\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">MutualInformationMetric</span></code></a>([nbins,&nbsp;\u2026])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.ResliceFlow\" title=\"dipy.workflows.align.ResliceFlow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">ResliceFlow</span></code></a>([output_strategy,&nbsp;mix_names,&nbsp;\u2026])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.RigidTransform3D\" title=\"dipy.workflows.align.RigidTransform3D\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">RigidTransform3D</span></code></a></td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.SSDMetric\" title=\"dipy.workflows.align.SSDMetric\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">SSDMetric</span></code></a>(dim[,&nbsp;smooth,&nbsp;inner_iter,&nbsp;step_type])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.SlrWithQbxFlow\" title=\"dipy.workflows.align.SlrWithQbxFlow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">SlrWithQbxFlow</span></code></a>([output_strategy,&nbsp;mix_names,&nbsp;\u2026])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.SymmetricDiffeomorphicRegistration\" title=\"dipy.workflows.align.SymmetricDiffeomorphicRegistration\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">SymmetricDiffeomorphicRegistration</span></code></a>(metric[,&nbsp;\u2026])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.SynRegistrationFlow\" title=\"dipy.workflows.align.SynRegistrationFlow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">SynRegistrationFlow</span></code></a>([output_strategy,&nbsp;\u2026])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.TranslationTransform3D\" title=\"dipy.workflows.align.TranslationTransform3D\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">TranslationTransform3D</span></code></a></td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.Workflow\" title=\"dipy.workflows.align.Workflow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a>([output_strategy,&nbsp;mix_names,&nbsp;\u2026])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.check_dimensions\" title=\"dipy.workflows.align.check_dimensions\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">check_dimensions</span></code></a>(static,&nbsp;moving)</td>\n<td>Check the dimensions of the input images.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.load_nifti\" title=\"dipy.workflows.align.load_nifti\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">load_nifti</span></code></a>(fname[,&nbsp;return_img,&nbsp;\u2026])</td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.load_trk\" title=\"dipy.workflows.align.load_trk\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">load_trk</span></code></a>(filename[,&nbsp;lazy_load])</td>\n<td>Loads tractogram files (<a href=\"#id1\"><span class=\"problematic\" id=\"id2\">*</span></a>.tck)</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.reslice\" title=\"dipy.workflows.align.reslice\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">reslice</span></code></a>(data,&nbsp;affine,&nbsp;zooms,&nbsp;new_zooms[,&nbsp;\u2026])</td>\n<td>Reslice data with new voxel resolution defined by <code class=\"docutils literal notranslate\"><span class=\"pre\">new_zooms</span></code></td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.save_nifti\" title=\"dipy.workflows.align.save_nifti\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">save_nifti</span></code></a>(fname,&nbsp;data,&nbsp;affine[,&nbsp;hdr])</td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.save_qa_metric\" title=\"dipy.workflows.align.save_qa_metric\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">save_qa_metric</span></code></a>(fname,&nbsp;xopt,&nbsp;fopt)</td>\n<td>Save Quality Assurance metrics.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.slr_with_qbx\" title=\"dipy.workflows.align.slr_with_qbx\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">slr_with_qbx</span></code></a>(static,&nbsp;moving[,&nbsp;x0,&nbsp;\u2026])</td>\n<td>Utility function for registering large tractograms.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.transform_centers_of_mass\" title=\"dipy.workflows.align.transform_centers_of_mass\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">transform_centers_of_mass</span></code></a>(static,&nbsp;\u2026)</td>\n<td>Transformation to align the center of mass of the input images</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.transform_streamlines\" title=\"dipy.workflows.align.transform_streamlines\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">transform_streamlines</span></code></a>(streamlines,&nbsp;mat[,&nbsp;\u2026])</td>\n<td>Apply affine transformation to streamlines</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.workflows.base\">\n<span id=\"module-workflows-base\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">workflows.base</span></code><a class=\"headerlink\" href=\"#module-dipy.workflows.base\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.base.IntrospectiveArgumentParser\" title=\"dipy.workflows.base.IntrospectiveArgumentParser\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">IntrospectiveArgumentParser</span></code></a>([prog,&nbsp;usage,&nbsp;\u2026])</td>\n<td><table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Attributes:</th><td class=\"field-body\"></td>\n</tr>\n</tbody>\n</table>\n</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.base.NumpyDocString\" title=\"dipy.workflows.base.NumpyDocString\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">NumpyDocString</span></code></a>(docstring[,&nbsp;config])</td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.base.get_args_default\" title=\"dipy.workflows.base.get_args_default\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_args_default</span></code></a>(func)</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.workflows.combined_workflow\">\n<span id=\"module-workflows-combined-workflow\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">workflows.combined_workflow</span></code><a class=\"headerlink\" href=\"#module-dipy.workflows.combined_workflow\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.combined_workflow.CombinedWorkflow\" title=\"dipy.workflows.combined_workflow.CombinedWorkflow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">CombinedWorkflow</span></code></a>([output_strategy,&nbsp;\u2026])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.combined_workflow.Workflow\" title=\"dipy.workflows.combined_workflow.Workflow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a>([output_strategy,&nbsp;mix_names,&nbsp;\u2026])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.combined_workflow.iteritems\" title=\"dipy.workflows.combined_workflow.iteritems\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">iteritems</span></code></a>(d,&nbsp;**kw)</td>\n<td>Return an iterator over the (key, value) pairs of a dictionary.</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.workflows.denoise\">\n<span id=\"module-workflows-denoise\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">workflows.denoise</span></code><a class=\"headerlink\" href=\"#module-dipy.workflows.denoise\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.denoise.NLMeansFlow\" title=\"dipy.workflows.denoise.NLMeansFlow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">NLMeansFlow</span></code></a>([output_strategy,&nbsp;mix_names,&nbsp;\u2026])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.denoise.Workflow\" title=\"dipy.workflows.denoise.Workflow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a>([output_strategy,&nbsp;mix_names,&nbsp;\u2026])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.denoise.estimate_sigma\" title=\"dipy.workflows.denoise.estimate_sigma\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">estimate_sigma</span></code></a>(arr[,&nbsp;\u2026])</td>\n<td>Standard deviation estimation from local patches</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.denoise.load_nifti\" title=\"dipy.workflows.denoise.load_nifti\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">load_nifti</span></code></a>(fname[,&nbsp;return_img,&nbsp;\u2026])</td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.denoise.nlmeans\" title=\"dipy.workflows.denoise.nlmeans\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">nlmeans</span></code></a>(arr,&nbsp;sigma[,&nbsp;mask,&nbsp;patch_radius,&nbsp;\u2026])</td>\n<td>Non-local means for denoising 3D and 4D images</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.denoise.save_nifti\" title=\"dipy.workflows.denoise.save_nifti\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">save_nifti</span></code></a>(fname,&nbsp;data,&nbsp;affine[,&nbsp;hdr])</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.workflows.docstring_parser\">\n<span id=\"module-workflows-docstring-parser\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">workflows.docstring_parser</span></code><a class=\"headerlink\" href=\"#module-dipy.workflows.docstring_parser\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>This was taken directly from the file docscrape.py of numpydoc package.</p>\n<p>Copyright (C) 2008 Stefan van der Walt &lt;<a class=\"reference external\" href=\"mailto:stefan&#37;&#52;&#48;mentat&#46;za&#46;net\">stefan<span>&#64;</span>mentat<span>&#46;</span>za<span>&#46;</span>net</a>&gt;,\nPauli Virtanen &lt;<a class=\"reference external\" href=\"mailto:pav&#37;&#52;&#48;iki&#46;fi\">pav<span>&#64;</span>iki<span>&#46;</span>fi</a>&gt;</p>\n<p>Redistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:</p>\n<blockquote>\n<div><ol class=\"arabic simple\">\n<li>Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.</li>\n<li>Redistributions in binary form must reproduce the above copyright\nnotice, this list of conditions and the following disclaimer in\nthe documentation and/or other materials provided with the\ndistribution.</li>\n</ol>\n</div></blockquote>\n<p>THIS SOFTWARE IS PROVIDED BY THE AUTHOR <a href=\"#id3\"><span class=\"problematic\" id=\"id4\">``</span></a>AS IS\u2019\u2019 AND ANY EXPRESS OR\nIMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,\nINDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\nHOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\nSTRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\nIN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGE.</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.docstring_parser.NumpyDocString\" title=\"dipy.workflows.docstring_parser.NumpyDocString\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">NumpyDocString</span></code></a>(docstring[,&nbsp;config])</td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.docstring_parser.Reader\" title=\"dipy.workflows.docstring_parser.Reader\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Reader</span></code></a>(data)</td>\n<td>A line-based string reader.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.docstring_parser.dedent_lines\" title=\"dipy.workflows.docstring_parser.dedent_lines\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">dedent_lines</span></code></a>(lines)</td>\n<td>Deindent a list of lines maximally</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.docstring_parser.warn\" title=\"dipy.workflows.docstring_parser.warn\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">warn</span></code></a></td>\n<td>Issue a warning, or maybe ignore it or raise an exception.</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.workflows.flow_runner\">\n<span id=\"module-workflows-flow-runner\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">workflows.flow_runner</span></code><a class=\"headerlink\" href=\"#module-dipy.workflows.flow_runner\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.flow_runner.IntrospectiveArgumentParser\" title=\"dipy.workflows.flow_runner.IntrospectiveArgumentParser\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">IntrospectiveArgumentParser</span></code></a>([prog,&nbsp;usage,&nbsp;\u2026])</td>\n<td><table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Attributes:</th><td class=\"field-body\"></td>\n</tr>\n</tbody>\n</table>\n</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.flow_runner.get_level\" title=\"dipy.workflows.flow_runner.get_level\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_level</span></code></a>(lvl)</td>\n<td>Transforms the loggin level passed on the commandline into a proper logging level name.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.flow_runner.iteritems\" title=\"dipy.workflows.flow_runner.iteritems\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">iteritems</span></code></a>(d,&nbsp;**kw)</td>\n<td>Return an iterator over the (key, value) pairs of a dictionary.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.flow_runner.run_flow\" title=\"dipy.workflows.flow_runner.run_flow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run_flow</span></code></a>(flow)</td>\n<td>Wraps the process of building an argparser that reflects the workflow that we want to run along with some generic parameters like logging, force and output strategies.</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.workflows.io\">\n<span id=\"module-workflows-io\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">workflows.io</span></code><a class=\"headerlink\" href=\"#module-dipy.workflows.io\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.io.IoInfoFlow\" title=\"dipy.workflows.io.IoInfoFlow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">IoInfoFlow</span></code></a>([output_strategy,&nbsp;mix_names,&nbsp;\u2026])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.io.Workflow\" title=\"dipy.workflows.io.Workflow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a>([output_strategy,&nbsp;mix_names,&nbsp;\u2026])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.io.load_nifti\" title=\"dipy.workflows.io.load_nifti\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">load_nifti</span></code></a>(fname[,&nbsp;return_img,&nbsp;\u2026])</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.workflows.mask\">\n<span id=\"module-workflows-mask\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">workflows.mask</span></code><a class=\"headerlink\" href=\"#module-dipy.workflows.mask\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.mask.MaskFlow\" title=\"dipy.workflows.mask.MaskFlow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">MaskFlow</span></code></a>([output_strategy,&nbsp;mix_names,&nbsp;\u2026])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.mask.Workflow\" title=\"dipy.workflows.mask.Workflow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a>([output_strategy,&nbsp;mix_names,&nbsp;\u2026])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.mask.load_nifti\" title=\"dipy.workflows.mask.load_nifti\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">load_nifti</span></code></a>(fname[,&nbsp;return_img,&nbsp;\u2026])</td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.mask.save_nifti\" title=\"dipy.workflows.mask.save_nifti\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">save_nifti</span></code></a>(fname,&nbsp;data,&nbsp;affine[,&nbsp;hdr])</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.workflows.multi_io\">\n<span id=\"module-workflows-multi-io\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">workflows.multi_io</span></code><a class=\"headerlink\" href=\"#module-dipy.workflows.multi_io\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.multi_io.IOIterator\" title=\"dipy.workflows.multi_io.IOIterator\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">IOIterator</span></code></a>([output_strategy,&nbsp;mix_names])</td>\n<td>Create output filenames that work nicely with multiple input files from multiple directories (processing multiple subjects with one command)</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.multi_io.basename_without_extension\" title=\"dipy.workflows.multi_io.basename_without_extension\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">basename_without_extension</span></code></a>(fname)</td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.multi_io.common_start\" title=\"dipy.workflows.multi_io.common_start\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">common_start</span></code></a>(sa,&nbsp;sb)</td>\n<td>Return the longest common substring from the beginning of sa and sb.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.multi_io.concatenate_inputs\" title=\"dipy.workflows.multi_io.concatenate_inputs\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">concatenate_inputs</span></code></a>(multi_inputs)</td>\n<td>Concatenate list of inputs</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.multi_io.connect_output_paths\" title=\"dipy.workflows.multi_io.connect_output_paths\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">connect_output_paths</span></code></a>(inputs,&nbsp;out_dir,&nbsp;out_files)</td>\n<td>Generates a list of output files paths based on input files and output strategies.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.multi_io.get_args_default\" title=\"dipy.workflows.multi_io.get_args_default\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_args_default</span></code></a>(func)</td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.multi_io.glob\" title=\"dipy.workflows.multi_io.glob\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">glob</span></code></a>(pathname,&nbsp;*[,&nbsp;recursive])</td>\n<td>Return a list of paths matching a pathname pattern.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.multi_io.io_iterator\" title=\"dipy.workflows.multi_io.io_iterator\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">io_iterator</span></code></a>(inputs,&nbsp;out_dir,&nbsp;fnames[,&nbsp;\u2026])</td>\n<td>Creates an IOIterator from the parameters.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.multi_io.io_iterator_\" title=\"dipy.workflows.multi_io.io_iterator_\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">io_iterator_</span></code></a>(frame,&nbsp;fnc[,&nbsp;output_strategy,&nbsp;\u2026])</td>\n<td>Creates an IOIterator using introspection.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.multi_io.slash_to_under\" title=\"dipy.workflows.multi_io.slash_to_under\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">slash_to_under</span></code></a>(dir_str)</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.workflows.reconst\">\n<span id=\"module-workflows-reconst\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">workflows.reconst</span></code><a class=\"headerlink\" href=\"#module-dipy.workflows.reconst\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.ConstrainedSphericalDeconvModel\" title=\"dipy.workflows.reconst.ConstrainedSphericalDeconvModel\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">ConstrainedSphericalDeconvModel</span></code></a>(gtab,&nbsp;response)</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.CsaOdfModel\" title=\"dipy.workflows.reconst.CsaOdfModel\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">CsaOdfModel</span></code></a>(gtab,&nbsp;sh_order[,&nbsp;smooth,&nbsp;\u2026])</td>\n<td>Implementation of Constant Solid Angle reconstruction method.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.DiffusionKurtosisModel\" title=\"dipy.workflows.reconst.DiffusionKurtosisModel\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">DiffusionKurtosisModel</span></code></a>(gtab[,&nbsp;fit_method])</td>\n<td>Class for the Diffusion Kurtosis Model</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.ReconstCSAFlow\" title=\"dipy.workflows.reconst.ReconstCSAFlow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">ReconstCSAFlow</span></code></a>([output_strategy,&nbsp;mix_names,&nbsp;\u2026])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.ReconstCSDFlow\" title=\"dipy.workflows.reconst.ReconstCSDFlow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">ReconstCSDFlow</span></code></a>([output_strategy,&nbsp;mix_names,&nbsp;\u2026])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.ReconstDkiFlow\" title=\"dipy.workflows.reconst.ReconstDkiFlow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">ReconstDkiFlow</span></code></a>([output_strategy,&nbsp;mix_names,&nbsp;\u2026])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.ReconstDtiFlow\" title=\"dipy.workflows.reconst.ReconstDtiFlow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">ReconstDtiFlow</span></code></a>([output_strategy,&nbsp;mix_names,&nbsp;\u2026])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.ReconstIvimFlow\" title=\"dipy.workflows.reconst.ReconstIvimFlow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">ReconstIvimFlow</span></code></a>([output_strategy,&nbsp;\u2026])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.ReconstMAPMRIFlow\" title=\"dipy.workflows.reconst.ReconstMAPMRIFlow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">ReconstMAPMRIFlow</span></code></a>([output_strategy,&nbsp;\u2026])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.TensorModel\" title=\"dipy.workflows.reconst.TensorModel\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">TensorModel</span></code></a>(gtab[,&nbsp;fit_method,&nbsp;return_S0_hat])</td>\n<td>Diffusion Tensor</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.Workflow\" title=\"dipy.workflows.reconst.Workflow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a>([output_strategy,&nbsp;mix_names,&nbsp;\u2026])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.IvimModel\" title=\"dipy.workflows.reconst.IvimModel\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">IvimModel</span></code></a>(gtab[,&nbsp;fit_method])</td>\n<td>Selector function to switch between the 2-stage Levenberg-Marquardt based NLLS fitting method (also containing the linear fit): <cite>LM</cite> and the Variable Projections based fitting method: <cite>VarPro</cite>.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.auto_response\" title=\"dipy.workflows.reconst.auto_response\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">auto_response</span></code></a>(gtab,&nbsp;data[,&nbsp;roi_center,&nbsp;\u2026])</td>\n<td>Automatic estimation of response function using FA.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.axial_diffusivity\" title=\"dipy.workflows.reconst.axial_diffusivity\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">axial_diffusivity</span></code></a>(evals[,&nbsp;axis])</td>\n<td>Axial Diffusivity (AD) of a diffusion tensor.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.color_fa\" title=\"dipy.workflows.reconst.color_fa\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">color_fa</span></code></a>(fa,&nbsp;evecs)</td>\n<td>Color fractional anisotropy of diffusion tensor</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.fractional_anisotropy\" title=\"dipy.workflows.reconst.fractional_anisotropy\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">fractional_anisotropy</span></code></a>(evals[,&nbsp;axis])</td>\n<td>Fractional anisotropy (FA) of a diffusion tensor.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.geodesic_anisotropy\" title=\"dipy.workflows.reconst.geodesic_anisotropy\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">geodesic_anisotropy</span></code></a>(evals[,&nbsp;axis])</td>\n<td>Geodesic anisotropy (GA) of a diffusion tensor.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.get_mode\" title=\"dipy.workflows.reconst.get_mode\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_mode</span></code></a>(q_form)</td>\n<td>Mode (MO) of a diffusion tensor <a class=\"reference internal\" href=\"#r8502d494f176-1\" id=\"id5\">[1]</a>.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.get_sphere\" title=\"dipy.workflows.reconst.get_sphere\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sphere</span></code></a>([name])</td>\n<td>provide triangulated spheres</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.gradient_table\" title=\"dipy.workflows.reconst.gradient_table\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">gradient_table</span></code></a>(bvals[,&nbsp;bvecs,&nbsp;big_delta,&nbsp;\u2026])</td>\n<td>A general function for creating diffusion MR gradients.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.literal_eval\" title=\"dipy.workflows.reconst.literal_eval\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">literal_eval</span></code></a>(node_or_string)</td>\n<td>Safely evaluate an expression node or a string containing a Python expression.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.load_nifti\" title=\"dipy.workflows.reconst.load_nifti\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">load_nifti</span></code></a>(fname[,&nbsp;return_img,&nbsp;\u2026])</td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.lower_triangular\" title=\"dipy.workflows.reconst.lower_triangular\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">lower_triangular</span></code></a>(tensor[,&nbsp;b0])</td>\n<td>Returns the six lower triangular values of the tensor and a dummy variable if b0 is not None</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.mean_diffusivity\" title=\"dipy.workflows.reconst.mean_diffusivity\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">mean_diffusivity</span></code></a>(evals[,&nbsp;axis])</td>\n<td>Mean Diffusivity (MD) of a diffusion tensor.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.peaks_from_model\" title=\"dipy.workflows.reconst.peaks_from_model\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">peaks_from_model</span></code></a>(model,&nbsp;data,&nbsp;sphere,&nbsp;\u2026[,&nbsp;\u2026])</td>\n<td>Fit the model to data and computes peaks and metrics</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.peaks_to_niftis\" title=\"dipy.workflows.reconst.peaks_to_niftis\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">peaks_to_niftis</span></code></a>(pam,&nbsp;fname_shm,&nbsp;fname_dirs,&nbsp;\u2026)</td>\n<td>Save SH, directions, indices and values of peaks to Nifti.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.radial_diffusivity\" title=\"dipy.workflows.reconst.radial_diffusivity\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">radial_diffusivity</span></code></a>(evals[,&nbsp;axis])</td>\n<td>Radial Diffusivity (RD) of a diffusion tensor.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.read_bvals_bvecs\" title=\"dipy.workflows.reconst.read_bvals_bvecs\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">read_bvals_bvecs</span></code></a>(fbvals,&nbsp;fbvecs)</td>\n<td>Read b-values and b-vectors from disk</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.save_nifti\" title=\"dipy.workflows.reconst.save_nifti\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">save_nifti</span></code></a>(fname,&nbsp;data,&nbsp;affine[,&nbsp;hdr])</td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.save_peaks\" title=\"dipy.workflows.reconst.save_peaks\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">save_peaks</span></code></a>(fname,&nbsp;pam[,&nbsp;affine,&nbsp;verbose])</td>\n<td>Save all important attributes of object PeaksAndMetrics in a PAM5 file (HDF5).</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.split_dki_param\" title=\"dipy.workflows.reconst.split_dki_param\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">split_dki_param</span></code></a>(dki_params)</td>\n<td>Extract the diffusion tensor eigenvalues, the diffusion tensor eigenvector matrix, and the 15 independent elements of the kurtosis tensor from the model parameters estimated from the DKI model</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.warn\" title=\"dipy.workflows.reconst.warn\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">warn</span></code></a></td>\n<td>Issue a warning, or maybe ignore it or raise an exception.</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.workflows.segment\">\n<span id=\"module-workflows-segment\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">workflows.segment</span></code><a class=\"headerlink\" href=\"#module-dipy.workflows.segment\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.segment.LabelsBundlesFlow\" title=\"dipy.workflows.segment.LabelsBundlesFlow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">LabelsBundlesFlow</span></code></a>([output_strategy,&nbsp;\u2026])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.segment.MedianOtsuFlow\" title=\"dipy.workflows.segment.MedianOtsuFlow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">MedianOtsuFlow</span></code></a>([output_strategy,&nbsp;mix_names,&nbsp;\u2026])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.segment.RecoBundles\" title=\"dipy.workflows.segment.RecoBundles\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">RecoBundles</span></code></a>(streamlines[,&nbsp;greater_than,&nbsp;\u2026])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.segment.RecoBundlesFlow\" title=\"dipy.workflows.segment.RecoBundlesFlow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">RecoBundlesFlow</span></code></a>([output_strategy,&nbsp;\u2026])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.segment.Workflow\" title=\"dipy.workflows.segment.Workflow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a>([output_strategy,&nbsp;mix_names,&nbsp;\u2026])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.segment.load_nifti\" title=\"dipy.workflows.segment.load_nifti\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">load_nifti</span></code></a>(fname[,&nbsp;return_img,&nbsp;\u2026])</td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.segment.load_trk\" title=\"dipy.workflows.segment.load_trk\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">load_trk</span></code></a>(filename[,&nbsp;lazy_load])</td>\n<td>Loads tractogram files (<a href=\"#id6\"><span class=\"problematic\" id=\"id7\">*</span></a>.tck)</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.segment.median_otsu\" title=\"dipy.workflows.segment.median_otsu\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">median_otsu</span></code></a>(input_volume[,&nbsp;median_radius,&nbsp;\u2026])</td>\n<td>Simple brain extraction tool method for images from DWI data.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.segment.save_nifti\" title=\"dipy.workflows.segment.save_nifti\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">save_nifti</span></code></a>(fname,&nbsp;data,&nbsp;affine[,&nbsp;hdr])</td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.segment.time\" title=\"dipy.workflows.segment.time\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">time</span></code></a>()</td>\n<td>Return the current time in seconds since the Epoch.</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.workflows.stats\">\n<span id=\"module-workflows-stats\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">workflows.stats</span></code><a class=\"headerlink\" href=\"#module-dipy.workflows.stats\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.stats.BundleAnalysisPopulationFlow\" title=\"dipy.workflows.stats.BundleAnalysisPopulationFlow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">BundleAnalysisPopulationFlow</span></code></a>([\u2026])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.stats.LinearMixedModelsFlow\" title=\"dipy.workflows.stats.LinearMixedModelsFlow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">LinearMixedModelsFlow</span></code></a>([output_strategy,&nbsp;\u2026])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.stats.SNRinCCFlow\" title=\"dipy.workflows.stats.SNRinCCFlow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">SNRinCCFlow</span></code></a>([output_strategy,&nbsp;mix_names,&nbsp;\u2026])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.stats.TensorModel\" title=\"dipy.workflows.stats.TensorModel\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">TensorModel</span></code></a>(gtab[,&nbsp;fit_method,&nbsp;return_S0_hat])</td>\n<td>Diffusion Tensor</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.stats.Workflow\" title=\"dipy.workflows.stats.Workflow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a>([output_strategy,&nbsp;mix_names,&nbsp;\u2026])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.stats.binary_dilation\" title=\"dipy.workflows.stats.binary_dilation\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">binary_dilation</span></code></a>(input[,&nbsp;structure,&nbsp;\u2026])</td>\n<td>Multi-dimensional binary dilation with the given structuring element.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.stats.bounding_box\" title=\"dipy.workflows.stats.bounding_box\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">bounding_box</span></code></a>(vol)</td>\n<td>Compute the bounding box of nonzero intensity voxels in the volume.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.stats.bundle_analysis\" title=\"dipy.workflows.stats.bundle_analysis\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">bundle_analysis</span></code></a>(model_bundle_folder,&nbsp;\u2026[,&nbsp;\u2026])</td>\n<td>Applies statistical analysis on bundles and saves the results in a directory specified by <code class=\"docutils literal notranslate\"><span class=\"pre\">out_dir</span></code>.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.stats.gradient_table\" title=\"dipy.workflows.stats.gradient_table\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">gradient_table</span></code></a>(bvals[,&nbsp;bvecs,&nbsp;big_delta,&nbsp;\u2026])</td>\n<td>A general function for creating diffusion MR gradients.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.stats.load_nifti\" title=\"dipy.workflows.stats.load_nifti\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">load_nifti</span></code></a>(fname[,&nbsp;return_img,&nbsp;\u2026])</td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.stats.median_otsu\" title=\"dipy.workflows.stats.median_otsu\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">median_otsu</span></code></a>(input_volume[,&nbsp;median_radius,&nbsp;\u2026])</td>\n<td>Simple brain extraction tool method for images from DWI data.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.stats.optional_package\" title=\"dipy.workflows.stats.optional_package\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">optional_package</span></code></a>(name[,&nbsp;trip_msg])</td>\n<td>Return package-like thing and module setup for package <cite>name</cite></td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.stats.read_bvals_bvecs\" title=\"dipy.workflows.stats.read_bvals_bvecs\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">read_bvals_bvecs</span></code></a>(fbvals,&nbsp;fbvecs)</td>\n<td>Read b-values and b-vectors from disk</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.stats.save_nifti\" title=\"dipy.workflows.stats.save_nifti\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">save_nifti</span></code></a>(fname,&nbsp;data,&nbsp;affine[,&nbsp;hdr])</td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.stats.segment_from_cfa\" title=\"dipy.workflows.stats.segment_from_cfa\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">segment_from_cfa</span></code></a>(tensor_fit,&nbsp;roi,&nbsp;threshold)</td>\n<td>Segment the cfa inside roi using the values from threshold as bounds.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.stats.simple_plot\" title=\"dipy.workflows.stats.simple_plot\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">simple_plot</span></code></a>(file_name,&nbsp;title,&nbsp;x,&nbsp;y,&nbsp;xlabel,&nbsp;\u2026)</td>\n<td>Saves the simple plot with given x and y values</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.workflows.tracking\">\n<span id=\"module-workflows-tracking\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">workflows.tracking</span></code><a class=\"headerlink\" href=\"#module-dipy.workflows.tracking\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.tracking.ClosestPeakDirectionGetter\" title=\"dipy.workflows.tracking.ClosestPeakDirectionGetter\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">ClosestPeakDirectionGetter</span></code></a></td>\n<td>A direction getter that returns the closest odf peak to previous tracking direction.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.tracking.CmcTissueClassifier\" title=\"dipy.workflows.tracking.CmcTissueClassifier\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">CmcTissueClassifier</span></code></a></td>\n<td>Continuous map criterion (CMC) stopping criteria from <a class=\"reference internal\" href=\"#r80c64a47e37c-1\" id=\"id8\">[1]</a>.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.tracking.DeterministicMaximumDirectionGetter\" title=\"dipy.workflows.tracking.DeterministicMaximumDirectionGetter\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">DeterministicMaximumDirectionGetter</span></code></a></td>\n<td>Return direction of a sphere with the highest probability mass function (pmf).</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.tracking.LocalFiberTrackingPAMFlow\" title=\"dipy.workflows.tracking.LocalFiberTrackingPAMFlow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">LocalFiberTrackingPAMFlow</span></code></a>([output_strategy,&nbsp;\u2026])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.tracking.LocalTracking\" title=\"dipy.workflows.tracking.LocalTracking\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">LocalTracking</span></code></a>(direction_getter,&nbsp;\u2026[,&nbsp;\u2026])</td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.tracking.PFTrackingPAMFlow\" title=\"dipy.workflows.tracking.PFTrackingPAMFlow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">PFTrackingPAMFlow</span></code></a>([output_strategy,&nbsp;\u2026])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.tracking.ParticleFilteringTracking\" title=\"dipy.workflows.tracking.ParticleFilteringTracking\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">ParticleFilteringTracking</span></code></a>(direction_getter,&nbsp;\u2026)</td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.tracking.ProbabilisticDirectionGetter\" title=\"dipy.workflows.tracking.ProbabilisticDirectionGetter\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">ProbabilisticDirectionGetter</span></code></a></td>\n<td>Randomly samples direction of a sphere based on probability mass function (pmf).</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.tracking.ThresholdTissueClassifier\" title=\"dipy.workflows.tracking.ThresholdTissueClassifier\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">ThresholdTissueClassifier</span></code></a></td>\n<td># Declarations from tissue_classifier.pxd bellow cdef:     double threshold, interp_out_double[1]     double[:]  interp_out_view = interp_out_view     double[:, :, :] metric_map</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.tracking.Tractogram\" title=\"dipy.workflows.tracking.Tractogram\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Tractogram</span></code></a>([streamlines,&nbsp;\u2026])</td>\n<td>Container for streamlines and their data information.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.tracking.Workflow\" title=\"dipy.workflows.tracking.Workflow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a>([output_strategy,&nbsp;mix_names,&nbsp;\u2026])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.tracking.load_nifti\" title=\"dipy.workflows.tracking.load_nifti\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">load_nifti</span></code></a>(fname[,&nbsp;return_img,&nbsp;\u2026])</td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.tracking.load_peaks\" title=\"dipy.workflows.tracking.load_peaks\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">load_peaks</span></code></a>(fname[,&nbsp;verbose])</td>\n<td>Load a PeaksAndMetrics HDF5 file (PAM5)</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.tracking.save\" title=\"dipy.workflows.tracking.save\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">save</span></code></a>(tractogram,&nbsp;filename,&nbsp;**kwargs)</td>\n<td>Saves a tractogram to a file.</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.workflows.viz\">\n<span id=\"module-workflows-viz\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">workflows.viz</span></code><a class=\"headerlink\" href=\"#module-dipy.workflows.viz\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.viz.HorizonFlow\" title=\"dipy.workflows.viz.HorizonFlow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">HorizonFlow</span></code></a>([output_strategy,&nbsp;mix_names,&nbsp;\u2026])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.viz.Workflow\" title=\"dipy.workflows.viz.Workflow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a>([output_strategy,&nbsp;mix_names,&nbsp;\u2026])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.viz.horizon\" title=\"dipy.workflows.viz.horizon\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">horizon</span></code></a>(tractograms,&nbsp;images,&nbsp;cluster,&nbsp;\u2026[,&nbsp;\u2026])</td>\n<td>Highly interactive visualization - invert the Horizon!</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.viz.load_nifti\" title=\"dipy.workflows.viz.load_nifti\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">load_nifti</span></code></a>(fname[,&nbsp;return_img,&nbsp;\u2026])</td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.viz.load_tractogram\" title=\"dipy.workflows.viz.load_tractogram\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">load_tractogram</span></code></a>(filename[,&nbsp;lazy_load])</td>\n<td>Loads tractogram files (<a href=\"#id9\"><span class=\"problematic\" id=\"id10\">*</span></a>.tck)</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.viz.pjoin\" title=\"dipy.workflows.viz.pjoin\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">pjoin</span></code></a>(a,&nbsp;*p)</td>\n<td>Join two or more pathname components, inserting \u2018/\u2019 as needed.</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.workflows.workflow\">\n<span id=\"module-workflows-workflow\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">workflows.workflow</span></code><a class=\"headerlink\" href=\"#module-dipy.workflows.workflow\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow\" title=\"dipy.workflows.workflow.Workflow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a>([output_strategy,&nbsp;mix_names,&nbsp;\u2026])</td>\n<td><p class=\"rubric\">Methods</p>\n</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.workflow.io_iterator_\" title=\"dipy.workflows.workflow.io_iterator_\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">io_iterator_</span></code></a>(frame,&nbsp;fnc[,&nbsp;output_strategy,&nbsp;\u2026])</td>\n<td>Creates an IOIterator using introspection.</td>\n</tr>\n</tbody>\n</table>\n<div class=\"section\" id=\"affinemap\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.align.AffineMap\" title=\"dipy.workflows.align.AffineMap\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AffineMap</span></code></a><a class=\"headerlink\" href=\"#affinemap\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.align.AffineMap\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.align.</code><code class=\"descname\">AffineMap</code><span class=\"sig-paren\">(</span><em>affine</em>, <em>domain_grid_shape=None</em>, <em>domain_grid2world=None</em>, <em>codomain_grid_shape=None</em>, <em>codomain_grid2world=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.AffineMap\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.7)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.AffineMap.get_affine\" title=\"dipy.workflows.align.AffineMap.get_affine\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_affine</span></code></a>()</td>\n<td>Returns the value of the transformation, not a reference!</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.AffineMap.set_affine\" title=\"dipy.workflows.align.AffineMap.set_affine\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">set_affine</span></code></a>(affine)</td>\n<td>Sets the affine transform (operating in physical space)</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.AffineMap.transform\" title=\"dipy.workflows.align.AffineMap.transform\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">transform</span></code></a>(image[,&nbsp;interp,&nbsp;image_grid2world,&nbsp;\u2026])</td>\n<td>Transforms the input image from co-domain to domain space</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.AffineMap.transform_inverse\" title=\"dipy.workflows.align.AffineMap.transform_inverse\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">transform_inverse</span></code></a>(image[,&nbsp;interp,&nbsp;\u2026])</td>\n<td>Transforms the input image from domain to co-domain space</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.AffineMap.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>affine</em>, <em>domain_grid_shape=None</em>, <em>domain_grid2world=None</em>, <em>codomain_grid_shape=None</em>, <em>codomain_grid2world=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.AffineMap.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>AffineMap</p>\n<p>Implements an affine transformation whose domain is given by\n<cite>domain_grid</cite> and <cite>domain_grid2world</cite>, and whose co-domain is\ngiven by <cite>codomain_grid</cite> and <cite>codomain_grid2world</cite>.</p>\n<p>The actual transform is represented by the <cite>affine</cite> matrix, which\noperate in world coordinates. Therefore, to transform a moving image\ntowards a static image, we first map each voxel (i,j,k) of the static\nimage to world coordinates (x,y,z) by applying <cite>domain_grid2world</cite>.\nThen we apply the <cite>affine</cite> transform to (x,y,z) obtaining (x\u2019, y\u2019, z\u2019)\nin moving image\u2019s world coordinates. Finally, (x\u2019, y\u2019, z\u2019) is mapped\nto voxel coordinates (i\u2019, j\u2019, k\u2019) in the moving image by multiplying\n(x\u2019, y\u2019, z\u2019) by the inverse of <cite>codomain_grid2world</cite>. The\n<cite>codomain_grid_shape</cite> is used analogously to transform the static\nimage towards the moving image when calling <cite>transform_inverse</cite>.</p>\n<p>If the domain/co-domain information is not provided (None) then the\nsampling information needs to be specified each time the <cite>transform</cite>\nor <cite>transform_inverse</cite> is called to transform images. Note that such\nsampling information is not necessary to transform points defined in\nphysical space, such as stream lines.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>affine</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, shape (dim + 1, dim + 1)</span></dt>\n<dd><p class=\"first last\">the matrix defining the affine transform, where <cite>dim</cite> is the\ndimension of the space this map operates in (2 for 2D images,\n3 for 3D images). If None, then <cite>self</cite> represents the identity\ntransformation.</p>\n</dd>\n<dt><strong>domain_grid_shape</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">sequence, shape (dim,), optional</span></dt>\n<dd><p class=\"first last\">the shape of the default domain sampling grid. When <cite>transform</cite>\nis called to transform an image, the resulting image will have\nthis shape, unless a different sampling information is provided.\nIf None, then the sampling grid shape must be specified each time\nthe <cite>transform</cite> method is called.</p>\n</dd>\n<dt><strong>domain_grid2world</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, shape (dim + 1, dim + 1), optional</span></dt>\n<dd><p class=\"first last\">the grid-to-world transform associated with the domain grid.\nIf None (the default), then the grid-to-world transform is assumed\nto be the identity.</p>\n</dd>\n<dt><strong>codomain_grid_shape</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">sequence of integers, shape (dim,)</span></dt>\n<dd><p class=\"first last\">the shape of the default co-domain sampling grid. When\n<cite>transform_inverse</cite> is called to transform an image, the resulting\nimage will have this shape, unless a different sampling\ninformation is provided. If None (the default), then the sampling\ngrid shape must be specified each time the <cite>transform_inverse</cite>\nmethod is called.</p>\n</dd>\n<dt><strong>codomain_grid2world</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, shape (dim + 1, dim + 1)</span></dt>\n<dd><p class=\"first last\">the grid-to-world transform associated with the co-domain grid.\nIf None (the default), then the grid-to-world transform is assumed\nto be the identity.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.AffineMap.get_affine\">\n<code class=\"descname\">get_affine</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.AffineMap.get_affine\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns the value of the transformation, not a reference!</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>affine</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">ndarray</span></dt>\n<dd><p class=\"first last\">Copy of the transform, not a reference.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.AffineMap.set_affine\">\n<code class=\"descname\">set_affine</code><span class=\"sig-paren\">(</span><em>affine</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.AffineMap.set_affine\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Sets the affine transform (operating in physical space)</p>\n<p>Also sets <cite>self.affine_inv</cite> - the inverse of <cite>affine</cite>, or None if\nthere is no inverse.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>affine</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, shape (dim + 1, dim + 1)</span></dt>\n<dd><p class=\"first last\">the matrix representing the affine transform operating in\nphysical space. The domain and co-domain information\nremains unchanged. If None, then <cite>self</cite> represents the identity\ntransformation.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.AffineMap.transform\">\n<code class=\"descname\">transform</code><span class=\"sig-paren\">(</span><em>image</em>, <em>interp='linear'</em>, <em>image_grid2world=None</em>, <em>sampling_grid_shape=None</em>, <em>sampling_grid2world=None</em>, <em>resample_only=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.AffineMap.transform\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Transforms the input image from co-domain to domain space</p>\n<p>By default, the transformed image is sampled at a grid defined by\n<cite>self.domain_shape</cite> and <cite>self.domain_grid2world</cite>. If such\ninformation was not provided then <cite>sampling_grid_shape</cite> is mandatory.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>image</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">2D or 3D array</span></dt>\n<dd><p class=\"first last\">the image to be transformed</p>\n</dd>\n<dt><strong>interp</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, either \u2018linear\u2019 or \u2018nearest\u2019</span></dt>\n<dd><p class=\"first last\">the type of interpolation to be used, either \u2018linear\u2019\n(for k-linear interpolation) or \u2018nearest\u2019 for nearest neighbor</p>\n</dd>\n<dt><strong>image_grid2world</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, shape (dim + 1, dim + 1), optional</span></dt>\n<dd><p class=\"first last\">the grid-to-world transform associated with <cite>image</cite>.\nIf None (the default), then the grid-to-world transform is assumed\nto be the identity.</p>\n</dd>\n<dt><strong>sampling_grid_shape</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">sequence, shape (dim,), optional</span></dt>\n<dd><p class=\"first last\">the shape of the grid where the transformed image must be sampled.\nIf None (the default), then <cite>self.codomain_shape</cite> is used instead\n(which must have been set at initialization, otherwise an exception\nwill be raised).</p>\n</dd>\n<dt><strong>sampling_grid2world</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, shape (dim + 1, dim + 1), optional</span></dt>\n<dd><p class=\"first last\">the grid-to-world transform associated with the sampling grid\n(specified by <cite>sampling_grid_shape</cite>, or by default\n<cite>self.codomain_shape</cite>). If None (the default), then the\ngrid-to-world transform is assumed to be the identity.</p>\n</dd>\n<dt><strong>resample_only</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">Boolean, optional</span></dt>\n<dd><p class=\"first last\">If False (the default) the affine transform is applied normally.\nIf True, then the affine transform is not applied, and the input\nimage is just re-sampled on the domain grid of this transform.</p>\n</dd>\n<dt><strong>Returns</strong></dt>\n<dd></dd>\n<dt><strong>\u2014\u2014-</strong></dt>\n<dd></dd>\n<dt><strong>transformed</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, shape <cite>sampling_grid_shape</cite> or</span></dt>\n<dd><blockquote class=\"first\">\n<div><p><cite>self.codomain_shape</cite></p>\n</div></blockquote>\n<p class=\"last\">the transformed image, sampled at the requested grid</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.AffineMap.transform_inverse\">\n<code class=\"descname\">transform_inverse</code><span class=\"sig-paren\">(</span><em>image</em>, <em>interp='linear'</em>, <em>image_grid2world=None</em>, <em>sampling_grid_shape=None</em>, <em>sampling_grid2world=None</em>, <em>resample_only=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.AffineMap.transform_inverse\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Transforms the input image from domain to co-domain space</p>\n<p>By default, the transformed image is sampled at a grid defined by\n<cite>self.codomain_shape</cite> and <cite>self.codomain_grid2world</cite>. If such\ninformation was not provided then <cite>sampling_grid_shape</cite> is mandatory.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>image</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">2D or 3D array</span></dt>\n<dd><p class=\"first last\">the image to be transformed</p>\n</dd>\n<dt><strong>interp</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, either \u2018linear\u2019 or \u2018nearest\u2019</span></dt>\n<dd><p class=\"first last\">the type of interpolation to be used, either \u2018linear\u2019\n(for k-linear interpolation) or \u2018nearest\u2019 for nearest neighbor</p>\n</dd>\n<dt><strong>image_grid2world</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, shape (dim + 1, dim + 1), optional</span></dt>\n<dd><p class=\"first last\">the grid-to-world transform associated with <cite>image</cite>.\nIf None (the default), then the grid-to-world transform is assumed\nto be the identity.</p>\n</dd>\n<dt><strong>sampling_grid_shape</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">sequence, shape (dim,), optional</span></dt>\n<dd><p class=\"first last\">the shape of the grid where the transformed image must be sampled.\nIf None (the default), then <cite>self.codomain_shape</cite> is used instead\n(which must have been set at initialization, otherwise an exception\nwill be raised).</p>\n</dd>\n<dt><strong>sampling_grid2world</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, shape (dim + 1, dim + 1), optional</span></dt>\n<dd><p class=\"first last\">the grid-to-world transform associated with the sampling grid\n(specified by <cite>sampling_grid_shape</cite>, or by default\n<cite>self.codomain_shape</cite>). If None (the default), then the\ngrid-to-world transform is assumed to be the identity.</p>\n</dd>\n<dt><strong>resample_only</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">Boolean, optional</span></dt>\n<dd><p class=\"first last\">If False (the default) the affine transform is applied normally.\nIf True, then the affine transform is not applied, and the input\nimage is just re-sampled on the domain grid of this transform.</p>\n</dd>\n<dt><strong>Returns</strong></dt>\n<dd></dd>\n<dt><strong>\u2014\u2014-</strong></dt>\n<dd></dd>\n<dt><strong>transformed</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, shape <cite>sampling_grid_shape</cite> or</span></dt>\n<dd><blockquote class=\"first\">\n<div><p><cite>self.codomain_shape</cite></p>\n</div></blockquote>\n<p class=\"last\">the transformed image, sampled at the requested grid</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"affineregistration\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.align.AffineRegistration\" title=\"dipy.workflows.align.AffineRegistration\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AffineRegistration</span></code></a><a class=\"headerlink\" href=\"#affineregistration\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.align.AffineRegistration\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.align.</code><code class=\"descname\">AffineRegistration</code><span class=\"sig-paren\">(</span><em>metric=None</em>, <em>level_iters=None</em>, <em>sigmas=None</em>, <em>factors=None</em>, <em>method='L-BFGS-B'</em>, <em>ss_sigma_factor=None</em>, <em>options=None</em>, <em>verbosity=1</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.AffineRegistration\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.7)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.AffineRegistration.optimize\" title=\"dipy.workflows.align.AffineRegistration.optimize\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">optimize</span></code></a>(static,&nbsp;moving,&nbsp;transform,&nbsp;params0)</td>\n<td>Starts the optimization process</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.AffineRegistration.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>metric=None</em>, <em>level_iters=None</em>, <em>sigmas=None</em>, <em>factors=None</em>, <em>method='L-BFGS-B'</em>, <em>ss_sigma_factor=None</em>, <em>options=None</em>, <em>verbosity=1</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.AffineRegistration.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initializes an instance of the AffineRegistration class</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>metric</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">None or object, optional</span></dt>\n<dd><p class=\"first last\">an instance of a metric. The default is None, implying\nthe Mutual Information metric with default settings.</p>\n</dd>\n<dt><strong>level_iters</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">sequence, optional</span></dt>\n<dd><p class=\"first last\">the number of iterations at each scale of the scale space.\n<cite>level_iters[0]</cite> corresponds to the coarsest scale,\n<cite>level_iters[-1]</cite> the finest, where n is the length of the\nsequence. By default, a 3-level scale space with iterations\nsequence equal to [10000, 1000, 100] will be used.</p>\n</dd>\n<dt><strong>sigmas</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">sequence of floats, optional</span></dt>\n<dd><p class=\"first last\">custom smoothing parameter to build the scale space (one parameter\nfor each scale). By default, the sequence of sigmas will be\n[3, 1, 0].</p>\n</dd>\n<dt><strong>factors</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">sequence of floats, optional</span></dt>\n<dd><p class=\"first last\">custom scale factors to build the scale space (one factor for each\nscale). By default, the sequence of factors will be [4, 2, 1].</p>\n</dd>\n<dt><strong>method</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">optimization method to be used. If Scipy version &lt; 0.12, then\nonly L-BFGS-B is available. Otherwise, <cite>method</cite> can be any\ngradient-based method available in <cite>dipy.core.Optimize</cite>: CG, BFGS,\nNewton-CG, dogleg or trust-ncg.\nThe default is \u2018L-BFGS-B\u2019.</p>\n</dd>\n<dt><strong>ss_sigma_factor</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float, optional</span></dt>\n<dd><p class=\"first last\">If None, this parameter is not used and an isotropic scale\nspace with the given <cite>factors</cite> and <cite>sigmas</cite> will be built.\nIf not None, an anisotropic scale space will be used by\nautomatically selecting the smoothing sigmas along each axis\naccording to the voxel dimensions of the given image.\nThe <cite>ss_sigma_factor</cite> is used to scale the automatically computed\nsigmas. For example, in the isotropic case, the sigma of the\nkernel will be <span class=\"math notranslate nohighlight\">\\(factor * (2 ^ i)\\)</span> where\n<span class=\"math notranslate nohighlight\">\\(i = 1, 2, ..., n_scales - 1\\)</span> is the scale (the finest resolution\nimage <span class=\"math notranslate nohighlight\">\\(i=0\\)</span> is never smoothed). The default is None.</p>\n</dd>\n<dt><strong>options</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">dict, optional</span></dt>\n<dd><p class=\"first last\">extra optimization options. The default is None, implying\nno extra options are passed to the optimizer.</p>\n</dd>\n<dt><strong>verbosity: int (one of {0, 1, 2, 3}), optional</strong></dt>\n<dd><p class=\"first\">Set the verbosity level of the algorithm:\n0 : do not print anything\n1 : print information about the current status of the algorithm\n2 : print high level information of the components involved in</p>\n<blockquote>\n<div><p>the registration that can be used to detect a failing\ncomponent.</p>\n</div></blockquote>\n<dl class=\"docutils\">\n<dt>3 <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">print as much information as possible to isolate the cause</span></dt>\n<dd><p class=\"first last\">of a bug.</p>\n</dd>\n</dl>\n<p class=\"last\">Default: 1</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.workflows.align.AffineRegistration.docstring_addendum\">\n<code class=\"descname\">docstring_addendum</code><em class=\"property\"> = 'verbosity: int (one of {0, 1, 2, 3}), optional\\n            Set the verbosity level of the algorithm:\\n            0 : do not print anything\\n            1 : print information about the current status of the algorithm\\n            2 : print high level information of the components involved in\\n                the registration that can be used to detect a failing\\n                component.\\n            3 : print as much information as possible to isolate the cause\\n                of a bug.\\n            Default: 1\\n    '</em><a class=\"headerlink\" href=\"#dipy.workflows.align.AffineRegistration.docstring_addendum\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.AffineRegistration.optimize\">\n<code class=\"descname\">optimize</code><span class=\"sig-paren\">(</span><em>static</em>, <em>moving</em>, <em>transform</em>, <em>params0</em>, <em>static_grid2world=None</em>, <em>moving_grid2world=None</em>, <em>starting_affine=None</em>, <em>ret_metric=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.AffineRegistration.optimize\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Starts the optimization process</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>static</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">2D or 3D array</span></dt>\n<dd><p class=\"first last\">the image to be used as reference during optimization.</p>\n</dd>\n<dt><strong>moving</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">2D or 3D array</span></dt>\n<dd><p class=\"first last\">the image to be used as \u201cmoving\u201d during optimization. It is\nnecessary to pre-align the moving image to ensure its domain\nlies inside the domain of the deformation fields. This is assumed\nto be accomplished by \u201cpre-aligning\u201d the moving image towards the\nstatic using an affine transformation given by the\n\u2018starting_affine\u2019 matrix</p>\n</dd>\n<dt><strong>transform</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">instance of Transform</span></dt>\n<dd><p class=\"first last\">the transformation with respect to whose parameters the gradient\nmust be computed</p>\n</dd>\n<dt><strong>params0</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, shape (n,)</span></dt>\n<dd><p class=\"first last\">parameters from which to start the optimization. If None, the\noptimization will start at the identity transform. n is the\nnumber of parameters of the specified transformation.</p>\n</dd>\n<dt><strong>static_grid2world</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, shape (dim+1, dim+1), optional</span></dt>\n<dd><p class=\"first last\">the voxel-to-space transformation associated with the static\nimage. The default is None, implying the transform is the\nidentity.</p>\n</dd>\n<dt><strong>moving_grid2world</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, shape (dim+1, dim+1), optional</span></dt>\n<dd><p class=\"first last\">the voxel-to-space transformation associated with the moving\nimage. The default is None, implying the transform is the\nidentity.</p>\n</dd>\n<dt><strong>starting_affine</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, or matrix, or None, optional</span></dt>\n<dd><dl class=\"first docutils\">\n<dt>If string:</dt>\n<dd><p class=\"first last\">\u2018mass\u2019: align centers of gravity\n\u2018voxel-origin\u2019: align physical coordinates of voxel (0,0,0)\n\u2018centers\u2019: align physical coordinates of central voxels</p>\n</dd>\n<dt>If matrix:</dt>\n<dd><p class=\"first last\">array, shape (dim+1, dim+1).</p>\n</dd>\n<dt>If None:</dt>\n<dd><p class=\"first last\">Start from identity.</p>\n</dd>\n</dl>\n<p class=\"last\">The default is None.</p>\n</dd>\n<dt><strong>ret_metric</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">boolean, optional</span></dt>\n<dd><p class=\"first last\">if True, it returns the parameters for measuring the\nsimilarity between the images (default \u2018False\u2019).\nThe metric containing optimal parameters and\nthe distance between the images.</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>affine_map</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">instance of AffineMap</span></dt>\n<dd><p class=\"first last\">the affine resulting affine transformation</p>\n</dd>\n<dt><strong>xopt</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">optimal parameters</span></dt>\n<dd><p class=\"first last\">the optimal parameters (translation, rotation shear etc.)</p>\n</dd>\n<dt><strong>fopt</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">Similarity metric</span></dt>\n<dd><p class=\"first last\">the value of the function at the optimal parameters.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"affinetransform3d\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.align.AffineTransform3D\" title=\"dipy.workflows.align.AffineTransform3D\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AffineTransform3D</span></code></a><a class=\"headerlink\" href=\"#affinetransform3d\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.align.AffineTransform3D\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.align.</code><code class=\"descname\">AffineTransform3D</code><a class=\"headerlink\" href=\"#dipy.workflows.align.AffineTransform3D\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.align.transforms.Transform</span></code></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_identity_parameters</span></code></td>\n<td>Parameter values corresponding to the identity transform</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">jacobian</span></code></td>\n<td>Jacobian function of this transform</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">param_to_matrix</span></code></td>\n<td>Matrix representation of this transform with the given parameters</td>\n</tr>\n</tbody>\n</table>\n<table border=\"1\" class=\"docutils\">\n<colgroup>\n<col width=\"74%\" />\n<col width=\"26%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><strong>get_dim</strong></td>\n<td>&#160;</td>\n</tr>\n<tr class=\"row-even\"><td><strong>get_number_of_parameters</strong></td>\n<td>&#160;</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.AffineTransform3D.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.AffineTransform3D.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Affine transform in 3D</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"applytransformflow\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.align.ApplyTransformFlow\" title=\"dipy.workflows.align.ApplyTransformFlow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ApplyTransformFlow</span></code></a><a class=\"headerlink\" href=\"#applytransformflow\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.align.ApplyTransformFlow\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.align.</code><code class=\"descname\">ApplyTransformFlow</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.ApplyTransformFlow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow\" title=\"dipy.workflows.workflow.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.workflows.workflow.Workflow</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code>()</td>\n<td>Create an iterator for IO.</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code>()</td>\n<td>Return A short name for the workflow used to subdivide.</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code>()</td>\n<td>Return No sub runs since this is a simple workflow.</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code>()</td>\n<td>Check if a file will be overwritten upon processing the inputs.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.ApplyTransformFlow.run\" title=\"dipy.workflows.align.ApplyTransformFlow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(static_image_files,&nbsp;moving_image_files,&nbsp;\u2026)</td>\n<td><table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"></td>\n</tr>\n</tbody>\n</table>\n</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.ApplyTransformFlow.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.ApplyTransformFlow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.ApplyTransformFlow.run\">\n<code class=\"descname\">run</code><span class=\"sig-paren\">(</span><em>static_image_files</em>, <em>moving_image_files</em>, <em>transform_map_file</em>, <em>transform_type='affine'</em>, <em>out_dir=''</em>, <em>out_file='transformed.nii.gz'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.ApplyTransformFlow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>static_image_files</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">Path of the static image file.</p>\n</dd>\n<dt><strong>moving_image_files</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">Path of the moving image(s). It can be a single image or a\nfolder containing multiple images.</p>\n</dd>\n<dt><strong>transform_map_file</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">For the affine case, it should be a text(<a href=\"#id11\"><span class=\"problematic\" id=\"id12\">*</span></a>.txt) file containing\nthe affine matrix. For the diffeomorphic case,\nit should be a nifti file containing the mapping displacement\nfield in each voxel with this shape (x, y, z, 3, 2)</p>\n</dd>\n<dt><strong>transform_type</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Select the transformation type to apply between \u2018affine\u2019 or\n\u2018diffeomorphic\u2019. (default affine)</p>\n</dd>\n<dt><strong>out_dir</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Directory to save the transformed files (default \u2018\u2019).</p>\n</dd>\n<dt><strong>out_file</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><dl class=\"first last docutils\">\n<dt>Name of the transformed file (default \u2018transformed.nii.gz\u2019).</dt>\n<dd><dl class=\"first last docutils\">\n<dt>It is recommended to use the flag \u2013mix-names to</dt>\n<dd><p class=\"first last\">prevent the output files from being overwritten.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"ccmetric\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.align.CCMetric\" title=\"dipy.workflows.align.CCMetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">CCMetric</span></code></a><a class=\"headerlink\" href=\"#ccmetric\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.align.CCMetric\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.align.</code><code class=\"descname\">CCMetric</code><span class=\"sig-paren\">(</span><em>dim</em>, <em>sigma_diff=2.0</em>, <em>radius=4</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.CCMetric\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"../dipy.align/#dipy.align.metrics.SimilarityMetric\" title=\"dipy.align.metrics.SimilarityMetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.align.metrics.SimilarityMetric</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.CCMetric.compute_backward\" title=\"dipy.workflows.align.CCMetric.compute_backward\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">compute_backward</span></code></a>()</td>\n<td>Computes one step bringing the static image towards the moving.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.CCMetric.compute_forward\" title=\"dipy.workflows.align.CCMetric.compute_forward\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">compute_forward</span></code></a>()</td>\n<td>Computes one step bringing the moving image towards the static.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.CCMetric.free_iteration\" title=\"dipy.workflows.align.CCMetric.free_iteration\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">free_iteration</span></code></a>()</td>\n<td>Frees the resources allocated during initialization</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.CCMetric.get_energy\" title=\"dipy.workflows.align.CCMetric.get_energy\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_energy</span></code></a>()</td>\n<td>Numerical value assigned by this metric to the current image pair</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.CCMetric.initialize_iteration\" title=\"dipy.workflows.align.CCMetric.initialize_iteration\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">initialize_iteration</span></code></a>()</td>\n<td>Prepares the metric to compute one displacement field iteration.</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">set_levels_above</span></code>(levels)</td>\n<td>Informs the metric how many pyramid levels are above the current one</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">set_levels_below</span></code>(levels)</td>\n<td>Informs the metric how many pyramid levels are below the current one</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">set_moving_image</span></code>(moving_image,&nbsp;\u2026)</td>\n<td>Sets the moving image being compared against the static one.</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">set_static_image</span></code>(static_image,&nbsp;\u2026)</td>\n<td>Sets the static image being compared against the moving one.</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">use_moving_image_dynamics</span></code>(\u2026)</td>\n<td>This is called by the optimizer just after setting the moving image</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">use_static_image_dynamics</span></code>(\u2026)</td>\n<td>This is called by the optimizer just after setting the static image.</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.CCMetric.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>dim</em>, <em>sigma_diff=2.0</em>, <em>radius=4</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.CCMetric.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Normalized Cross-Correlation Similarity metric.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>dim</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int (either 2 or 3)</span></dt>\n<dd><p class=\"first last\">the dimension of the image domain</p>\n</dd>\n<dt><strong>sigma_diff</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">the standard deviation of the Gaussian smoothing kernel to</span></dt>\n<dd><p class=\"first last\">be applied to the update field at each iteration</p>\n</dd>\n<dt><strong>radius</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int</span></dt>\n<dd><p class=\"first last\">the radius of the squared (cubic) neighborhood at each voxel to be\nconsidered to compute the cross correlation</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.CCMetric.compute_backward\">\n<code class=\"descname\">compute_backward</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.CCMetric.compute_backward\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes one step bringing the static image towards the moving.</p>\n<p>Computes the update displacement field to be used for registration of\nthe static image towards the moving image</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.CCMetric.compute_forward\">\n<code class=\"descname\">compute_forward</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.CCMetric.compute_forward\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes one step bringing the moving image towards the static.</p>\n<p>Computes the update displacement field to be used for registration of\nthe moving image towards the static image</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.CCMetric.free_iteration\">\n<code class=\"descname\">free_iteration</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.CCMetric.free_iteration\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Frees the resources allocated during initialization</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.CCMetric.get_energy\">\n<code class=\"descname\">get_energy</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.CCMetric.get_energy\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Numerical value assigned by this metric to the current image pair</p>\n<p>Returns the Cross Correlation (data term) energy computed at the\nlargest iteration</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.CCMetric.initialize_iteration\">\n<code class=\"descname\">initialize_iteration</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.CCMetric.initialize_iteration\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Prepares the metric to compute one displacement field iteration.</p>\n<p>Pre-computes the cross-correlation factors for efficient computation\nof the gradient of the Cross Correlation w.r.t. the displacement field.\nIt also pre-computes the image gradients in the physical space by\nre-orienting the gradients in the voxel space using the corresponding\naffine transformations.</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"diffeomorphicmap\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.align.DiffeomorphicMap\" title=\"dipy.workflows.align.DiffeomorphicMap\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DiffeomorphicMap</span></code></a><a class=\"headerlink\" href=\"#diffeomorphicmap\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.align.DiffeomorphicMap\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.align.</code><code class=\"descname\">DiffeomorphicMap</code><span class=\"sig-paren\">(</span><em>dim</em>, <em>disp_shape</em>, <em>disp_grid2world=None</em>, <em>domain_shape=None</em>, <em>domain_grid2world=None</em>, <em>codomain_shape=None</em>, <em>codomain_grid2world=None</em>, <em>prealign=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.DiffeomorphicMap\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.7)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.DiffeomorphicMap.allocate\" title=\"dipy.workflows.align.DiffeomorphicMap.allocate\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">allocate</span></code></a>()</td>\n<td>Creates a zero displacement field</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.DiffeomorphicMap.compute_inversion_error\" title=\"dipy.workflows.align.DiffeomorphicMap.compute_inversion_error\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">compute_inversion_error</span></code></a>()</td>\n<td>Inversion error of the displacement fields</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.DiffeomorphicMap.expand_fields\" title=\"dipy.workflows.align.DiffeomorphicMap.expand_fields\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">expand_fields</span></code></a>(expand_factors,&nbsp;new_shape)</td>\n<td>Expands the displacement fields from current shape to new_shape</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.DiffeomorphicMap.get_backward_field\" title=\"dipy.workflows.align.DiffeomorphicMap.get_backward_field\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_backward_field</span></code></a>()</td>\n<td>Deformation field to transform an image in the backward direction</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.DiffeomorphicMap.get_forward_field\" title=\"dipy.workflows.align.DiffeomorphicMap.get_forward_field\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_forward_field</span></code></a>()</td>\n<td>Deformation field to transform an image in the forward direction</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.DiffeomorphicMap.get_simplified_transform\" title=\"dipy.workflows.align.DiffeomorphicMap.get_simplified_transform\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_simplified_transform</span></code></a>()</td>\n<td>Constructs a simplified version of this Diffeomorhic Map</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.DiffeomorphicMap.interpret_matrix\" title=\"dipy.workflows.align.DiffeomorphicMap.interpret_matrix\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">interpret_matrix</span></code></a>(obj)</td>\n<td>Try to interpret <cite>obj</cite> as a matrix</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.DiffeomorphicMap.inverse\" title=\"dipy.workflows.align.DiffeomorphicMap.inverse\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">inverse</span></code></a>()</td>\n<td>Inverse of this DiffeomorphicMap instance</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.DiffeomorphicMap.shallow_copy\" title=\"dipy.workflows.align.DiffeomorphicMap.shallow_copy\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">shallow_copy</span></code></a>()</td>\n<td>Shallow copy of this DiffeomorphicMap instance</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.DiffeomorphicMap.transform\" title=\"dipy.workflows.align.DiffeomorphicMap.transform\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">transform</span></code></a>(image[,&nbsp;interpolation,&nbsp;\u2026])</td>\n<td>Warps an image in the forward direction</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.DiffeomorphicMap.transform_inverse\" title=\"dipy.workflows.align.DiffeomorphicMap.transform_inverse\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">transform_inverse</span></code></a>(image[,&nbsp;interpolation,&nbsp;\u2026])</td>\n<td>Warps an image in the backward direction</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.DiffeomorphicMap.warp_endomorphism\" title=\"dipy.workflows.align.DiffeomorphicMap.warp_endomorphism\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">warp_endomorphism</span></code></a>(phi)</td>\n<td>Composition of this DiffeomorphicMap with a given endomorphism</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.DiffeomorphicMap.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>dim</em>, <em>disp_shape</em>, <em>disp_grid2world=None</em>, <em>domain_shape=None</em>, <em>domain_grid2world=None</em>, <em>codomain_shape=None</em>, <em>codomain_grid2world=None</em>, <em>prealign=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.DiffeomorphicMap.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>DiffeomorphicMap</p>\n<p>Implements a diffeomorphic transformation on the physical space. The\ndeformation fields encoding the direct and inverse transformations\nshare the same domain discretization (both the discretization grid\nshape and voxel-to-space matrix). The input coordinates (physical\ncoordinates) are first aligned using prealign, and then displaced\nusing the corresponding vector field interpolated at the aligned\ncoordinates.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>dim</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int, 2 or 3</span></dt>\n<dd><p class=\"first last\">the transformation\u2019s dimension</p>\n</dd>\n<dt><strong>disp_shape</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, shape (dim,)</span></dt>\n<dd><p class=\"first last\">the number of slices (if 3D), rows and columns of the deformation\nfield\u2019s discretization</p>\n</dd>\n<dt><strong>disp_grid2world</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">the voxel-to-space transform between the def. fields</span></dt>\n<dd><p class=\"first last\">grid and space</p>\n</dd>\n<dt><strong>domain_shape</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, shape (dim,)</span></dt>\n<dd><p class=\"first last\">the number of slices (if 3D), rows and columns of the default\ndiscretizatio of this map\u2019s domain</p>\n</dd>\n<dt><strong>domain_grid2world</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, shape (dim+1, dim+1)</span></dt>\n<dd><p class=\"first last\">the default voxel-to-space transformation between this map\u2019s\ndiscretization and physical space</p>\n</dd>\n<dt><strong>codomain_shape</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, shape (dim,)</span></dt>\n<dd><p class=\"first last\">the number of slices (if 3D), rows and columns of the images that\nare \u2018normally\u2019 warped using this transformation in the forward\ndirection (this will provide default transformation parameters to\nwarp images under this transformation). By default, we assume that\nthe inverse transformation is \u2018normally\u2019 used to warp images with\nthe same discretization and voxel-to-space transformation as the\ndeformation field grid.</p>\n</dd>\n<dt><strong>codomain_grid2world</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, shape (dim+1, dim+1)</span></dt>\n<dd><p class=\"first last\">the voxel-to-space transformation of images that are \u2018normally\u2019\nwarped using this transformation (in the forward direction).</p>\n</dd>\n<dt><strong>prealign</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, shape (dim+1, dim+1)</span></dt>\n<dd><p class=\"first last\">the linear transformation to be applied to align input images to\nthe reference space before warping under the deformation field.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.DiffeomorphicMap.allocate\">\n<code class=\"descname\">allocate</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.DiffeomorphicMap.allocate\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Creates a zero displacement field</p>\n<p>Creates a zero displacement field (the identity transformation).</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.DiffeomorphicMap.compute_inversion_error\">\n<code class=\"descname\">compute_inversion_error</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.DiffeomorphicMap.compute_inversion_error\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Inversion error of the displacement fields</p>\n<p>Estimates the inversion error of the displacement fields by computing\nstatistics of the residual vectors obtained after composing the forward\nand backward displacement fields.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>residual</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, shape (R, C) or (S, R, C)</span></dt>\n<dd><p class=\"first last\">the displacement field resulting from composing the forward and\nbackward displacement fields of this transformation (the residual\nshould be zero for a perfect diffeomorphism)</p>\n</dd>\n<dt><strong>stats</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, shape (3,)</span></dt>\n<dd><p class=\"first last\">statistics from the norms of the vectors of the residual\ndisplacement field: maximum, mean and standard deviation</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Notes</p>\n<p>Since the forward and backward displacement fields have the same\ndiscretization, the final composition is given by</p>\n<p>comp[i] = forward[ i + Dinv * backward[i]]</p>\n<p>where Dinv is the space-to-grid transformation of the displacement\nfields</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.DiffeomorphicMap.expand_fields\">\n<code class=\"descname\">expand_fields</code><span class=\"sig-paren\">(</span><em>expand_factors</em>, <em>new_shape</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.DiffeomorphicMap.expand_fields\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Expands the displacement fields from current shape to new_shape</p>\n<p>Up-samples the discretization of the displacement fields to be of\nnew_shape shape.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>expand_factors</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, shape (dim,)</span></dt>\n<dd><p class=\"first last\">the factors scaling current spacings (voxel sizes) to spacings in\nthe expanded discretization.</p>\n</dd>\n<dt><strong>new_shape</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, shape (dim,)</span></dt>\n<dd><p class=\"first last\">the shape of the arrays holding the up-sampled discretization</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.DiffeomorphicMap.get_backward_field\">\n<code class=\"descname\">get_backward_field</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.DiffeomorphicMap.get_backward_field\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Deformation field to transform an image in the backward direction</p>\n<p>Returns the deformation field that must be used to warp an image under\nthis transformation in the backward direction (note the \u2018is_inverse\u2019\nflag).</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.DiffeomorphicMap.get_forward_field\">\n<code class=\"descname\">get_forward_field</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.DiffeomorphicMap.get_forward_field\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Deformation field to transform an image in the forward direction</p>\n<p>Returns the deformation field that must be used to warp an image under\nthis transformation in the forward direction (note the \u2018is_inverse\u2019\nflag).</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.DiffeomorphicMap.get_simplified_transform\">\n<code class=\"descname\">get_simplified_transform</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.DiffeomorphicMap.get_simplified_transform\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Constructs a simplified version of this Diffeomorhic Map</p>\n<p>The simplified version incorporates the pre-align transform, as well as\nthe domain and codomain affine transforms into the displacement field.\nThe resulting transformation may be regarded as operating on the\nimage spaces given by the domain and codomain discretization. As a\nresult, self.prealign, self.disp_grid2world, self.domain_grid2world and\nself.codomain affine will be None (denoting Identity) in the resulting\ndiffeomorphic map.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.DiffeomorphicMap.interpret_matrix\">\n<code class=\"descname\">interpret_matrix</code><span class=\"sig-paren\">(</span><em>obj</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.DiffeomorphicMap.interpret_matrix\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Try to interpret <cite>obj</cite> as a matrix</p>\n<p>Some operations are performed faster if we know in advance if a matrix\nis the identity (so we can skip the actual matrix-vector\nmultiplication). This function returns None if the given object\nis None or the \u2018identity\u2019 string. It returns the same object if it is\na numpy array. It raises an exception otherwise.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>obj</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">object</span></dt>\n<dd><p class=\"first last\">any object</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>obj</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">object</span></dt>\n<dd><p class=\"first last\">the same object given as argument if <cite>obj</cite> is None or a numpy\narray. None if <cite>obj</cite> is the \u2018identity\u2019 string.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.DiffeomorphicMap.inverse\">\n<code class=\"descname\">inverse</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.DiffeomorphicMap.inverse\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Inverse of this DiffeomorphicMap instance</p>\n<p>Returns a diffeomorphic map object representing the inverse of this\ntransformation. The internal arrays are not copied but just referenced.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>inv</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">DiffeomorphicMap object</span></dt>\n<dd><p class=\"first last\">the inverse of this diffeomorphic map.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.DiffeomorphicMap.shallow_copy\">\n<code class=\"descname\">shallow_copy</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.DiffeomorphicMap.shallow_copy\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Shallow copy of this DiffeomorphicMap instance</p>\n<p>Creates a shallow copy of this diffeomorphic map (the arrays are not\ncopied but just referenced)</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>new_map</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">DiffeomorphicMap object</span></dt>\n<dd><p class=\"first last\">the shallow copy of this diffeomorphic map</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.DiffeomorphicMap.transform\">\n<code class=\"descname\">transform</code><span class=\"sig-paren\">(</span><em>image</em>, <em>interpolation='linear'</em>, <em>image_world2grid=None</em>, <em>out_shape=None</em>, <em>out_grid2world=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.DiffeomorphicMap.transform\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Warps an image in the forward direction</p>\n<p>Transforms the input image under this transformation in the forward\ndirection. It uses the \u201cis_inverse\u201d flag to switch between \u201cforward\u201d\nand \u201cbackward\u201d (if is_inverse is False, then transform(\u2026) warps the\nimage forwards, else it warps the image backwards).</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>image</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, shape (s, r, c) if dim = 3 or (r, c) if dim = 2</span></dt>\n<dd><p class=\"first last\">the image to be warped under this transformation in the forward\ndirection</p>\n</dd>\n<dt><strong>interpolation</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, either \u2018linear\u2019 or \u2018nearest\u2019</span></dt>\n<dd><p class=\"first last\">the type of interpolation to be used for warping, either \u2018linear\u2019\n(for k-linear interpolation) or \u2018nearest\u2019 for nearest neighbor</p>\n</dd>\n<dt><strong>image_world2grid</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, shape (dim+1, dim+1)</span></dt>\n<dd><p class=\"first last\">the transformation bringing world (space) coordinates to voxel\ncoordinates of the image given as input</p>\n</dd>\n<dt><strong>out_shape</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, shape (dim,)</span></dt>\n<dd><p class=\"first last\">the number of slices, rows and columns of the desired warped image</p>\n</dd>\n<dt><strong>out_grid2world</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">the transformation bringing voxel coordinates of the</span></dt>\n<dd><p class=\"first last\">warped image to physical space</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>warped</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, shape = out_shape or self.codomain_shape if None</span></dt>\n<dd><p class=\"first last\">the warped image under this transformation in the forward direction</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Notes</p>\n<p>See _warp_forward and _warp_backward documentation for further\ninformation.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.DiffeomorphicMap.transform_inverse\">\n<code class=\"descname\">transform_inverse</code><span class=\"sig-paren\">(</span><em>image</em>, <em>interpolation='linear'</em>, <em>image_world2grid=None</em>, <em>out_shape=None</em>, <em>out_grid2world=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.DiffeomorphicMap.transform_inverse\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Warps an image in the backward direction</p>\n<p>Transforms the input image under this transformation in the backward\ndirection. It uses the \u201cis_inverse\u201d flag to switch between \u201cforward\u201d\nand \u201cbackward\u201d (if is_inverse is False, then transform_inverse(\u2026)\nwarps the image backwards, else it warps the image forwards)</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>image</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, shape (s, r, c) if dim = 3 or (r, c) if dim = 2</span></dt>\n<dd><p class=\"first last\">the image to be warped under this transformation in the forward\ndirection</p>\n</dd>\n<dt><strong>interpolation</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, either \u2018linear\u2019 or \u2018nearest\u2019</span></dt>\n<dd><p class=\"first last\">the type of interpolation to be used for warping, either \u2018linear\u2019\n(for k-linear interpolation) or \u2018nearest\u2019 for nearest neighbor</p>\n</dd>\n<dt><strong>image_world2grid</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, shape (dim+1, dim+1)</span></dt>\n<dd><p class=\"first last\">the transformation bringing world (space) coordinates to voxel\ncoordinates of the image given as input</p>\n</dd>\n<dt><strong>out_shape</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, shape (dim,)</span></dt>\n<dd><p class=\"first last\">the number of slices, rows and columns of the desired warped image</p>\n</dd>\n<dt><strong>out_grid2world</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">the transformation bringing voxel coordinates of the</span></dt>\n<dd><p class=\"first last\">warped image to physical space</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>warped</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, shape = out_shape or self.codomain_shape if None</span></dt>\n<dd><p class=\"first last\">warped image under this transformation in the backward direction</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Notes</p>\n<p>See _warp_forward and _warp_backward documentation for further\ninformation.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.DiffeomorphicMap.warp_endomorphism\">\n<code class=\"descname\">warp_endomorphism</code><span class=\"sig-paren\">(</span><em>phi</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.DiffeomorphicMap.warp_endomorphism\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Composition of this DiffeomorphicMap with a given endomorphism</p>\n<p>Creates a new DiffeomorphicMap C with the same properties as self and\ncomposes its displacement fields with phi\u2019s corresponding fields.\nThe resulting diffeomorphism is of the form C(x) = phi(self(x)) with\ninverse C^{-1}(y) = self^{-1}(phi^{-1}(y)). We assume that phi is an\nendomorphism with the same discretization and domain affine as self\nto ensure that the composition inherits self\u2019s properties (we also\nassume that the pre-aligning matrix of phi is None or identity).</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>phi</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">DiffeomorphicMap object</span></dt>\n<dd><p class=\"first last\">the endomorphism to be warped by this diffeomorphic map</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>composition</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">the composition of this diffeomorphic map with the</span></dt>\n<dd><p class=\"first last\">endomorphism given as input</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Notes</p>\n<p>The problem with our current representation of a DiffeomorphicMap is\nthat the set of Diffeomorphism that can be represented this way (a\npre-aligning matrix followed by a non-linear endomorphism given as a\ndisplacement field) is not closed under the composition operation.</p>\n<p>Supporting a general DiffeomorphicMap class, closed under composition,\nmay be extremely costly computationally, and the kind of\ntransformations we actually need for Avants\u2019 mid-point algorithm (SyN)\nare much simpler.</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"emmetric\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.align.EMMetric\" title=\"dipy.workflows.align.EMMetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">EMMetric</span></code></a><a class=\"headerlink\" href=\"#emmetric\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.align.EMMetric\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.align.</code><code class=\"descname\">EMMetric</code><span class=\"sig-paren\">(</span><em>dim</em>, <em>smooth=1.0</em>, <em>inner_iter=5</em>, <em>q_levels=256</em>, <em>double_gradient=True</em>, <em>step_type='gauss_newton'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.EMMetric\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"../dipy.align/#dipy.align.metrics.SimilarityMetric\" title=\"dipy.align.metrics.SimilarityMetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.align.metrics.SimilarityMetric</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.EMMetric.compute_backward\" title=\"dipy.workflows.align.EMMetric.compute_backward\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">compute_backward</span></code></a>()</td>\n<td>Computes one step bringing the static image towards the moving.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.EMMetric.compute_demons_step\" title=\"dipy.workflows.align.EMMetric.compute_demons_step\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">compute_demons_step</span></code></a>([forward_step])</td>\n<td>Demons step for EM metric</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.EMMetric.compute_forward\" title=\"dipy.workflows.align.EMMetric.compute_forward\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">compute_forward</span></code></a>()</td>\n<td>Computes one step bringing the reference image towards the static.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.EMMetric.compute_gauss_newton_step\" title=\"dipy.workflows.align.EMMetric.compute_gauss_newton_step\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">compute_gauss_newton_step</span></code></a>([forward_step])</td>\n<td>Computes the Gauss-Newton energy minimization step</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.EMMetric.free_iteration\" title=\"dipy.workflows.align.EMMetric.free_iteration\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">free_iteration</span></code></a>()</td>\n<td>Frees the resources allocated during initialization</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.EMMetric.get_energy\" title=\"dipy.workflows.align.EMMetric.get_energy\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_energy</span></code></a>()</td>\n<td>The numerical value assigned by this metric to the current image pair</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.EMMetric.initialize_iteration\" title=\"dipy.workflows.align.EMMetric.initialize_iteration\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">initialize_iteration</span></code></a>()</td>\n<td>Prepares the metric to compute one displacement field iteration.</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">set_levels_above</span></code>(levels)</td>\n<td>Informs the metric how many pyramid levels are above the current one</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">set_levels_below</span></code>(levels)</td>\n<td>Informs the metric how many pyramid levels are below the current one</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">set_moving_image</span></code>(moving_image,&nbsp;\u2026)</td>\n<td>Sets the moving image being compared against the static one.</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">set_static_image</span></code>(static_image,&nbsp;\u2026)</td>\n<td>Sets the static image being compared against the moving one.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.EMMetric.use_moving_image_dynamics\" title=\"dipy.workflows.align.EMMetric.use_moving_image_dynamics\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">use_moving_image_dynamics</span></code></a>(\u2026)</td>\n<td>This is called by the optimizer just after setting the moving image.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.EMMetric.use_static_image_dynamics\" title=\"dipy.workflows.align.EMMetric.use_static_image_dynamics\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">use_static_image_dynamics</span></code></a>(\u2026)</td>\n<td>This is called by the optimizer just after setting the static image.</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.EMMetric.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>dim</em>, <em>smooth=1.0</em>, <em>inner_iter=5</em>, <em>q_levels=256</em>, <em>double_gradient=True</em>, <em>step_type='gauss_newton'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.EMMetric.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Expectation-Maximization Metric</p>\n<p>Similarity metric based on the Expectation-Maximization algorithm to\nhandle multi-modal images. The transfer function is modeled as a set of\nhidden random variables that are estimated at each iteration of the\nalgorithm.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>dim</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int (either 2 or 3)</span></dt>\n<dd><p class=\"first last\">the dimension of the image domain</p>\n</dd>\n<dt><strong>smooth</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float</span></dt>\n<dd><p class=\"first last\">smoothness parameter, the larger the value the smoother the\ndeformation field</p>\n</dd>\n<dt><strong>inner_iter</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int</span></dt>\n<dd><p class=\"first last\">number of iterations to be performed at each level of the multi-\nresolution Gauss-Seidel optimization algorithm (this is not the\nnumber of steps per Gaussian Pyramid level, that parameter must\nbe set for the optimizer, not the metric)</p>\n</dd>\n<dt><strong>q_levels</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">number of quantization levels (equal to the number of hidden</span></dt>\n<dd><p class=\"first last\">variables in the EM algorithm)</p>\n</dd>\n<dt><strong>double_gradient</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">boolean</span></dt>\n<dd><p class=\"first last\">if True, the gradient of the expected static image under the moving\nmodality will be added to the gradient of the moving image,\nsimilarly, the gradient of the expected moving image under the\nstatic modality will be added to the gradient of the static image.</p>\n</dd>\n<dt><strong>step_type</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string (\u2018gauss_newton\u2019, \u2018demons\u2019)</span></dt>\n<dd><p class=\"first last\">the optimization schedule to be used in the multi-resolution\nGauss-Seidel optimization algorithm (not used if Demons Step is\nselected)</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.EMMetric.compute_backward\">\n<code class=\"descname\">compute_backward</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.EMMetric.compute_backward\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes one step bringing the static image towards the moving.</p>\n<p>Computes the update displacement field to be used for registration of\nthe static image towards the moving image</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.EMMetric.compute_demons_step\">\n<code class=\"descname\">compute_demons_step</code><span class=\"sig-paren\">(</span><em>forward_step=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.EMMetric.compute_demons_step\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Demons step for EM metric</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>forward_step</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">boolean</span></dt>\n<dd><p class=\"first last\">if True, computes the Demons step in the forward direction\n(warping the moving towards the static image). If False,\ncomputes the backward step (warping the static image to the\nmoving image)</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>displacement</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, shape (R, C, 2) or (S, R, C, 3)</span></dt>\n<dd><p class=\"first last\">the Demons step</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.EMMetric.compute_forward\">\n<code class=\"descname\">compute_forward</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.EMMetric.compute_forward\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes one step bringing the reference image towards the static.</p>\n<p>Computes the forward update field to register the moving image towards\nthe static image in a gradient-based optimization algorithm</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.EMMetric.compute_gauss_newton_step\">\n<code class=\"descname\">compute_gauss_newton_step</code><span class=\"sig-paren\">(</span><em>forward_step=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.EMMetric.compute_gauss_newton_step\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes the Gauss-Newton energy minimization step</p>\n<p>Computes the Newton step to minimize this energy, i.e., minimizes the\nlinearized energy function with respect to the\nregularized displacement field (this step does not require\npost-smoothing, as opposed to the demons step, which does not include\nregularization). To accelerate convergence we use the multi-grid\nGauss-Seidel algorithm proposed by Bruhn and Weickert et al [Bruhn05]</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>forward_step</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">boolean</span></dt>\n<dd><p class=\"first last\">if True, computes the Newton step in the forward direction\n(warping the moving towards the static image). If False,\ncomputes the backward step (warping the static image to the\nmoving image)</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>displacement</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, shape (R, C, 2) or (S, R, C, 3)</span></dt>\n<dd><p class=\"first last\">the Newton step</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">References</p>\n<dl class=\"docutils\">\n<dt>[Bruhn05] Andres Bruhn and Joachim Weickert, \u201cTowards ultimate motion</dt>\n<dd>estimation: combining highest accuracy with real-time\nperformance\u201d, 10th IEEE International Conference on Computer\nVision, 2005. ICCV 2005.</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.EMMetric.free_iteration\">\n<code class=\"descname\">free_iteration</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.EMMetric.free_iteration\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Frees the resources allocated during initialization</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.EMMetric.get_energy\">\n<code class=\"descname\">get_energy</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.EMMetric.get_energy\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The numerical value assigned by this metric to the current image pair</p>\n<p>Returns the EM (data term) energy computed at the largest\niteration</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.EMMetric.initialize_iteration\">\n<code class=\"descname\">initialize_iteration</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.EMMetric.initialize_iteration\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Prepares the metric to compute one displacement field iteration.</p>\n<p>Pre-computes the transfer functions (hidden random variables) and\nvariances of the estimators. Also pre-computes the gradient of both\ninput images. Note that once the images are transformed to the opposite\nmodality, the gradient of the transformed images can be used with the\ngradient of the corresponding modality in the same fashion as\ndiff-demons does for mono-modality images. If the flag\nself.use_double_gradient is True these gradients are averaged.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.EMMetric.use_moving_image_dynamics\">\n<code class=\"descname\">use_moving_image_dynamics</code><span class=\"sig-paren\">(</span><em>original_moving_image</em>, <em>transformation</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.EMMetric.use_moving_image_dynamics\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>This is called by the optimizer just after setting the moving image.</p>\n<p>EMMetric takes advantage of the image dynamics by computing the\ncurrent moving image mask from the original_moving_image mask (warped\nby nearest neighbor interpolation)</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>original_moving_image</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, shape (R, C) or (S, R, C)</span></dt>\n<dd><p class=\"first last\">the original moving image from which the current moving image was\ngenerated, the current moving image is the one that was provided\nvia \u2018set_moving_image(\u2026)\u2019, which may not be the same as the\noriginal moving image but a warped version of it.</p>\n</dd>\n<dt><strong>transformation</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">DiffeomorphicMap object</span></dt>\n<dd><p class=\"first last\">the transformation that was applied to the original_moving_image\nto generate the current moving image</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.EMMetric.use_static_image_dynamics\">\n<code class=\"descname\">use_static_image_dynamics</code><span class=\"sig-paren\">(</span><em>original_static_image</em>, <em>transformation</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.EMMetric.use_static_image_dynamics\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>This is called by the optimizer just after setting the static image.</p>\n<p>EMMetric takes advantage of the image dynamics by computing the\ncurrent static image mask from the originalstaticImage mask (warped\nby nearest neighbor interpolation)</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>original_static_image</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, shape (R, C) or (S, R, C)</span></dt>\n<dd><p class=\"first last\">the original static image from which the current static image was\ngenerated, the current static image is the one that was provided\nvia \u2018set_static_image(\u2026)\u2019, which may not be the same as the\noriginal static image but a warped version of it (even the static\nimage changes during Symmetric Normalization, not only the moving\none).</p>\n</dd>\n<dt><strong>transformation</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">DiffeomorphicMap object</span></dt>\n<dd><p class=\"first last\">the transformation that was applied to the original_static_image\nto generate the current static image</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"imageregistrationflow\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.align.ImageRegistrationFlow\" title=\"dipy.workflows.align.ImageRegistrationFlow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ImageRegistrationFlow</span></code></a><a class=\"headerlink\" href=\"#imageregistrationflow\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.align.ImageRegistrationFlow\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.align.</code><code class=\"descname\">ImageRegistrationFlow</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.ImageRegistrationFlow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow\" title=\"dipy.workflows.workflow.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.workflows.workflow.Workflow</span></code></a></p>\n<p>The registration workflow is organized as a collection of different\nfunctions. The user can intend to use only one type of registration\n(such as center of mass or rigid body registration only).</p>\n<p>Alternatively, a registration can be done in a progressive manner.\nFor example, using affine registration with progressive set to \u2018True\u2019\nwill involve center of mass, translation, rigid body and full affine\nregistration. Whereas, when progressive is False the registration will\ninclude only center of mass and affine registration. The progressive\nregistration will be slower but will improve the quality.</p>\n<p>This can be controlled by using the progressive flag (True by default).</p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.ImageRegistrationFlow.affine\" title=\"dipy.workflows.align.ImageRegistrationFlow.affine\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">affine</span></code></a>(static,&nbsp;static_grid2world,&nbsp;moving,&nbsp;\u2026)</td>\n<td>Function for full affine registration.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.ImageRegistrationFlow.center_of_mass\" title=\"dipy.workflows.align.ImageRegistrationFlow.center_of_mass\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">center_of_mass</span></code></a>(static,&nbsp;static_grid2world,&nbsp;\u2026)</td>\n<td>Function for the center of mass based image registration.</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code>()</td>\n<td>Create an iterator for IO.</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code>()</td>\n<td>Return A short name for the workflow used to subdivide.</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code>()</td>\n<td>Return No sub runs since this is a simple workflow.</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code>()</td>\n<td>Check if a file will be overwritten upon processing the inputs.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.ImageRegistrationFlow.perform_transformation\" title=\"dipy.workflows.align.ImageRegistrationFlow.perform_transformation\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">perform_transformation</span></code></a>(static,&nbsp;\u2026)</td>\n<td>Function to apply the transformation.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.ImageRegistrationFlow.rigid\" title=\"dipy.workflows.align.ImageRegistrationFlow.rigid\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">rigid</span></code></a>(static,&nbsp;static_grid2world,&nbsp;moving,&nbsp;\u2026)</td>\n<td>Function for rigid body based image registration.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.ImageRegistrationFlow.run\" title=\"dipy.workflows.align.ImageRegistrationFlow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(static_img_files,&nbsp;moving_img_files[,&nbsp;\u2026])</td>\n<td><table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"></td>\n</tr>\n</tbody>\n</table>\n</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.ImageRegistrationFlow.translate\" title=\"dipy.workflows.align.ImageRegistrationFlow.translate\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">translate</span></code></a>(static,&nbsp;static_grid2world,&nbsp;moving,&nbsp;\u2026)</td>\n<td>Function for translation based registration.</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.ImageRegistrationFlow.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.ImageRegistrationFlow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.ImageRegistrationFlow.affine\">\n<code class=\"descname\">affine</code><span class=\"sig-paren\">(</span><em>static</em>, <em>static_grid2world</em>, <em>moving</em>, <em>moving_grid2world</em>, <em>affreg</em>, <em>params0</em>, <em>progressive</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.ImageRegistrationFlow.affine\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Function for full affine registration.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>static</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">2D or 3D array</span></dt>\n<dd><p class=\"first last\">the image to be used as reference during optimization.</p>\n</dd>\n<dt><strong>static_grid2world</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, shape (dim+1, dim+1), optional</span></dt>\n<dd><p class=\"first last\">the voxel-to-space transformation associated with the static\nimage. The default is None, implying the transform is the\nidentity.</p>\n</dd>\n<dt><strong>moving</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">2D or 3D array</span></dt>\n<dd><p class=\"first last\">the image to be used as \u201cmoving\u201d during optimization. It is\nnecessary to pre-align the moving image to ensure its domain\nlies inside the domain of the deformation fields. This is assumed\nto be accomplished by \u201cpre-aligning\u201d the moving image towards the\nstatic using an affine transformation given by the\n\u2018starting_affine\u2019 matrix</p>\n</dd>\n<dt><strong>moving_grid2world</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, shape (dim+1, dim+1), optional</span></dt>\n<dd><p class=\"first last\">the voxel-to-space transformation associated with the moving\nimage. The default is None, implying the transform is the\nidentity.</p>\n</dd>\n<dt><strong>affreg</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">An object of the image registration class.</span></dt>\n<dd></dd>\n<dt><strong>params0</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, shape (n,)</span></dt>\n<dd><p class=\"first last\">parameters from which to start the optimization. If None, the\noptimization will start at the identity transform. n is the\nnumber of parameters of the specified transformation.</p>\n</dd>\n<dt><strong>progressive</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">boolean</span></dt>\n<dd><p class=\"first last\">Flag to enable or disable the progressive registration. (defa\nult True)</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.ImageRegistrationFlow.center_of_mass\">\n<code class=\"descname\">center_of_mass</code><span class=\"sig-paren\">(</span><em>static</em>, <em>static_grid2world</em>, <em>moving</em>, <em>moving_grid2world</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.ImageRegistrationFlow.center_of_mass\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Function for the center of mass based image registration.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>static</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">2D or 3D array</span></dt>\n<dd><p class=\"first last\">the image to be used as reference during optimization.</p>\n</dd>\n<dt><strong>static_grid2world</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, shape (dim+1, dim+1), optional</span></dt>\n<dd><p class=\"first last\">the voxel-to-space transformation associated with the static\nimage. The default is None, implying the transform is the\nidentity.</p>\n</dd>\n<dt><strong>moving</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">2D or 3D array</span></dt>\n<dd><p class=\"first last\">the image to be used as \u201cmoving\u201d during optimization. It is\nnecessary to pre-align the moving image to ensure its domain\nlies inside the domain of the deformation fields. This is assumed\nto be accomplished by \u201cpre-aligning\u201d the moving image towards the\nstatic using an affine transformation given by the\n\u2018starting_affine\u2019 matrix</p>\n</dd>\n<dt><strong>moving_grid2world</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, shape (dim+1, dim+1), optional</span></dt>\n<dd><p class=\"first last\">the voxel-to-space transformation associated with the moving\nimage. The default is None, implying the transform is the\nidentity.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.ImageRegistrationFlow.perform_transformation\">\n<code class=\"descname\">perform_transformation</code><span class=\"sig-paren\">(</span><em>static</em>, <em>static_grid2world</em>, <em>moving</em>, <em>moving_grid2world</em>, <em>affreg</em>, <em>params0</em>, <em>transform</em>, <em>affine</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.ImageRegistrationFlow.perform_transformation\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Function to apply the transformation.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>static</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">2D or 3D array</span></dt>\n<dd><p class=\"first last\">the image to be used as reference during optimization.</p>\n</dd>\n<dt><strong>static_grid2world</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, shape (dim+1, dim+1), optional</span></dt>\n<dd><p class=\"first last\">the voxel-to-space transformation associated with the static\nimage. The default is None, implying the transform is the\nidentity.</p>\n</dd>\n<dt><strong>moving</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">2D or 3D array</span></dt>\n<dd><p class=\"first last\">the image to be used as \u201cmoving\u201d during optimization. It is\nnecessary to pre-align the moving image to ensure its domain\nlies inside the domain of the deformation fields. This is assumed\nto be accomplished by \u201cpre-aligning\u201d the moving image towards the\nstatic using an affine transformation given by the\n\u2018starting_affine\u2019 matrix</p>\n</dd>\n<dt><strong>moving_grid2world</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, shape (dim+1, dim+1), optional</span></dt>\n<dd><p class=\"first last\">the voxel-to-space transformation associated with the moving\nimage. The default is None, implying the transform is the\nidentity.</p>\n</dd>\n<dt><strong>affreg</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">An object of the image registration class.</span></dt>\n<dd></dd>\n<dt><strong>params0</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, shape (n,)</span></dt>\n<dd><p class=\"first last\">parameters from which to start the optimization. If None, the\noptimization will start at the identity transform. n is the\nnumber of parameters of the specified transformation.</p>\n</dd>\n<dt><strong>transform</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">An instance of transform type.</span></dt>\n<dd></dd>\n<dt><strong>affine</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">Affine matrix to be used as starting affine</span></dt>\n<dd></dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.ImageRegistrationFlow.rigid\">\n<code class=\"descname\">rigid</code><span class=\"sig-paren\">(</span><em>static</em>, <em>static_grid2world</em>, <em>moving</em>, <em>moving_grid2world</em>, <em>affreg</em>, <em>params0</em>, <em>progressive</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.ImageRegistrationFlow.rigid\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Function for rigid body based image registration.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>static</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">2D or 3D array</span></dt>\n<dd><p class=\"first last\">the image to be used as reference during optimization.</p>\n</dd>\n<dt><strong>static_grid2world</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, shape (dim+1, dim+1), optional</span></dt>\n<dd><p class=\"first last\">the voxel-to-space transformation associated with the static\nimage. The default is None, implying the transform is the\nidentity.</p>\n</dd>\n<dt><strong>moving</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">2D or 3D array</span></dt>\n<dd><p class=\"first last\">the image to be used as \u201cmoving\u201d during optimization. It is\nnecessary to pre-align the moving image to ensure its domain\nlies inside the domain of the deformation fields. This is assumed\nto be accomplished by \u201cpre-aligning\u201d the moving image towards the\nstatic using an affine transformation given by the\n\u2018starting_affine\u2019 matrix</p>\n</dd>\n<dt><strong>moving_grid2world</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, shape (dim+1, dim+1), optional</span></dt>\n<dd><p class=\"first last\">the voxel-to-space transformation associated with the moving\nimage. The default is None, implying the transform is the\nidentity.</p>\n</dd>\n<dt><strong>affreg</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">An object of the image registration class.</span></dt>\n<dd></dd>\n<dt><strong>params0</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, shape (n,)</span></dt>\n<dd><p class=\"first last\">parameters from which to start the optimization. If None, the\noptimization will start at the identity transform. n is the\nnumber of parameters of the specified transformation.</p>\n</dd>\n<dt><strong>progressive</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">boolean</span></dt>\n<dd><p class=\"first last\">Flag to enable or disable the progressive registration. (defa\nult True)</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.ImageRegistrationFlow.run\">\n<code class=\"descname\">run</code><span class=\"sig-paren\">(</span><em>static_img_files, moving_img_files, transform='affine', nbins=32, sampling_prop=None, metric='mi', level_iters=[10000, 1000, 100], sigmas=[3.0, 1.0, 0.0], factors=[4, 2, 1], progressive=True, save_metric=False, out_dir='', out_moved='moved.nii.gz', out_affine='affine.txt', out_quality='quality_metric.txt'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.ImageRegistrationFlow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>static_img_files</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">Path to the static image file.</p>\n</dd>\n<dt><strong>moving_img_files</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">Path to the moving image file.</p>\n</dd>\n<dt><strong>transform</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><dl class=\"first last docutils\">\n<dt>com: center of mass, trans: translation, rigid: rigid body</dt>\n<dd><p class=\"first last\">affine: full affine including translation, rotation, shearing and\nscaling (default \u2018affine\u2019).</p>\n</dd>\n</dl>\n</dd>\n<dt><strong>nbins</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int, optional</span></dt>\n<dd><dl class=\"first last docutils\">\n<dt>Number of bins to discretize the joint and marginal PDF</dt>\n<dd><p class=\"first last\">(default \u201832\u2019).</p>\n</dd>\n</dl>\n</dd>\n<dt><strong>sampling_prop</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int, optional</span></dt>\n<dd><dl class=\"first last docutils\">\n<dt>Number ([0-100]) of voxels for calculating the PDF.</dt>\n<dd><p class=\"first last\">\u2018None\u2019 implies all voxels (default \u2018None\u2019).</p>\n</dd>\n</dl>\n</dd>\n<dt><strong>metric</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><dl class=\"first last docutils\">\n<dt>Similarity metric for gathering mutual information</dt>\n<dd><p class=\"first last\">(default \u2018mi\u2019 , Mutual Information metric).</p>\n</dd>\n</dl>\n</dd>\n<dt><strong>level_iters</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">variable int, optional</span></dt>\n<dd><dl class=\"first last docutils\">\n<dt>The number of iterations at each scale of the scale space.</dt>\n<dd><p class=\"first\"><cite>level_iters[0]</cite> corresponds to the coarsest scale,\n<cite>level_iters[-1]</cite> the finest, where n is the length of the</p>\n<blockquote class=\"last\">\n<div><p>sequence. By default, a 3-level scale space with iterations\nsequence equal to [10000, 1000, 100] will be used.</p>\n</div></blockquote>\n</dd>\n</dl>\n</dd>\n<dt><strong>sigmas</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">variable floats, optional</span></dt>\n<dd><dl class=\"first last docutils\">\n<dt>Custom smoothing parameter to build the scale space (one parameter</dt>\n<dd><p class=\"first last\">for each scale). By default, the sequence of sigmas will be\n[3, 1, 0].</p>\n</dd>\n</dl>\n</dd>\n<dt><strong>factors</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">variable floats, optional</span></dt>\n<dd><dl class=\"first last docutils\">\n<dt>Custom scale factors to build the scale space (one factor for each</dt>\n<dd><p class=\"first last\">scale). By default, the sequence of factors will be [4, 2, 1].</p>\n</dd>\n</dl>\n</dd>\n<dt><strong>progressive</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">boolean, optional</span></dt>\n<dd><p class=\"first last\">Enable/Disable the progressive registration (default \u2018True\u2019).</p>\n</dd>\n<dt><strong>save_metric</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">boolean, optional</span></dt>\n<dd><p class=\"first last\">If true, quality assessment metric are saved in\n\u2018quality_metric.txt\u2019 (default \u2018False\u2019).</p>\n</dd>\n<dt><strong>out_dir</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><dl class=\"first last docutils\">\n<dt>Directory to save the transformed image and the affine matrix</dt>\n<dd><p class=\"first last\">(default \u2018\u2019).</p>\n</dd>\n</dl>\n</dd>\n<dt><strong>out_moved</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><dl class=\"first last docutils\">\n<dt>Name for the saved transformed image</dt>\n<dd><p class=\"first last\">(default \u2018moved.nii.gz\u2019).</p>\n</dd>\n</dl>\n</dd>\n<dt><strong>out_affine</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><dl class=\"first last docutils\">\n<dt>Name for the saved affine matrix</dt>\n<dd><p class=\"first last\">(default \u2018affine.txt\u2019).</p>\n</dd>\n</dl>\n</dd>\n<dt><strong>out_quality</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><dl class=\"first last docutils\">\n<dt>Name of the file containing the saved quality</dt>\n<dd><p class=\"first last\">metric (default \u2018quality_metric.txt\u2019).</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.ImageRegistrationFlow.translate\">\n<code class=\"descname\">translate</code><span class=\"sig-paren\">(</span><em>static</em>, <em>static_grid2world</em>, <em>moving</em>, <em>moving_grid2world</em>, <em>affreg</em>, <em>params0</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.ImageRegistrationFlow.translate\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Function for translation based registration.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>static</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">2D or 3D array</span></dt>\n<dd><p class=\"first last\">the image to be used as reference during optimization.</p>\n</dd>\n<dt><strong>static_grid2world</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, shape (dim+1, dim+1), optional</span></dt>\n<dd><p class=\"first last\">the voxel-to-space transformation associated with the static\nimage. The default is None, implying the transform is the\nidentity.</p>\n</dd>\n<dt><strong>moving</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">2D or 3D  array</span></dt>\n<dd><p class=\"first last\">the image to be used as \u201cmoving\u201d during optimization. It is\nnecessary to pre-align the moving image to ensure its domain\nlies inside the domain of the deformation fields. This is assumed\nto be accomplished by \u201cpre-aligning\u201d the moving image towards the\nstatic using an affine transformation given by the\n\u2018starting_affine\u2019 matrix</p>\n</dd>\n<dt><strong>moving_grid2world</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, shape (dim+1, dim+1), optional</span></dt>\n<dd><p class=\"first last\">the voxel-to-space transformation associated with the moving\nimage. The default is None, implying the transform is the\nidentity.</p>\n</dd>\n<dt><strong>affreg</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">An object of the image registration class.</span></dt>\n<dd></dd>\n<dt><strong>params0</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, shape (n,)</span></dt>\n<dd><p class=\"first last\">parameters from which to start the optimization. If None, the\noptimization will start at the identity transform. n is the\nnumber of parameters of the specified transformation.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"mutualinformationmetric\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.align.MutualInformationMetric\" title=\"dipy.workflows.align.MutualInformationMetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">MutualInformationMetric</span></code></a><a class=\"headerlink\" href=\"#mutualinformationmetric\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.align.MutualInformationMetric\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.align.</code><code class=\"descname\">MutualInformationMetric</code><span class=\"sig-paren\">(</span><em>nbins=32</em>, <em>sampling_proportion=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.MutualInformationMetric\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.7)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.MutualInformationMetric.distance\" title=\"dipy.workflows.align.MutualInformationMetric.distance\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">distance</span></code></a>(params)</td>\n<td>Numeric value of the negative Mutual Information</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.MutualInformationMetric.distance_and_gradient\" title=\"dipy.workflows.align.MutualInformationMetric.distance_and_gradient\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">distance_and_gradient</span></code></a>(params)</td>\n<td>Numeric value of the metric and its gradient at given parameters</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.MutualInformationMetric.gradient\" title=\"dipy.workflows.align.MutualInformationMetric.gradient\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">gradient</span></code></a>(params)</td>\n<td>Numeric value of the metric\u2019s gradient at the given parameters</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.MutualInformationMetric.setup\" title=\"dipy.workflows.align.MutualInformationMetric.setup\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">setup</span></code></a>(transform,&nbsp;static,&nbsp;moving[,&nbsp;\u2026])</td>\n<td>Prepares the metric to compute intensity densities and gradients</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.MutualInformationMetric.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>nbins=32</em>, <em>sampling_proportion=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.MutualInformationMetric.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initializes an instance of the Mutual Information metric</p>\n<p>This class implements the methods required by Optimizer to drive the\nregistration process.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>nbins</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int, optional</span></dt>\n<dd><p class=\"first last\">the number of bins to be used for computing the intensity\nhistograms. The default is 32.</p>\n</dd>\n<dt><strong>sampling_proportion</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">None or float in interval (0, 1], optional</span></dt>\n<dd><p class=\"first last\">There are two types of sampling: dense and sparse. Dense sampling\nuses all voxels for estimating the (joint and marginal) intensity\nhistograms, while sparse sampling uses a subset of them. If\n<cite>sampling_proportion</cite> is None, then dense sampling is\nused. If <cite>sampling_proportion</cite> is a floating point value in (0,1]\nthen sparse sampling is used, where <cite>sampling_proportion</cite>\nspecifies the proportion of voxels to be used. The default is\nNone.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Notes</p>\n<p>Since we use linear interpolation, images are not, in general,\ndifferentiable at exact voxel coordinates, but they are differentiable\nbetween voxel coordinates. When using sparse sampling, selected voxels\nare slightly moved by adding a small random displacement within one\nvoxel to prevent sampling points from being located exactly at voxel\ncoordinates. When using dense sampling, this random displacement is\nnot applied.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.MutualInformationMetric.distance\">\n<code class=\"descname\">distance</code><span class=\"sig-paren\">(</span><em>params</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.MutualInformationMetric.distance\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Numeric value of the negative Mutual Information</p>\n<p>We need to change the sign so we can use standard minimization\nalgorithms.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>params</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, shape (n,)</span></dt>\n<dd><p class=\"first last\">the parameter vector of the transform currently used by the metric\n(the transform name is provided when self.setup is called), n is\nthe number of parameters of the transform</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>neg_mi</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float</span></dt>\n<dd><p class=\"first last\">the negative mutual information of the input images after\ntransforming the moving image by the currently set transform\nwith <cite>params</cite> parameters</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.MutualInformationMetric.distance_and_gradient\">\n<code class=\"descname\">distance_and_gradient</code><span class=\"sig-paren\">(</span><em>params</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.MutualInformationMetric.distance_and_gradient\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Numeric value of the metric and its gradient at given parameters</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>params</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, shape (n,)</span></dt>\n<dd><p class=\"first last\">the parameter vector of the transform currently used by the metric\n(the transform name is provided when self.setup is called), n is\nthe number of parameters of the transform</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>neg_mi</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float</span></dt>\n<dd><p class=\"first last\">the negative mutual information of the input images after\ntransforming the moving image by the currently set transform\nwith <cite>params</cite> parameters</p>\n</dd>\n<dt><strong>neg_mi_grad</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, shape (n,)</span></dt>\n<dd><p class=\"first last\">the gradient of the negative Mutual Information</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.MutualInformationMetric.gradient\">\n<code class=\"descname\">gradient</code><span class=\"sig-paren\">(</span><em>params</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.MutualInformationMetric.gradient\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Numeric value of the metric\u2019s gradient at the given parameters</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>params</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, shape (n,)</span></dt>\n<dd><p class=\"first last\">the parameter vector of the transform currently used by the metric\n(the transform name is provided when self.setup is called), n is\nthe number of parameters of the transform</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>grad</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, shape (n,)</span></dt>\n<dd><p class=\"first last\">the gradient of the negative Mutual Information</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.MutualInformationMetric.setup\">\n<code class=\"descname\">setup</code><span class=\"sig-paren\">(</span><em>transform</em>, <em>static</em>, <em>moving</em>, <em>static_grid2world=None</em>, <em>moving_grid2world=None</em>, <em>starting_affine=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.MutualInformationMetric.setup\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Prepares the metric to compute intensity densities and gradients</p>\n<p>The histograms will be setup to compute probability densities of\nintensities within the minimum and maximum values of <cite>static</cite> and\n<cite>moving</cite></p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>transform: instance of Transform</strong></dt>\n<dd><p class=\"first last\">the transformation with respect to whose parameters the gradient\nmust be computed</p>\n</dd>\n<dt><strong>static</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, shape (S, R, C) or (R, C)</span></dt>\n<dd><p class=\"first last\">static image</p>\n</dd>\n<dt><strong>moving</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, shape (S\u2019, R\u2019, C\u2019) or (R\u2019, C\u2019)</span></dt>\n<dd><p class=\"first last\">moving image. The dimensions of the static (S, R, C) and moving\n(S\u2019, R\u2019, C\u2019) images do not need to be the same.</p>\n</dd>\n<dt><strong>static_grid2world</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array (dim+1, dim+1), optional</span></dt>\n<dd><p class=\"first last\">the grid-to-space transform of the static image. The default is\nNone, implying the transform is the identity.</p>\n</dd>\n<dt><strong>moving_grid2world</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array (dim+1, dim+1)</span></dt>\n<dd><p class=\"first last\">the grid-to-space transform of the moving image. The default is\nNone, implying the spacing along all axes is 1.</p>\n</dd>\n<dt><strong>starting_affine</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, shape (dim+1, dim+1), optional</span></dt>\n<dd><p class=\"first last\">the pre-aligning matrix (an affine transform) that roughly aligns\nthe moving image towards the static image. If None, no\npre-alignment is performed. If a pre-alignment matrix is available,\nit is recommended to provide this matrix as <cite>starting_affine</cite>\ninstead of manually transforming the moving image to reduce\ninterpolation artifacts. The default is None, implying no\npre-alignment is performed.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"resliceflow\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.align.ResliceFlow\" title=\"dipy.workflows.align.ResliceFlow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ResliceFlow</span></code></a><a class=\"headerlink\" href=\"#resliceflow\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.align.ResliceFlow\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.align.</code><code class=\"descname\">ResliceFlow</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.ResliceFlow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow\" title=\"dipy.workflows.workflow.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.workflows.workflow.Workflow</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code>()</td>\n<td>Create an iterator for IO.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.ResliceFlow.get_short_name\" title=\"dipy.workflows.align.ResliceFlow.get_short_name\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code></a>()</td>\n<td>Return A short name for the workflow used to subdivide.</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code>()</td>\n<td>Return No sub runs since this is a simple workflow.</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code>()</td>\n<td>Check if a file will be overwritten upon processing the inputs.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.ResliceFlow.run\" title=\"dipy.workflows.align.ResliceFlow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(input_files,&nbsp;new_vox_size[,&nbsp;order,&nbsp;\u2026])</td>\n<td>Reslice data with new voxel resolution defined by <code class=\"docutils literal notranslate\"><span class=\"pre\">new_vox_sz</span></code></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.ResliceFlow.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.ResliceFlow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"classmethod\">\n<dt id=\"dipy.workflows.align.ResliceFlow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.ResliceFlow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return A short name for the workflow used to subdivide.</p>\n<p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name.</p>\n<p>For example, a combined workflow with dti reconstruction and csd\nreconstruction might en up with the b0_threshold parameter. Using short\nnames, we will have dti.b0_threshold and csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.ResliceFlow.run\">\n<code class=\"descname\">run</code><span class=\"sig-paren\">(</span><em>input_files</em>, <em>new_vox_size</em>, <em>order=1</em>, <em>mode='constant'</em>, <em>cval=0</em>, <em>num_processes=1</em>, <em>out_dir=''</em>, <em>out_resliced='resliced.nii.gz'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.ResliceFlow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Reslice data with new voxel resolution defined by <code class=\"docutils literal notranslate\"><span class=\"pre\">new_vox_sz</span></code></p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>input_files</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">Path to the input volumes. This path may contain wildcards to\nprocess multiple inputs at once.</p>\n</dd>\n<dt><strong>new_vox_size</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">variable float</span></dt>\n<dd><p class=\"first last\">new voxel size</p>\n</dd>\n<dt><strong>order</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int, optional</span></dt>\n<dd><p class=\"first last\">order of interpolation, from 0 to 5, for resampling/reslicing,\n0 nearest interpolation, 1 trilinear etc.. if you don\u2019t want any\nsmoothing 0 is the option you need (default 1)</p>\n</dd>\n<dt><strong>mode</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Points outside the boundaries of the input are filled according\nto the given mode \u2018constant\u2019, \u2018nearest\u2019, \u2018reflect\u2019 or \u2018wrap\u2019\n(default \u2018constant\u2019)</p>\n</dd>\n<dt><strong>cval</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float, optional</span></dt>\n<dd><p class=\"first last\">Value used for points outside the boundaries of the input if\nmode=\u2019constant\u2019 (default 0)</p>\n</dd>\n<dt><strong>num_processes</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int, optional</span></dt>\n<dd><p class=\"first last\">Split the calculation to a pool of children processes. This only\napplies to 4D <cite>data</cite> arrays. If a positive integer then it defines\nthe size of the multiprocessing pool that will be used. If 0, then\nthe size of the pool will equal the number of cores available.\n(default 1)</p>\n</dd>\n<dt><strong>out_dir</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Output directory (default input file directory)</p>\n</dd>\n<dt><strong>out_resliced</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the resliced dataset to be saved\n(default \u2018resliced.nii.gz\u2019)</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"rigidtransform3d\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.align.RigidTransform3D\" title=\"dipy.workflows.align.RigidTransform3D\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">RigidTransform3D</span></code></a><a class=\"headerlink\" href=\"#rigidtransform3d\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.align.RigidTransform3D\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.align.</code><code class=\"descname\">RigidTransform3D</code><a class=\"headerlink\" href=\"#dipy.workflows.align.RigidTransform3D\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.align.transforms.Transform</span></code></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_identity_parameters</span></code></td>\n<td>Parameter values corresponding to the identity transform</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">jacobian</span></code></td>\n<td>Jacobian function of this transform</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">param_to_matrix</span></code></td>\n<td>Matrix representation of this transform with the given parameters</td>\n</tr>\n</tbody>\n</table>\n<table border=\"1\" class=\"docutils\">\n<colgroup>\n<col width=\"74%\" />\n<col width=\"26%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><strong>get_dim</strong></td>\n<td>&#160;</td>\n</tr>\n<tr class=\"row-even\"><td><strong>get_number_of_parameters</strong></td>\n<td>&#160;</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.RigidTransform3D.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.RigidTransform3D.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Rigid transform in 3D (rotation + translation)\nThe parameter vector theta of length 6 is interpreted as follows:\ntheta[0] : rotation about the x axis\ntheta[1] : rotation about the y axis\ntheta[2] : rotation about the z axis\ntheta[3] : translation along the x axis\ntheta[4] : translation along the y axis\ntheta[5] : translation along the z axis</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"ssdmetric\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.align.SSDMetric\" title=\"dipy.workflows.align.SSDMetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SSDMetric</span></code></a><a class=\"headerlink\" href=\"#ssdmetric\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.align.SSDMetric\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.align.</code><code class=\"descname\">SSDMetric</code><span class=\"sig-paren\">(</span><em>dim</em>, <em>smooth=4</em>, <em>inner_iter=10</em>, <em>step_type='demons'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.SSDMetric\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"../dipy.align/#dipy.align.metrics.SimilarityMetric\" title=\"dipy.align.metrics.SimilarityMetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.align.metrics.SimilarityMetric</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.SSDMetric.compute_backward\" title=\"dipy.workflows.align.SSDMetric.compute_backward\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">compute_backward</span></code></a>()</td>\n<td>Computes one step bringing the static image towards the moving.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.SSDMetric.compute_demons_step\" title=\"dipy.workflows.align.SSDMetric.compute_demons_step\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">compute_demons_step</span></code></a>([forward_step])</td>\n<td>Demons step for SSD metric</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.SSDMetric.compute_forward\" title=\"dipy.workflows.align.SSDMetric.compute_forward\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">compute_forward</span></code></a>()</td>\n<td>Computes one step bringing the reference image towards the static.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.SSDMetric.compute_gauss_newton_step\" title=\"dipy.workflows.align.SSDMetric.compute_gauss_newton_step\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">compute_gauss_newton_step</span></code></a>([forward_step])</td>\n<td>Computes the Gauss-Newton energy minimization step</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.SSDMetric.free_iteration\" title=\"dipy.workflows.align.SSDMetric.free_iteration\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">free_iteration</span></code></a>()</td>\n<td>Nothing to free for the SSD metric</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.SSDMetric.get_energy\" title=\"dipy.workflows.align.SSDMetric.get_energy\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_energy</span></code></a>()</td>\n<td>The numerical value assigned by this metric to the current image pair</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.SSDMetric.initialize_iteration\" title=\"dipy.workflows.align.SSDMetric.initialize_iteration\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">initialize_iteration</span></code></a>()</td>\n<td>Prepares the metric to compute one displacement field iteration.</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">set_levels_above</span></code>(levels)</td>\n<td>Informs the metric how many pyramid levels are above the current one</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">set_levels_below</span></code>(levels)</td>\n<td>Informs the metric how many pyramid levels are below the current one</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">set_moving_image</span></code>(moving_image,&nbsp;\u2026)</td>\n<td>Sets the moving image being compared against the static one.</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">set_static_image</span></code>(static_image,&nbsp;\u2026)</td>\n<td>Sets the static image being compared against the moving one.</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">use_moving_image_dynamics</span></code>(\u2026)</td>\n<td>This is called by the optimizer just after setting the moving image</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">use_static_image_dynamics</span></code>(\u2026)</td>\n<td>This is called by the optimizer just after setting the static image.</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.SSDMetric.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>dim</em>, <em>smooth=4</em>, <em>inner_iter=10</em>, <em>step_type='demons'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.SSDMetric.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Sum of Squared Differences (SSD) Metric</p>\n<p>Similarity metric for (mono-modal) nonlinear image registration defined\nby the sum of squared differences (SSD)</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>dim</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int (either 2 or 3)</span></dt>\n<dd><p class=\"first last\">the dimension of the image domain</p>\n</dd>\n<dt><strong>smooth</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float</span></dt>\n<dd><p class=\"first last\">smoothness parameter, the larger the value the smoother the\ndeformation field</p>\n</dd>\n<dt><strong>inner_iter</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int</span></dt>\n<dd><p class=\"first last\">number of iterations to be performed at each level of the multi-\nresolution Gauss-Seidel optimization algorithm (this is not the\nnumber of steps per Gaussian Pyramid level, that parameter must\nbe set for the optimizer, not the metric)</p>\n</dd>\n<dt><strong>step_type</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">the displacement field step to be computed when \u2018compute_forward\u2019\nand \u2018compute_backward\u2019 are called. Either \u2018demons\u2019 or\n\u2018gauss_newton\u2019</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.SSDMetric.compute_backward\">\n<code class=\"descname\">compute_backward</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.SSDMetric.compute_backward\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes one step bringing the static image towards the moving.</p>\n<p>Computes the update displacement field to be used for registration of\nthe static image towards the moving image</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.SSDMetric.compute_demons_step\">\n<code class=\"descname\">compute_demons_step</code><span class=\"sig-paren\">(</span><em>forward_step=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.SSDMetric.compute_demons_step\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Demons step for SSD metric</p>\n<p>Computes the demons step proposed by Vercauteren et al.[Vercauteren09]\nfor the SSD metric.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>forward_step</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">boolean</span></dt>\n<dd><p class=\"first last\">if True, computes the Demons step in the forward direction\n(warping the moving towards the static image). If False,\ncomputes the backward step (warping the static image to the\nmoving image)</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>displacement</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, shape (R, C, 2) or (S, R, C, 3)</span></dt>\n<dd><p class=\"first last\">the Demons step</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">References</p>\n<dl class=\"docutils\">\n<dt>[Vercauteren09] Tom Vercauteren, Xavier Pennec, Aymeric Perchant,</dt>\n<dd>Nicholas Ayache, \u201cDiffeomorphic Demons: Efficient\nNon-parametric Image Registration\u201d, Neuroimage 2009</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.SSDMetric.compute_forward\">\n<code class=\"descname\">compute_forward</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.SSDMetric.compute_forward\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes one step bringing the reference image towards the static.</p>\n<p>Computes the update displacement field to be used for registration of\nthe moving image towards the static image</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.SSDMetric.compute_gauss_newton_step\">\n<code class=\"descname\">compute_gauss_newton_step</code><span class=\"sig-paren\">(</span><em>forward_step=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.SSDMetric.compute_gauss_newton_step\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes the Gauss-Newton energy minimization step</p>\n<p>Minimizes the linearized energy function (Newton step) defined by the\nsum of squared differences of corresponding pixels of the input images\nwith respect to the displacement field.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>forward_step</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">boolean</span></dt>\n<dd><p class=\"first last\">if True, computes the Newton step in the forward direction\n(warping the moving towards the static image). If False,\ncomputes the backward step (warping the static image to the\nmoving image)</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>displacement</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, shape = static_image.shape + (3,)</span></dt>\n<dd><p class=\"first last\">if forward_step==True, the forward SSD Gauss-Newton step,\nelse, the backward step</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.SSDMetric.free_iteration\">\n<code class=\"descname\">free_iteration</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.SSDMetric.free_iteration\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Nothing to free for the SSD metric</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.SSDMetric.get_energy\">\n<code class=\"descname\">get_energy</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.SSDMetric.get_energy\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The numerical value assigned by this metric to the current image pair</p>\n<p>Returns the Sum of Squared Differences (data term) energy computed at\nthe largest iteration</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.SSDMetric.initialize_iteration\">\n<code class=\"descname\">initialize_iteration</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.SSDMetric.initialize_iteration\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Prepares the metric to compute one displacement field iteration.</p>\n<p>Pre-computes the gradient of the input images to be used in the\ncomputation of the forward and backward steps.</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"slrwithqbxflow\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.align.SlrWithQbxFlow\" title=\"dipy.workflows.align.SlrWithQbxFlow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SlrWithQbxFlow</span></code></a><a class=\"headerlink\" href=\"#slrwithqbxflow\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.align.SlrWithQbxFlow\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.align.</code><code class=\"descname\">SlrWithQbxFlow</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.SlrWithQbxFlow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow\" title=\"dipy.workflows.workflow.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.workflows.workflow.Workflow</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code>()</td>\n<td>Create an iterator for IO.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.SlrWithQbxFlow.get_short_name\" title=\"dipy.workflows.align.SlrWithQbxFlow.get_short_name\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code></a>()</td>\n<td>Return A short name for the workflow used to subdivide.</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code>()</td>\n<td>Return No sub runs since this is a simple workflow.</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code>()</td>\n<td>Check if a file will be overwritten upon processing the inputs.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.SlrWithQbxFlow.run\" title=\"dipy.workflows.align.SlrWithQbxFlow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(static_files,&nbsp;moving_files[,&nbsp;x0,&nbsp;\u2026])</td>\n<td>Streamline-based linear registration.</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.SlrWithQbxFlow.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.SlrWithQbxFlow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"classmethod\">\n<dt id=\"dipy.workflows.align.SlrWithQbxFlow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.SlrWithQbxFlow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return A short name for the workflow used to subdivide.</p>\n<p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name.</p>\n<p>For example, a combined workflow with dti reconstruction and csd\nreconstruction might en up with the b0_threshold parameter. Using short\nnames, we will have dti.b0_threshold and csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.SlrWithQbxFlow.run\">\n<code class=\"descname\">run</code><span class=\"sig-paren\">(</span><em>static_files, moving_files, x0='affine', rm_small_clusters=50, qbx_thr=[40, 30, 20, 15], num_threads=None, greater_than=50, less_than=250, nb_pts=20, progressive=True, out_dir='', out_moved='moved.trk', out_affine='affine.txt', out_stat_centroids='static_centroids.trk', out_moving_centroids='moving_centroids.trk', out_moved_centroids='moved_centroids.trk'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.SlrWithQbxFlow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Streamline-based linear registration.</p>\n<p>For efficiency we apply the registration on cluster centroids and\nremove small clusters.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>static_files</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd></dd>\n<dt><strong>moving_files</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd></dd>\n<dt><strong>x0</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">rigid, similarity or affine transformation model (default affine)</p>\n</dd>\n<dt><strong>rm_small_clusters</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int, optional</span></dt>\n<dd><p class=\"first last\">Remove clusters that have less than <cite>rm_small_clusters</cite>\n(default 50)</p>\n</dd>\n<dt><strong>qbx_thr</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">variable int, optional</span></dt>\n<dd><p class=\"first last\">Thresholds for QuickBundlesX (default [40, 30, 20, 15])</p>\n</dd>\n<dt><strong>num_threads</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int, optional</span></dt>\n<dd><p class=\"first last\">Number of threads. If None (default) then all available threads\nwill be used. Only metrics using OpenMP will use this variable.</p>\n</dd>\n<dt><strong>greater_than</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int, optional</span></dt>\n<dd><p class=\"first last\">Keep streamlines that have length greater than\nthis value (default 50)</p>\n</dd>\n<dt><strong>less_than</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int, optional</span></dt>\n<dd><p class=\"first last\">Keep streamlines have length less than this value (default 250)</p>\n</dd>\n<dt><strong>np_pts</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int, optional</span></dt>\n<dd><p class=\"first last\">Number of points for discretizing each streamline (default 20)</p>\n</dd>\n<dt><strong>progressive</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">boolean, optional</span></dt>\n<dd><p class=\"first last\">(default True)</p>\n</dd>\n<dt><strong>out_dir</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Output directory (default input file directory)</p>\n</dd>\n<dt><strong>out_moved</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Filename of moved tractogram (default \u2018moved.trk\u2019)</p>\n</dd>\n<dt><strong>out_affine</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Filename of affine for SLR transformation (default \u2018affine.txt\u2019)</p>\n</dd>\n<dt><strong>out_stat_centroids</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Filename of static centroids (default \u2018static_centroids.trk\u2019)</p>\n</dd>\n<dt><strong>out_moving_centroids</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Filename of moving centroids (default \u2018moving_centroids.trk\u2019)</p>\n</dd>\n<dt><strong>out_moved_centroids</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Filename of moved centroids (default \u2018moved_centroids.trk\u2019)</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Notes</p>\n<p>The order of operations is the following. First short or long\nstreamlines are removed. Second the tractogram or a random selection\nof the tractogram is clustered with QuickBundlesX. Then SLR\n<a class=\"reference internal\" href=\"#r63af61b7286e-garyfallidis15\" id=\"id13\">[Garyfallidis15]</a> is applied.</p>\n<p class=\"rubric\">References</p>\n<table class=\"docutils citation\" frame=\"void\" id=\"r63af61b7286e-garyfallidis15\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\">[Garyfallidis15]</td><td><em>(<a class=\"fn-backref\" href=\"#id13\">1</a>, <a class=\"fn-backref\" href=\"#id14\">2</a>)</em> Garyfallidis et al. \u201cRobust and efficient linear</td></tr>\n</tbody>\n</table>\n<p>registration of white-matter fascicles in the space of\nstreamlines\u201d, NeuroImage, 117, 124\u2013140, 2015</p>\n<table class=\"docutils citation\" frame=\"void\" id=\"r63af61b7286e-garyfallidis14\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\"><a class=\"fn-backref\" href=\"#id15\">[Garyfallidis14]</a></td><td>Garyfallidis et al., \u201cDirect native-space fiber</td></tr>\n</tbody>\n</table>\n<p>bundle alignment for group comparisons\u201d, ISMRM, 2014.</p>\n<table class=\"docutils citation\" frame=\"void\" id=\"r63af61b7286e-garyfallidis17\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\"><a class=\"fn-backref\" href=\"#id16\">[Garyfallidis17]</a></td><td>Garyfallidis et al. Recognition of white matter</td></tr>\n</tbody>\n</table>\n<p>bundles using local and global streamline-based registration\nand clustering, Neuroimage, 2017.</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"symmetricdiffeomorphicregistration\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.align.SymmetricDiffeomorphicRegistration\" title=\"dipy.workflows.align.SymmetricDiffeomorphicRegistration\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SymmetricDiffeomorphicRegistration</span></code></a><a class=\"headerlink\" href=\"#symmetricdiffeomorphicregistration\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.align.SymmetricDiffeomorphicRegistration\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.align.</code><code class=\"descname\">SymmetricDiffeomorphicRegistration</code><span class=\"sig-paren\">(</span><em>metric</em>, <em>level_iters=None</em>, <em>step_length=0.25</em>, <em>ss_sigma_factor=0.2</em>, <em>opt_tol=1e-05</em>, <em>inv_iter=20</em>, <em>inv_tol=0.001</em>, <em>callback=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.SymmetricDiffeomorphicRegistration\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"../dipy.align/#dipy.align.imwarp.DiffeomorphicRegistration\" title=\"dipy.align.imwarp.DiffeomorphicRegistration\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.align.imwarp.DiffeomorphicRegistration</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.SymmetricDiffeomorphicRegistration.get_map\" title=\"dipy.workflows.align.SymmetricDiffeomorphicRegistration.get_map\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_map</span></code></a>()</td>\n<td>Returns the resulting diffeomorphic map Returns the DiffeomorphicMap registering the moving image towards the static image.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.SymmetricDiffeomorphicRegistration.optimize\" title=\"dipy.workflows.align.SymmetricDiffeomorphicRegistration.optimize\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">optimize</span></code></a>(static,&nbsp;moving[,&nbsp;\u2026])</td>\n<td>Starts the optimization</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">set_level_iters</span></code>(level_iters)</td>\n<td>Sets the number of iterations at each pyramid level</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.SymmetricDiffeomorphicRegistration.update\" title=\"dipy.workflows.align.SymmetricDiffeomorphicRegistration.update\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">update</span></code></a>(current_displacement,&nbsp;\u2026)</td>\n<td>Composition of the current displacement field with the given field</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.SymmetricDiffeomorphicRegistration.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>metric</em>, <em>level_iters=None</em>, <em>step_length=0.25</em>, <em>ss_sigma_factor=0.2</em>, <em>opt_tol=1e-05</em>, <em>inv_iter=20</em>, <em>inv_tol=0.001</em>, <em>callback=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.SymmetricDiffeomorphicRegistration.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Symmetric Diffeomorphic Registration (SyN) Algorithm</p>\n<p>Performs the multi-resolution optimization algorithm for non-linear\nregistration using a given similarity metric.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>metric</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">SimilarityMetric object</span></dt>\n<dd><p class=\"first last\">the metric to be optimized</p>\n</dd>\n<dt><strong>level_iters</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">list of int</span></dt>\n<dd><p class=\"first last\">the number of iterations at each level of the Gaussian Pyramid (the\nlength of the list defines the number of pyramid levels to be\nused)</p>\n</dd>\n<dt><strong>opt_tol</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float</span></dt>\n<dd><p class=\"first last\">the optimization will stop when the estimated derivative of the\nenergy profile w.r.t. time falls below this threshold</p>\n</dd>\n<dt><strong>inv_iter</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int</span></dt>\n<dd><p class=\"first last\">the number of iterations to be performed by the displacement field\ninversion algorithm</p>\n</dd>\n<dt><strong>step_length</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float</span></dt>\n<dd><p class=\"first last\">the length of the maximum displacement vector of the update\ndisplacement field at each iteration</p>\n</dd>\n<dt><strong>ss_sigma_factor</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float</span></dt>\n<dd><p class=\"first last\">parameter of the scale-space smoothing kernel. For example, the\nstd. dev. of the kernel will be factor*(2^i) in the isotropic case\nwhere i = 0, 1, \u2026, n_scales is the scale</p>\n</dd>\n<dt><strong>inv_tol</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float</span></dt>\n<dd><p class=\"first last\">the displacement field inversion algorithm will stop iterating\nwhen the inversion error falls below this threshold</p>\n</dd>\n<dt><strong>callback</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">function(SymmetricDiffeomorphicRegistration)</span></dt>\n<dd><p class=\"first last\">a function receiving a SymmetricDiffeomorphicRegistration object\nto be called after each iteration (this optimizer will call this\nfunction passing self as parameter)</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.SymmetricDiffeomorphicRegistration.get_map\">\n<code class=\"descname\">get_map</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.SymmetricDiffeomorphicRegistration.get_map\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns the resulting diffeomorphic map\nReturns the DiffeomorphicMap registering the moving image towards\nthe static image.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.SymmetricDiffeomorphicRegistration.optimize\">\n<code class=\"descname\">optimize</code><span class=\"sig-paren\">(</span><em>static</em>, <em>moving</em>, <em>static_grid2world=None</em>, <em>moving_grid2world=None</em>, <em>prealign=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.SymmetricDiffeomorphicRegistration.optimize\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Starts the optimization</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>static</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, shape (S, R, C) or (R, C)</span></dt>\n<dd><p class=\"first last\">the image to be used as reference during optimization. The\ndisplacement fields will have the same discretization as the static\nimage.</p>\n</dd>\n<dt><strong>moving</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, shape (S, R, C) or (R, C)</span></dt>\n<dd><p class=\"first last\">the image to be used as \u201cmoving\u201d during optimization. Since the\ndeformation fields\u2019 discretization is the same as the static image,\nit is necessary to pre-align the moving image to ensure its domain\nlies inside the domain of the deformation fields. This is assumed\nto be accomplished by \u201cpre-aligning\u201d the moving image towards the\nstatic using an affine transformation given by the \u2018prealign\u2019\nmatrix</p>\n</dd>\n<dt><strong>static_grid2world</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, shape (dim+1, dim+1)</span></dt>\n<dd><p class=\"first last\">the voxel-to-space transformation associated to the static image</p>\n</dd>\n<dt><strong>moving_grid2world</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, shape (dim+1, dim+1)</span></dt>\n<dd><p class=\"first last\">the voxel-to-space transformation associated to the moving image</p>\n</dd>\n<dt><strong>prealign</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, shape (dim+1, dim+1)</span></dt>\n<dd><p class=\"first last\">the affine transformation (operating on the physical space)\npre-aligning the moving image towards the static</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>static_to_ref</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">DiffeomorphicMap object</span></dt>\n<dd><p class=\"first last\">the diffeomorphic map that brings the moving image towards the\nstatic one in the forward direction (i.e. by calling\nstatic_to_ref.transform) and the static image towards the\nmoving one in the backward direction (i.e. by calling\nstatic_to_ref.transform_inverse).</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.SymmetricDiffeomorphicRegistration.update\">\n<code class=\"descname\">update</code><span class=\"sig-paren\">(</span><em>current_displacement</em>, <em>new_displacement</em>, <em>disp_world2grid</em>, <em>time_scaling</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.SymmetricDiffeomorphicRegistration.update\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Composition of the current displacement field with the given field</p>\n<p>Interpolates new displacement at the locations defined by\ncurrent_displacement. Equivalently, computes the composition C of the\ngiven displacement fields as C(x) = B(A(x)), where A is\ncurrent_displacement and B is new_displacement. This function is\nintended to be used with deformation fields of the same sampling\n(e.g. to be called by a registration algorithm).</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>current_displacement</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, shape (R\u2019, C\u2019, 2) or (S\u2019, R\u2019, C\u2019, 3)</span></dt>\n<dd><p class=\"first last\">the displacement field defining where to interpolate\nnew_displacement</p>\n</dd>\n<dt><strong>new_displacement</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, shape (R, C, 2) or (S, R, C, 3)</span></dt>\n<dd><p class=\"first last\">the displacement field to be warped by current_displacement</p>\n</dd>\n<dt><strong>disp_world2grid</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, shape (dim+1, dim+1)</span></dt>\n<dd><p class=\"first last\">the space-to-grid transform associated with the displacements\u2019\ngrid (we assume that both displacements are discretized over the\nsame grid)</p>\n</dd>\n<dt><strong>time_scaling</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float</span></dt>\n<dd><p class=\"first last\">scaling factor applied to d2. The effect may be interpreted as\nmoving d1 displacements along a factor (<cite>time_scaling</cite>) of d2.</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>updated</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, shape (the same as new_displacement)</span></dt>\n<dd><p class=\"first last\">the warped displacement field</p>\n</dd>\n<dt><strong>mean_norm</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">the mean norm of all vectors in current_displacement</span></dt>\n<dd></dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"synregistrationflow\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.align.SynRegistrationFlow\" title=\"dipy.workflows.align.SynRegistrationFlow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SynRegistrationFlow</span></code></a><a class=\"headerlink\" href=\"#synregistrationflow\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.align.SynRegistrationFlow\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.align.</code><code class=\"descname\">SynRegistrationFlow</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.SynRegistrationFlow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow\" title=\"dipy.workflows.workflow.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.workflows.workflow.Workflow</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code>()</td>\n<td>Create an iterator for IO.</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code>()</td>\n<td>Return A short name for the workflow used to subdivide.</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code>()</td>\n<td>Return No sub runs since this is a simple workflow.</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code>()</td>\n<td>Check if a file will be overwritten upon processing the inputs.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.SynRegistrationFlow.run\" title=\"dipy.workflows.align.SynRegistrationFlow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(static_image_files,&nbsp;moving_image_files)</td>\n<td><table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"></td>\n</tr>\n</tbody>\n</table>\n</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.SynRegistrationFlow.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.SynRegistrationFlow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.SynRegistrationFlow.run\">\n<code class=\"descname\">run</code><span class=\"sig-paren\">(</span><em>static_image_files, moving_image_files, prealign_file='', inv_static=False, level_iters=[10, 10, 5], metric='cc', mopt_sigma_diff=2.0, mopt_radius=4, mopt_smooth=0.0, mopt_inner_iter=0.0, mopt_q_levels=256, mopt_double_gradient=True, mopt_step_type='', step_length=0.25, ss_sigma_factor=0.2, opt_tol=1e-05, inv_iter=20, inv_tol=0.001, out_dir='', out_warped='warped_moved.nii.gz', out_inv_static='inc_static.nii.gz', out_field='displacement_field.nii.gz'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.SynRegistrationFlow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>static_image_files</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">Path of the static image file.</p>\n</dd>\n<dt><strong>moving_image_files</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">Path to the moving image file.</p>\n</dd>\n<dt><strong>prealign_file</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><dl class=\"first last docutils\">\n<dt>The text file containing pre alignment information via an</dt>\n<dd><p class=\"first last\">affine matrix.</p>\n</dd>\n</dl>\n</dd>\n<dt><strong>inv_static</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">boolean, optional</span></dt>\n<dd><p class=\"first last\">Apply the inverse mapping to the static image (default \u2018False\u2019).</p>\n</dd>\n<dt><strong>level_iters</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">variable int, optional</span></dt>\n<dd><dl class=\"first last docutils\">\n<dt>The number of iterations at each level of the gaussian pyramid.</dt>\n<dd><p class=\"first last\">By default, a 3-level scale space with iterations\nsequence equal to [10, 10, 5] will be used. The 0-th\nlevel corresponds to the finest resolution.</p>\n</dd>\n</dl>\n</dd>\n<dt><strong>metric</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">The metric to be used (Default cc, \u2018Cross Correlation metric\u2019).\nmetric available: cc (Cross Correlation), ssd (Sum Squared\nDifference), em (Expectation-Maximization).</p>\n</dd>\n<dt><strong>mopt_sigma_diff</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float, optional</span></dt>\n<dd><p class=\"first last\">Metric option applied on Cross correlation (CC).\nThe standard deviation of the Gaussian smoothing kernel to be\napplied to the update field at each iteration (default 2.0)</p>\n</dd>\n<dt><strong>mopt_radius</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int, optional</span></dt>\n<dd><p class=\"first last\">Metric option applied on Cross correlation (CC).\nthe radius of the squared (cubic) neighborhood at each voxel to\nbe considered to compute the cross correlation. (default 4)</p>\n</dd>\n<dt><strong>mopt_smooth</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float, optional</span></dt>\n<dd><p class=\"first last\">Metric option applied on Sum Squared Difference (SSD) and\nExpectation Maximization (EM). Smoothness parameter, the\nlarger the value the smoother the deformation field.\n(default 1.0 for EM, 4.0 for SSD)</p>\n</dd>\n<dt><strong>mopt_inner_iter</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int, optional</span></dt>\n<dd><p class=\"first last\">Metric option applied on Sum Squared Difference (SSD) and\nExpectation Maximization (EM). This is number of iterations to be\nperformed at each level of the multi-resolution Gauss-Seidel\noptimization algorithm (this is not the number of steps per\nGaussian Pyramid level, that parameter must be set for the\noptimizer, not the metric). Default 5 for EM, 10 for SSD.</p>\n</dd>\n<dt><strong>mopt_q_levels</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int, optional</span></dt>\n<dd><p class=\"first last\">Metric option applied on Expectation Maximization (EM).\nNumber of quantization levels (Default: 256 for EM)</p>\n</dd>\n<dt><strong>mopt_double_gradient</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool, optional</span></dt>\n<dd><p class=\"first last\">Metric option applied on Expectation Maximization (EM).\nif True, the gradient of the expected static image under the moving\nmodality will be added to the gradient of the moving image,\nsimilarly, the gradient of the expected moving image under the\nstatic modality will be added to the gradient of the static image.</p>\n</dd>\n<dt><strong>mopt_step_type</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Metric option applied on Sum Squared Difference (SSD) and\nExpectation Maximization (EM). The optimization schedule to be\nused in the multi-resolution Gauss-Seidel optimization algorithm\n(not used if Demons Step is selected). Possible value:\n(\u2018gauss_newton\u2019, \u2018demons\u2019). default: \u2018gauss_newton\u2019 for EM,\n\u2018demons\u2019 for SSD.</p>\n</dd>\n<dt><strong>step_length</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float, optional</span></dt>\n<dd><dl class=\"first last docutils\">\n<dt>the length of the maximum displacement vector of the update</dt>\n<dd><p class=\"first last\">displacement field at each iteration.</p>\n</dd>\n</dl>\n</dd>\n<dt><strong>ss_sigma_factor</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float, optional</span></dt>\n<dd><dl class=\"first last docutils\">\n<dt>parameter of the scale-space smoothing kernel. For example, the</dt>\n<dd><p class=\"first last\">std. dev. of the kernel will be factor*(2^i) in the isotropic case\nwhere i = 0, 1, \u2026, n_scales is the scale.</p>\n</dd>\n</dl>\n</dd>\n<dt><strong>opt_tol</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float, optional</span></dt>\n<dd><dl class=\"first last docutils\">\n<dt>the optimization will stop when the estimated derivative of the</dt>\n<dd><p class=\"first last\">energy profile w.r.t. time falls below this threshold.</p>\n</dd>\n</dl>\n</dd>\n<dt><strong>inv_iter</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int, optional</span></dt>\n<dd><dl class=\"first last docutils\">\n<dt>the number of iterations to be performed by the displacement field</dt>\n<dd><p class=\"first last\">inversion algorithm.</p>\n</dd>\n</dl>\n</dd>\n<dt><strong>inv_tol</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float, optional</span></dt>\n<dd><dl class=\"first last docutils\">\n<dt>the displacement field inversion algorithm will stop iterating</dt>\n<dd><p class=\"first last\">when the inversion error falls below this threshold.</p>\n</dd>\n</dl>\n</dd>\n<dt><strong>out_dir</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Directory to save the transformed files (default \u2018\u2019).</p>\n</dd>\n<dt><strong>out_warped</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the warped file. (default \u2018warped_moved.nii.gz\u2019).</p>\n</dd>\n<dt><strong>out_inv_static</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><dl class=\"first last docutils\">\n<dt>Name of the file to save the static image after applying the</dt>\n<dd><p class=\"first last\">inverse mapping (default \u2018inv_static.nii.gz\u2019).</p>\n</dd>\n</dl>\n</dd>\n<dt><strong>out_field</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the file to save the diffeomorphic map.\n(default \u2018displacement_field.nii.gz\u2019)</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"translationtransform3d\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.align.TranslationTransform3D\" title=\"dipy.workflows.align.TranslationTransform3D\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TranslationTransform3D</span></code></a><a class=\"headerlink\" href=\"#translationtransform3d\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.align.TranslationTransform3D\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.align.</code><code class=\"descname\">TranslationTransform3D</code><a class=\"headerlink\" href=\"#dipy.workflows.align.TranslationTransform3D\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.align.transforms.Transform</span></code></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_identity_parameters</span></code></td>\n<td>Parameter values corresponding to the identity transform</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">jacobian</span></code></td>\n<td>Jacobian function of this transform</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">param_to_matrix</span></code></td>\n<td>Matrix representation of this transform with the given parameters</td>\n</tr>\n</tbody>\n</table>\n<table border=\"1\" class=\"docutils\">\n<colgroup>\n<col width=\"74%\" />\n<col width=\"26%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><strong>get_dim</strong></td>\n<td>&#160;</td>\n</tr>\n<tr class=\"row-even\"><td><strong>get_number_of_parameters</strong></td>\n<td>&#160;</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.TranslationTransform3D.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.TranslationTransform3D.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Translation transform in 3D</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"workflow\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.align.Workflow\" title=\"dipy.workflows.align.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a><a class=\"headerlink\" href=\"#workflow\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.align.Workflow\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.align.</code><code class=\"descname\">Workflow</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.Workflow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.7)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.Workflow.get_io_iterator\" title=\"dipy.workflows.align.Workflow.get_io_iterator\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code></a>()</td>\n<td>Create an iterator for IO.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.Workflow.get_short_name\" title=\"dipy.workflows.align.Workflow.get_short_name\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code></a>()</td>\n<td>Return A short name for the workflow used to subdivide.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.Workflow.get_sub_runs\" title=\"dipy.workflows.align.Workflow.get_sub_runs\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code></a>()</td>\n<td>Return No sub runs since this is a simple workflow.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.Workflow.manage_output_overwrite\" title=\"dipy.workflows.align.Workflow.manage_output_overwrite\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code></a>()</td>\n<td>Check if a file will be overwritten upon processing the inputs.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.align.Workflow.run\" title=\"dipy.workflows.align.Workflow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(*args,&nbsp;**kwargs)</td>\n<td>Execute the workflow.</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.Workflow.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.Workflow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.Workflow.get_io_iterator\">\n<code class=\"descname\">get_io_iterator</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.Workflow.get_io_iterator\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Create an iterator for IO.</p>\n<p>Use a couple of inspection tricks to build an IOIterator using the\nprevious frame (values of local variables and other contextuals) and\nthe run method\u2019s docstring.</p>\n</dd></dl>\n\n<dl class=\"classmethod\">\n<dt id=\"dipy.workflows.align.Workflow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.Workflow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return A short name for the workflow used to subdivide.</p>\n<p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name.</p>\n<p>For example, a combined workflow with dti reconstruction and csd\nreconstruction might en up with the b0_threshold parameter. Using short\nnames, we will have dti.b0_threshold and csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.Workflow.get_sub_runs\">\n<code class=\"descname\">get_sub_runs</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.Workflow.get_sub_runs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return No sub runs since this is a simple workflow.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.Workflow.manage_output_overwrite\">\n<code class=\"descname\">manage_output_overwrite</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.Workflow.manage_output_overwrite\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Check if a file will be overwritten upon processing the inputs.</p>\n<p>If it is bound to happen, an action is taken depending on\nself._force_overwrite (or \u2013force via command line). A log message is\noutput independently of the outcome to tell the user something\nhappened.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.Workflow.run\">\n<code class=\"descname\">run</code><span class=\"sig-paren\">(</span><em>*args</em>, <em>**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.Workflow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Execute the workflow.</p>\n<p>Since this is an abstract class, raise exception if this code is\nreached (not impletemented in child class or literally called on this\nclass)</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"check-dimensions\">\n<h3>check_dimensions<a class=\"headerlink\" href=\"#check-dimensions\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.align.check_dimensions\">\n<code class=\"descclassname\">dipy.workflows.align.</code><code class=\"descname\">check_dimensions</code><span class=\"sig-paren\">(</span><em>static</em>, <em>moving</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.check_dimensions\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Check the dimensions of the input images.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>static</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">2D or 3D array</span></dt>\n<dd><p class=\"first last\">the image to be used as reference during optimization.</p>\n</dd>\n<dt><strong>moving: 2D or 3D array</strong></dt>\n<dd><p class=\"first last\">the image to be used as \u201cmoving\u201d during optimization. It is\nnecessary to pre-align the moving image to ensure its domain\nlies inside the domain of the deformation fields. This is assumed\nto be accomplished by \u201cpre-aligning\u201d the moving image towards the\nstatic using an affine transformation given by the\n\u2018starting_affine\u2019 matrix</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"load-nifti\">\n<h3>load_nifti<a class=\"headerlink\" href=\"#load-nifti\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.align.load_nifti\">\n<code class=\"descclassname\">dipy.workflows.align.</code><code class=\"descname\">load_nifti</code><span class=\"sig-paren\">(</span><em>fname</em>, <em>return_img=False</em>, <em>return_voxsize=False</em>, <em>return_coords=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.load_nifti\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</div>\n<div class=\"section\" id=\"load-trk\">\n<h3>load_trk<a class=\"headerlink\" href=\"#load-trk\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.align.load_trk\">\n<code class=\"descclassname\">dipy.workflows.align.</code><code class=\"descname\">load_trk</code><span class=\"sig-paren\">(</span><em>filename</em>, <em>lazy_load=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.load_trk\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Loads tractogram files (<a href=\"#id17\"><span class=\"problematic\" id=\"id18\">*</span></a>.tck)</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>filename</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">str</span></dt>\n<dd><p class=\"first last\">input trk filename</p>\n</dd>\n<dt><strong>lazy_load</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">{False, True}, optional</span></dt>\n<dd><p class=\"first last\">If True, load streamlines in a lazy manner i.e. they will not be kept\nin memory and only be loaded when needed.\nOtherwise, load all streamlines in memory.</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>streamlines</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">list of 2D arrays</span></dt>\n<dd><p class=\"first last\">Each 2D array represents a sequence of 3D points (points, 3).</p>\n</dd>\n<dt><strong>hdr</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">dict</span></dt>\n<dd><p class=\"first last\">header from a trk file</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"reslice\">\n<h3>reslice<a class=\"headerlink\" href=\"#reslice\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.align.reslice\">\n<code class=\"descclassname\">dipy.workflows.align.</code><code class=\"descname\">reslice</code><span class=\"sig-paren\">(</span><em>data</em>, <em>affine</em>, <em>zooms</em>, <em>new_zooms</em>, <em>order=1</em>, <em>mode='constant'</em>, <em>cval=0</em>, <em>num_processes=1</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.reslice\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Reslice data with new voxel resolution defined by <code class=\"docutils literal notranslate\"><span class=\"pre\">new_zooms</span></code></p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>data</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, shape (I,J,K) or (I,J,K,N)</span></dt>\n<dd><p class=\"first last\">3d volume or 4d volume with datasets</p>\n</dd>\n<dt><strong>affine</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, shape (4,4)</span></dt>\n<dd><p class=\"first last\">mapping from voxel coordinates to world coordinates</p>\n</dd>\n<dt><strong>zooms</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">tuple, shape (3,)</span></dt>\n<dd><p class=\"first last\">voxel size for (i,j,k) dimensions</p>\n</dd>\n<dt><strong>new_zooms</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">tuple, shape (3,)</span></dt>\n<dd><p class=\"first last\">new voxel size for (i,j,k) after resampling</p>\n</dd>\n<dt><strong>order</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int, from 0 to 5</span></dt>\n<dd><p class=\"first last\">order of interpolation for resampling/reslicing,\n0 nearest interpolation, 1 trilinear etc..\nif you don\u2019t want any smoothing 0 is the option you need.</p>\n</dd>\n<dt><strong>mode</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string (\u2018constant\u2019, \u2018nearest\u2019, \u2018reflect\u2019 or \u2018wrap\u2019)</span></dt>\n<dd><p class=\"first last\">Points outside the boundaries of the input are filled according\nto the given mode.</p>\n</dd>\n<dt><strong>cval</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float</span></dt>\n<dd><p class=\"first last\">Value used for points outside the boundaries of the input if\nmode=\u2019constant\u2019.</p>\n</dd>\n<dt><strong>num_processes</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int</span></dt>\n<dd><p class=\"first last\">Split the calculation to a pool of children processes. This only\napplies to 4D <cite>data</cite> arrays. If a positive integer then it defines\nthe size of the multiprocessing pool that will be used. If 0, then\nthe size of the pool will equal the number of cores available.</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>data2</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, shape (I,J,K) or (I,J,K,N)</span></dt>\n<dd><p class=\"first last\">datasets resampled into isotropic voxel size</p>\n</dd>\n<dt><strong>affine2</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, shape (4,4)</span></dt>\n<dd><p class=\"first last\">new affine for the resampled image</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">nibabel</span> <span class=\"k\">as</span> <span class=\"nn\">nib</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">dipy.align.reslice</span> <span class=\"k\">import</span> <span class=\"n\">reslice</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">dipy.data</span> <span class=\"k\">import</span> <span class=\"n\">get_fnames</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">fimg</span> <span class=\"o\">=</span> <span class=\"n\">get_fnames</span><span class=\"p\">(</span><span class=\"s1\">&#39;aniso_vox&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">nib</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">fimg</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">get_data</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">shape</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"mi\">58</span><span class=\"p\">,</span> <span class=\"mi\">58</span><span class=\"p\">,</span> <span class=\"mi\">24</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">affine</span> <span class=\"o\">=</span> <span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">affine</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">zooms</span> <span class=\"o\">=</span> <span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">header</span><span class=\"o\">.</span><span class=\"n\">get_zooms</span><span class=\"p\">()[:</span><span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">zooms</span>\n<span class=\"go\">(4.0, 4.0, 5.0)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">new_zooms</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mf\">3.</span><span class=\"p\">,</span><span class=\"mf\">3.</span><span class=\"p\">,</span><span class=\"mf\">3.</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">new_zooms</span>\n<span class=\"go\">(3.0, 3.0, 3.0)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">data2</span><span class=\"p\">,</span> <span class=\"n\">affine2</span> <span class=\"o\">=</span> <span class=\"n\">reslice</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"p\">,</span> <span class=\"n\">zooms</span><span class=\"p\">,</span> <span class=\"n\">new_zooms</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">data2</span><span class=\"o\">.</span><span class=\"n\">shape</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"mi\">77</span><span class=\"p\">,</span> <span class=\"mi\">77</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"save-nifti\">\n<h3>save_nifti<a class=\"headerlink\" href=\"#save-nifti\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.align.save_nifti\">\n<code class=\"descclassname\">dipy.workflows.align.</code><code class=\"descname\">save_nifti</code><span class=\"sig-paren\">(</span><em>fname</em>, <em>data</em>, <em>affine</em>, <em>hdr=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.save_nifti\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</div>\n<div class=\"section\" id=\"save-qa-metric\">\n<h3>save_qa_metric<a class=\"headerlink\" href=\"#save-qa-metric\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.align.save_qa_metric\">\n<code class=\"descclassname\">dipy.workflows.align.</code><code class=\"descname\">save_qa_metric</code><span class=\"sig-paren\">(</span><em>fname</em>, <em>xopt</em>, <em>fopt</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.save_qa_metric\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Save Quality Assurance metrics.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>fname: string</strong></dt>\n<dd><p class=\"first last\">File name to save the metric values.</p>\n</dd>\n<dt><strong>xopt: numpy array</strong></dt>\n<dd><p class=\"first last\">The metric containing the\noptimal parameters for\nimage registration.</p>\n</dd>\n<dt><strong>fopt: int</strong></dt>\n<dd><p class=\"first last\">The distance between the registered images.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"slr-with-qbx\">\n<h3>slr_with_qbx<a class=\"headerlink\" href=\"#slr-with-qbx\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.align.slr_with_qbx\">\n<code class=\"descclassname\">dipy.workflows.align.</code><code class=\"descname\">slr_with_qbx</code><span class=\"sig-paren\">(</span><em>static, moving, x0='affine', rm_small_clusters=50, maxiter=100, select_random=None, verbose=False, greater_than=50, less_than=250, qbx_thr=[40, 30, 20, 15], nb_pts=20, progressive=True, rng=None, num_threads=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.slr_with_qbx\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Utility function for registering large tractograms.</p>\n<p>For efficiency we apply the registration on cluster centroids and remove\nsmall clusters.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>static</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">Streamlines</span></dt>\n<dd></dd>\n<dt><strong>moving</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">Streamlines</span></dt>\n<dd></dd>\n<dt><strong>x0</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">str</span></dt>\n<dd><p class=\"first last\">rigid, similarity or affine transformation model (default affine)</p>\n</dd>\n<dt><strong>rm_small_clusters</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int</span></dt>\n<dd><p class=\"first last\">Remove clusters that have less than <cite>rm_small_clusters</cite> (default 50)</p>\n</dd>\n<dt><strong>select_random</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int</span></dt>\n<dd><p class=\"first last\">If not None select a random number of streamlines to apply clustering\nDefault None.</p>\n</dd>\n<dt><strong>verbose</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool,</span></dt>\n<dd><p class=\"first last\">If True then information about the optimization is shown.</p>\n</dd>\n<dt><strong>greater_than</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int, optional</span></dt>\n<dd><p class=\"first last\">Keep streamlines that have length greater than\nthis value (default 50)</p>\n</dd>\n<dt><strong>less_than</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int, optional</span></dt>\n<dd><p class=\"first last\">Keep streamlines have length less than this value (default 250)</p>\n</dd>\n<dt><strong>qbx_thr</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">variable int</span></dt>\n<dd><p class=\"first last\">Thresholds for QuickBundlesX (default [40, 30, 20, 15])</p>\n</dd>\n<dt><strong>np_pts</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int, optional</span></dt>\n<dd><p class=\"first last\">Number of points for discretizing each streamline (default 20)</p>\n</dd>\n<dt><strong>progressive</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">boolean, optional</span></dt>\n<dd><p class=\"first last\">(default True)</p>\n</dd>\n<dt><strong>rng</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">RandomState</span></dt>\n<dd><p class=\"first last\">If None creates RandomState in function.</p>\n</dd>\n<dt><strong>num_threads</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int</span></dt>\n<dd><p class=\"first last\">Number of threads. If None (default) then all available threads\nwill be used. Only metrics using OpenMP will use this variable.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Notes</p>\n<p>The order of operations is the following. First short or long streamlines\nare removed. Second the tractogram or a random selection of the tractogram\nis clustered with QuickBundles. Then SLR <a class=\"reference internal\" href=\"#r890e584ccf15-garyfallidis15\" id=\"id19\">[Garyfallidis15]</a> is applied.</p>\n<p class=\"rubric\">References</p>\n<table class=\"docutils citation\" frame=\"void\" id=\"r890e584ccf15-garyfallidis15\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\">[Garyfallidis15]</td><td><em>(<a class=\"fn-backref\" href=\"#id19\">1</a>, <a class=\"fn-backref\" href=\"#id20\">2</a>)</em> Garyfallidis et al. \u201cRobust and efficient linear</td></tr>\n</tbody>\n</table>\n<p>registration of white-matter fascicles in the space of streamlines\u201d,\nNeuroImage, 117, 124\u2013140, 2015\n.. [R890e584ccf15-Garyfallidis14] Garyfallidis et al., \u201cDirect native-space fiber</p>\n<blockquote>\n<div>bundle alignment for group comparisons\u201d, ISMRM, 2014.</div></blockquote>\n<table class=\"docutils citation\" frame=\"void\" id=\"r890e584ccf15-garyfallidis17\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\"><a class=\"fn-backref\" href=\"#id22\">[Garyfallidis17]</a></td><td>Garyfallidis et al. Recognition of white matter</td></tr>\n</tbody>\n</table>\n<p>bundles using local and global streamline-based registration and\nclustering, Neuroimage, 2017.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"transform-centers-of-mass\">\n<h3>transform_centers_of_mass<a class=\"headerlink\" href=\"#transform-centers-of-mass\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.align.transform_centers_of_mass\">\n<code class=\"descclassname\">dipy.workflows.align.</code><code class=\"descname\">transform_centers_of_mass</code><span class=\"sig-paren\">(</span><em>static</em>, <em>static_grid2world</em>, <em>moving</em>, <em>moving_grid2world</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.transform_centers_of_mass\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Transformation to align the center of mass of the input images</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>static</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, shape (S, R, C)</span></dt>\n<dd><p class=\"first last\">static image</p>\n</dd>\n<dt><strong>static_grid2world</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, shape (dim+1, dim+1)</span></dt>\n<dd><p class=\"first last\">the voxel-to-space transformation of the static image</p>\n</dd>\n<dt><strong>moving</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, shape (S, R, C)</span></dt>\n<dd><p class=\"first last\">moving image</p>\n</dd>\n<dt><strong>moving_grid2world</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, shape (dim+1, dim+1)</span></dt>\n<dd><p class=\"first last\">the voxel-to-space transformation of the moving image</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>affine_map</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">instance of AffineMap</span></dt>\n<dd><p class=\"first last\">the affine transformation (translation only, in this case) aligning\nthe center of mass of the moving image towards the one of the static\nimage</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"transform-streamlines\">\n<h3>transform_streamlines<a class=\"headerlink\" href=\"#transform-streamlines\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.align.transform_streamlines\">\n<code class=\"descclassname\">dipy.workflows.align.</code><code class=\"descname\">transform_streamlines</code><span class=\"sig-paren\">(</span><em>streamlines</em>, <em>mat</em>, <em>in_place=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.transform_streamlines\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Apply affine transformation to streamlines</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>streamlines</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">Streamlines</span></dt>\n<dd><p class=\"first last\">Streamlines object</p>\n</dd>\n<dt><strong>mat</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, (4, 4)</span></dt>\n<dd><p class=\"first last\">transformation matrix</p>\n</dd>\n<dt><strong>in_place</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool</span></dt>\n<dd><p class=\"first last\">If True then change data in place.\nBe careful changes input streamlines.</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>new_streamlines</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">Streamlines</span></dt>\n<dd><p class=\"first last\">Sequence transformed 2D ndarrays of shape[-1]==3</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"introspectiveargumentparser\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.base.IntrospectiveArgumentParser\" title=\"dipy.workflows.base.IntrospectiveArgumentParser\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">IntrospectiveArgumentParser</span></code></a><a class=\"headerlink\" href=\"#introspectiveargumentparser\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.base.IntrospectiveArgumentParser\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.base.</code><code class=\"descname\">IntrospectiveArgumentParser</code><span class=\"sig-paren\">(</span><em>prog=None</em>, <em>usage=None</em>, <em>description=None</em>, <em>epilog=None</em>, <em>parents=[]</em>, <em>formatter_class=&lt;class 'argparse.RawTextHelpFormatter'&gt;</em>, <em>prefix_chars='-'</em>, <em>fromfile_prefix_chars=None</em>, <em>argument_default=None</em>, <em>conflict_handler='resolve'</em>, <em>add_help=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.base.IntrospectiveArgumentParser\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser\" title=\"(in Python v3.7)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">argparse.ArgumentParser</span></code></a></p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Attributes:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>optional_parameters</strong></dt>\n<dd></dd>\n<dt><strong>output_parameters</strong></dt>\n<dd></dd>\n<dt><strong>positional_parameters</strong></dt>\n<dd></dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">add_argument</span></code>(dest,&nbsp;\u2026[,&nbsp;name,&nbsp;name])</td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.base.IntrospectiveArgumentParser.add_sub_flow_args\" title=\"dipy.workflows.base.IntrospectiveArgumentParser.add_sub_flow_args\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">add_sub_flow_args</span></code></a>(sub_flows)</td>\n<td>Take an array of workflow objects and use introspection to extract the parameters, types and docstrings of their run method.</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">add_subparsers</span></code>(**kwargs)</td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.base.IntrospectiveArgumentParser.add_workflow\" title=\"dipy.workflows.base.IntrospectiveArgumentParser.add_workflow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">add_workflow</span></code></a>(workflow)</td>\n<td>Take a workflow object and use introspection to extract the parameters, types and docstrings of its run method.</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">error</span></code>(message)</td>\n<td>Prints a usage message incorporating the message to stderr and exits.</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">exit</span></code>([status,&nbsp;message])</td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">format_usage</span></code>()</td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.base.IntrospectiveArgumentParser.get_flow_args\" title=\"dipy.workflows.base.IntrospectiveArgumentParser.get_flow_args\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_flow_args</span></code></a>([args,&nbsp;namespace])</td>\n<td>Returns the parsed arguments as a dictionary that will be used as a workflow\u2019s run method arguments.</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">parse_args</span></code>([args,&nbsp;namespace])</td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">print_usage</span></code>([file])</td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">register</span></code>(registry_name,&nbsp;value,&nbsp;object)</td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">set_defaults</span></code>(**kwargs)</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<table border=\"1\" class=\"docutils\">\n<colgroup>\n<col width=\"76%\" />\n<col width=\"24%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><strong>add_argument_group</strong></td>\n<td>&#160;</td>\n</tr>\n<tr class=\"row-even\"><td><strong>add_description</strong></td>\n<td>&#160;</td>\n</tr>\n<tr class=\"row-odd\"><td><strong>add_epilogue</strong></td>\n<td>&#160;</td>\n</tr>\n<tr class=\"row-even\"><td><strong>add_mutually_exclusive_group</strong></td>\n<td>&#160;</td>\n</tr>\n<tr class=\"row-odd\"><td><strong>convert_arg_line_to_args</strong></td>\n<td>&#160;</td>\n</tr>\n<tr class=\"row-even\"><td><strong>format_help</strong></td>\n<td>&#160;</td>\n</tr>\n<tr class=\"row-odd\"><td><strong>get_default</strong></td>\n<td>&#160;</td>\n</tr>\n<tr class=\"row-even\"><td><strong>parse_known_args</strong></td>\n<td>&#160;</td>\n</tr>\n<tr class=\"row-odd\"><td><strong>print_help</strong></td>\n<td>&#160;</td>\n</tr>\n<tr class=\"row-even\"><td><strong>show_argument</strong></td>\n<td>&#160;</td>\n</tr>\n<tr class=\"row-odd\"><td><strong>update_argument</strong></td>\n<td>&#160;</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.base.IntrospectiveArgumentParser.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>prog=None</em>, <em>usage=None</em>, <em>description=None</em>, <em>epilog=None</em>, <em>parents=[]</em>, <em>formatter_class=&lt;class 'argparse.RawTextHelpFormatter'&gt;</em>, <em>prefix_chars='-'</em>, <em>fromfile_prefix_chars=None</em>, <em>argument_default=None</em>, <em>conflict_handler='resolve'</em>, <em>add_help=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.base.IntrospectiveArgumentParser.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Augmenting the argument parser to allow automatic creation of\narguments from workflows</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>prog</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">None</span></dt>\n<dd><p class=\"first last\">The name of the program (default: sys.argv[0])</p>\n</dd>\n<dt><strong>usage</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">None</span></dt>\n<dd><p class=\"first last\">A usage message (default: auto-generated from arguments)</p>\n</dd>\n<dt><strong>description</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">str</span></dt>\n<dd><p class=\"first last\">A description of what the program does</p>\n</dd>\n<dt><strong>epilog</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">str</span></dt>\n<dd><p class=\"first last\">Text following the argument descriptions</p>\n</dd>\n<dt><strong>parents</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">list</span></dt>\n<dd><p class=\"first last\">Parsers whose arguments should be copied into this one</p>\n</dd>\n<dt><strong>formatter_class</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">obj</span></dt>\n<dd><p class=\"first last\">HelpFormatter class for printing help messages</p>\n</dd>\n<dt><strong>prefix_chars</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">str</span></dt>\n<dd><p class=\"first last\">Characters that prefix optional arguments</p>\n</dd>\n<dt><strong>fromfile_prefix_chars</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">None</span></dt>\n<dd><p class=\"first last\">Characters that prefix files containing additional arguments</p>\n</dd>\n<dt><strong>argument_default</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">None</span></dt>\n<dd><p class=\"first last\">The default value for all arguments</p>\n</dd>\n<dt><strong>conflict_handler</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">str</span></dt>\n<dd><p class=\"first last\">String indicating how to handle conflicts</p>\n</dd>\n<dt><strong>add_help</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool</span></dt>\n<dd><p class=\"first last\">Add a -h/-help option</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.base.IntrospectiveArgumentParser.add_description\">\n<code class=\"descname\">add_description</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.base.IntrospectiveArgumentParser.add_description\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.base.IntrospectiveArgumentParser.add_epilogue\">\n<code class=\"descname\">add_epilogue</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.base.IntrospectiveArgumentParser.add_epilogue\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.base.IntrospectiveArgumentParser.add_sub_flow_args\">\n<code class=\"descname\">add_sub_flow_args</code><span class=\"sig-paren\">(</span><em>sub_flows</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.base.IntrospectiveArgumentParser.add_sub_flow_args\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Take an array of workflow objects and use introspection to extract\nthe parameters, types and docstrings of their run method. Only the\noptional input parameters are extracted for these as they are treated\nas sub workflows.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>sub_flows</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array of dipy.workflows.workflow.Workflow</span></dt>\n<dd><p class=\"first last\">Workflows to inspect.</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>sub_flow_optionals</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">dictionary of all sub workflow optional parameters</span></dt>\n<dd></dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.base.IntrospectiveArgumentParser.add_workflow\">\n<code class=\"descname\">add_workflow</code><span class=\"sig-paren\">(</span><em>workflow</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.base.IntrospectiveArgumentParser.add_workflow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Take a workflow object and use introspection to extract the parameters,\ntypes and docstrings of its run method. Then add these parameters\nto the current arparser\u2019s own params to parse. If the workflow is of\ntype combined_workflow, the optional input parameters of its\nsub workflows will also be added.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>workflow</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">dipy.workflows.workflow.Workflow</span></dt>\n<dd><p class=\"first last\">Workflow from which to infer parameters.</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>sub_flow_optionals</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">dictionary of all sub workflow optional parameters</span></dt>\n<dd></dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.base.IntrospectiveArgumentParser.get_flow_args\">\n<code class=\"descname\">get_flow_args</code><span class=\"sig-paren\">(</span><em>args=None</em>, <em>namespace=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.base.IntrospectiveArgumentParser.get_flow_args\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns the parsed arguments as a dictionary that will be used\nas a workflow\u2019s run method arguments.</p>\n</dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.workflows.base.IntrospectiveArgumentParser.optional_parameters\">\n<code class=\"descname\">optional_parameters</code><a class=\"headerlink\" href=\"#dipy.workflows.base.IntrospectiveArgumentParser.optional_parameters\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.workflows.base.IntrospectiveArgumentParser.output_parameters\">\n<code class=\"descname\">output_parameters</code><a class=\"headerlink\" href=\"#dipy.workflows.base.IntrospectiveArgumentParser.output_parameters\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.workflows.base.IntrospectiveArgumentParser.positional_parameters\">\n<code class=\"descname\">positional_parameters</code><a class=\"headerlink\" href=\"#dipy.workflows.base.IntrospectiveArgumentParser.positional_parameters\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.base.IntrospectiveArgumentParser.show_argument\">\n<code class=\"descname\">show_argument</code><span class=\"sig-paren\">(</span><em>dest</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.base.IntrospectiveArgumentParser.show_argument\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.base.IntrospectiveArgumentParser.update_argument\">\n<code class=\"descname\">update_argument</code><span class=\"sig-paren\">(</span><em>*args</em>, <em>**kargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.base.IntrospectiveArgumentParser.update_argument\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"numpydocstring\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.base.NumpyDocString\" title=\"dipy.workflows.base.NumpyDocString\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">NumpyDocString</span></code></a><a class=\"headerlink\" href=\"#numpydocstring\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.base.NumpyDocString\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.base.</code><code class=\"descname\">NumpyDocString</code><span class=\"sig-paren\">(</span><em>docstring</em>, <em>config={}</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.base.NumpyDocString\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.7)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.base.NumpyDocString.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>docstring</em>, <em>config={}</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.base.NumpyDocString.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize self.  See help(type(self)) for accurate signature.</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"get-args-default\">\n<h3>get_args_default<a class=\"headerlink\" href=\"#get-args-default\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.base.get_args_default\">\n<code class=\"descclassname\">dipy.workflows.base.</code><code class=\"descname\">get_args_default</code><span class=\"sig-paren\">(</span><em>func</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.base.get_args_default\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</div>\n<div class=\"section\" id=\"combinedworkflow\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.combined_workflow.CombinedWorkflow\" title=\"dipy.workflows.combined_workflow.CombinedWorkflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">CombinedWorkflow</span></code></a><a class=\"headerlink\" href=\"#combinedworkflow\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.combined_workflow.CombinedWorkflow\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.combined_workflow.</code><code class=\"descname\">CombinedWorkflow</code><span class=\"sig-paren\">(</span><em>output_strategy='append'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.combined_workflow.CombinedWorkflow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow\" title=\"dipy.workflows.workflow.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.workflows.workflow.Workflow</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code>()</td>\n<td>Create an iterator for IO.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.combined_workflow.CombinedWorkflow.get_optionals\" title=\"dipy.workflows.combined_workflow.CombinedWorkflow.get_optionals\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_optionals</span></code></a>(flow,&nbsp;**kwargs)</td>\n<td>Returns the sub flow\u2019s optional arguments merged with those passed as params in kwargs.</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code>()</td>\n<td>Return A short name for the workflow used to subdivide.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.combined_workflow.CombinedWorkflow.get_sub_runs\" title=\"dipy.workflows.combined_workflow.CombinedWorkflow.get_sub_runs\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code></a>()</td>\n<td>Returns a list of tuples (sub flow name, sub flow run method, sub flow short name) to be used in the sub flow parameters extraction.</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code>()</td>\n<td>Check if a file will be overwritten upon processing the inputs.</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code>(*args,&nbsp;**kwargs)</td>\n<td>Execute the workflow.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.combined_workflow.CombinedWorkflow.run_sub_flow\" title=\"dipy.workflows.combined_workflow.CombinedWorkflow.run_sub_flow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run_sub_flow</span></code></a>(flow,&nbsp;*args,&nbsp;**kwargs)</td>\n<td>Runs the sub flow with the optional parameters passed via the command line.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.combined_workflow.CombinedWorkflow.set_sub_flows_optionals\" title=\"dipy.workflows.combined_workflow.CombinedWorkflow.set_sub_flows_optionals\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">set_sub_flows_optionals</span></code></a>(opts)</td>\n<td>Sets the self._optionals variable with all sub flow arguments that were passed in the commandline.</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.combined_workflow.CombinedWorkflow.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>output_strategy='append'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.combined_workflow.CombinedWorkflow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Workflow that combines multiple workflows.\nThe workflow combined together are referred as sub flows in this class.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.combined_workflow.CombinedWorkflow.get_optionals\">\n<code class=\"descname\">get_optionals</code><span class=\"sig-paren\">(</span><em>flow</em>, <em>**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.combined_workflow.CombinedWorkflow.get_optionals\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns the sub flow\u2019s optional arguments merged with those passed\nas params in kwargs.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.combined_workflow.CombinedWorkflow.get_sub_runs\">\n<code class=\"descname\">get_sub_runs</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.combined_workflow.CombinedWorkflow.get_sub_runs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns a list of tuples\n(sub flow name, sub flow run method, sub flow short name)\nto be used in the sub flow parameters extraction.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.combined_workflow.CombinedWorkflow.run_sub_flow\">\n<code class=\"descname\">run_sub_flow</code><span class=\"sig-paren\">(</span><em>flow</em>, <em>*args</em>, <em>**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.combined_workflow.CombinedWorkflow.run_sub_flow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Runs the sub flow with the optional parameters passed via the\ncommand line. This is a convenience method to make sub flow running\nmore intuitive on the concrete CombinedWorkflow side.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.combined_workflow.CombinedWorkflow.set_sub_flows_optionals\">\n<code class=\"descname\">set_sub_flows_optionals</code><span class=\"sig-paren\">(</span><em>opts</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.combined_workflow.CombinedWorkflow.set_sub_flows_optionals\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Sets the self._optionals variable with all sub flow arguments\nthat were passed in the commandline.</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id23\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.combined_workflow.Workflow\" title=\"dipy.workflows.combined_workflow.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a><a class=\"headerlink\" href=\"#id23\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.combined_workflow.Workflow\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.combined_workflow.</code><code class=\"descname\">Workflow</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.combined_workflow.Workflow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.7)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.combined_workflow.Workflow.get_io_iterator\" title=\"dipy.workflows.combined_workflow.Workflow.get_io_iterator\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code></a>()</td>\n<td>Create an iterator for IO.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.combined_workflow.Workflow.get_short_name\" title=\"dipy.workflows.combined_workflow.Workflow.get_short_name\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code></a>()</td>\n<td>Return A short name for the workflow used to subdivide.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.combined_workflow.Workflow.get_sub_runs\" title=\"dipy.workflows.combined_workflow.Workflow.get_sub_runs\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code></a>()</td>\n<td>Return No sub runs since this is a simple workflow.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.combined_workflow.Workflow.manage_output_overwrite\" title=\"dipy.workflows.combined_workflow.Workflow.manage_output_overwrite\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code></a>()</td>\n<td>Check if a file will be overwritten upon processing the inputs.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.combined_workflow.Workflow.run\" title=\"dipy.workflows.combined_workflow.Workflow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(*args,&nbsp;**kwargs)</td>\n<td>Execute the workflow.</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.combined_workflow.Workflow.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.combined_workflow.Workflow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.combined_workflow.Workflow.get_io_iterator\">\n<code class=\"descname\">get_io_iterator</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.combined_workflow.Workflow.get_io_iterator\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Create an iterator for IO.</p>\n<p>Use a couple of inspection tricks to build an IOIterator using the\nprevious frame (values of local variables and other contextuals) and\nthe run method\u2019s docstring.</p>\n</dd></dl>\n\n<dl class=\"classmethod\">\n<dt id=\"dipy.workflows.combined_workflow.Workflow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.combined_workflow.Workflow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return A short name for the workflow used to subdivide.</p>\n<p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name.</p>\n<p>For example, a combined workflow with dti reconstruction and csd\nreconstruction might en up with the b0_threshold parameter. Using short\nnames, we will have dti.b0_threshold and csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.combined_workflow.Workflow.get_sub_runs\">\n<code class=\"descname\">get_sub_runs</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.combined_workflow.Workflow.get_sub_runs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return No sub runs since this is a simple workflow.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.combined_workflow.Workflow.manage_output_overwrite\">\n<code class=\"descname\">manage_output_overwrite</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.combined_workflow.Workflow.manage_output_overwrite\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Check if a file will be overwritten upon processing the inputs.</p>\n<p>If it is bound to happen, an action is taken depending on\nself._force_overwrite (or \u2013force via command line). A log message is\noutput independently of the outcome to tell the user something\nhappened.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.combined_workflow.Workflow.run\">\n<code class=\"descname\">run</code><span class=\"sig-paren\">(</span><em>*args</em>, <em>**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.combined_workflow.Workflow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Execute the workflow.</p>\n<p>Since this is an abstract class, raise exception if this code is\nreached (not impletemented in child class or literally called on this\nclass)</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"iteritems\">\n<h3>iteritems<a class=\"headerlink\" href=\"#iteritems\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.combined_workflow.iteritems\">\n<code class=\"descclassname\">dipy.workflows.combined_workflow.</code><code class=\"descname\">iteritems</code><span class=\"sig-paren\">(</span><em>d</em>, <em>**kw</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.combined_workflow.iteritems\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return an iterator over the (key, value) pairs of a dictionary.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"nlmeansflow\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.denoise.NLMeansFlow\" title=\"dipy.workflows.denoise.NLMeansFlow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">NLMeansFlow</span></code></a><a class=\"headerlink\" href=\"#nlmeansflow\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.denoise.NLMeansFlow\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.denoise.</code><code class=\"descname\">NLMeansFlow</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.denoise.NLMeansFlow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow\" title=\"dipy.workflows.workflow.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.workflows.workflow.Workflow</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code>()</td>\n<td>Create an iterator for IO.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.denoise.NLMeansFlow.get_short_name\" title=\"dipy.workflows.denoise.NLMeansFlow.get_short_name\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code></a>()</td>\n<td>Return A short name for the workflow used to subdivide.</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code>()</td>\n<td>Return No sub runs since this is a simple workflow.</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code>()</td>\n<td>Check if a file will be overwritten upon processing the inputs.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.denoise.NLMeansFlow.run\" title=\"dipy.workflows.denoise.NLMeansFlow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(input_files[,&nbsp;sigma,&nbsp;out_dir,&nbsp;out_denoised])</td>\n<td>Workflow wrapping the nlmeans denoising method.</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.denoise.NLMeansFlow.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.denoise.NLMeansFlow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"classmethod\">\n<dt id=\"dipy.workflows.denoise.NLMeansFlow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.denoise.NLMeansFlow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return A short name for the workflow used to subdivide.</p>\n<p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name.</p>\n<p>For example, a combined workflow with dti reconstruction and csd\nreconstruction might en up with the b0_threshold parameter. Using short\nnames, we will have dti.b0_threshold and csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.denoise.NLMeansFlow.run\">\n<code class=\"descname\">run</code><span class=\"sig-paren\">(</span><em>input_files</em>, <em>sigma=0</em>, <em>out_dir=''</em>, <em>out_denoised='dwi_nlmeans.nii.gz'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.denoise.NLMeansFlow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Workflow wrapping the nlmeans denoising method.</p>\n<p>It applies nlmeans denoise on each file found by \u2018globing\u2019\n<code class=\"docutils literal notranslate\"><span class=\"pre\">input_files</span></code> and saves the results in a directory specified by\n<code class=\"docutils literal notranslate\"><span class=\"pre\">out_dir</span></code>.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>input_files</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">Path to the input volumes. This path may contain wildcards to\nprocess multiple inputs at once.</p>\n</dd>\n<dt><strong>sigma</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float, optional</span></dt>\n<dd><p class=\"first last\">Sigma parameter to pass to the nlmeans algorithm\n(default: auto estimation).</p>\n</dd>\n<dt><strong>out_dir</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Output directory (default input file directory)</p>\n</dd>\n<dt><strong>out_denoised</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the resuting denoised volume (default: dwi_nlmeans.nii.gz)</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id24\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.denoise.Workflow\" title=\"dipy.workflows.denoise.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a><a class=\"headerlink\" href=\"#id24\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.denoise.Workflow\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.denoise.</code><code class=\"descname\">Workflow</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.denoise.Workflow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.7)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.denoise.Workflow.get_io_iterator\" title=\"dipy.workflows.denoise.Workflow.get_io_iterator\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code></a>()</td>\n<td>Create an iterator for IO.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.denoise.Workflow.get_short_name\" title=\"dipy.workflows.denoise.Workflow.get_short_name\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code></a>()</td>\n<td>Return A short name for the workflow used to subdivide.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.denoise.Workflow.get_sub_runs\" title=\"dipy.workflows.denoise.Workflow.get_sub_runs\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code></a>()</td>\n<td>Return No sub runs since this is a simple workflow.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.denoise.Workflow.manage_output_overwrite\" title=\"dipy.workflows.denoise.Workflow.manage_output_overwrite\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code></a>()</td>\n<td>Check if a file will be overwritten upon processing the inputs.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.denoise.Workflow.run\" title=\"dipy.workflows.denoise.Workflow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(*args,&nbsp;**kwargs)</td>\n<td>Execute the workflow.</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.denoise.Workflow.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.denoise.Workflow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.denoise.Workflow.get_io_iterator\">\n<code class=\"descname\">get_io_iterator</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.denoise.Workflow.get_io_iterator\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Create an iterator for IO.</p>\n<p>Use a couple of inspection tricks to build an IOIterator using the\nprevious frame (values of local variables and other contextuals) and\nthe run method\u2019s docstring.</p>\n</dd></dl>\n\n<dl class=\"classmethod\">\n<dt id=\"dipy.workflows.denoise.Workflow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.denoise.Workflow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return A short name for the workflow used to subdivide.</p>\n<p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name.</p>\n<p>For example, a combined workflow with dti reconstruction and csd\nreconstruction might en up with the b0_threshold parameter. Using short\nnames, we will have dti.b0_threshold and csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.denoise.Workflow.get_sub_runs\">\n<code class=\"descname\">get_sub_runs</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.denoise.Workflow.get_sub_runs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return No sub runs since this is a simple workflow.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.denoise.Workflow.manage_output_overwrite\">\n<code class=\"descname\">manage_output_overwrite</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.denoise.Workflow.manage_output_overwrite\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Check if a file will be overwritten upon processing the inputs.</p>\n<p>If it is bound to happen, an action is taken depending on\nself._force_overwrite (or \u2013force via command line). A log message is\noutput independently of the outcome to tell the user something\nhappened.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.denoise.Workflow.run\">\n<code class=\"descname\">run</code><span class=\"sig-paren\">(</span><em>*args</em>, <em>**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.denoise.Workflow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Execute the workflow.</p>\n<p>Since this is an abstract class, raise exception if this code is\nreached (not impletemented in child class or literally called on this\nclass)</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"estimate-sigma\">\n<h3>estimate_sigma<a class=\"headerlink\" href=\"#estimate-sigma\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.denoise.estimate_sigma\">\n<code class=\"descclassname\">dipy.workflows.denoise.</code><code class=\"descname\">estimate_sigma</code><span class=\"sig-paren\">(</span><em>arr</em>, <em>disable_background_masking=False</em>, <em>N=0</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.denoise.estimate_sigma\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Standard deviation estimation from local patches</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>arr</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">3D or 4D ndarray</span></dt>\n<dd><p class=\"first last\">The array to be estimated</p>\n</dd>\n<dt><strong>disable_background_masking</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool, default False</span></dt>\n<dd><p class=\"first last\">If True, uses all voxels for the estimation, otherwise, only non-zeros\nvoxels are used. Useful if the background is masked by the scanner.</p>\n</dd>\n<dt><strong>N</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int, default 0</span></dt>\n<dd><p class=\"first last\">Number of coils of the receiver array. Use N = 1 in case of a SENSE\nreconstruction (Philips scanners) or the number of coils for a GRAPPA\nreconstruction (Siemens and GE). Use 0 to disable the correction factor,\nas for example if the noise is Gaussian distributed. See [1] for more\ninformation.</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>sigma</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">ndarray</span></dt>\n<dd><p class=\"first last\">standard deviation of the noise, one estimation per volume.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id25\">\n<h3>load_nifti<a class=\"headerlink\" href=\"#id25\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.denoise.load_nifti\">\n<code class=\"descclassname\">dipy.workflows.denoise.</code><code class=\"descname\">load_nifti</code><span class=\"sig-paren\">(</span><em>fname</em>, <em>return_img=False</em>, <em>return_voxsize=False</em>, <em>return_coords=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.denoise.load_nifti\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</div>\n<div class=\"section\" id=\"nlmeans\">\n<h3>nlmeans<a class=\"headerlink\" href=\"#nlmeans\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.denoise.nlmeans\">\n<code class=\"descclassname\">dipy.workflows.denoise.</code><code class=\"descname\">nlmeans</code><span class=\"sig-paren\">(</span><em>arr</em>, <em>sigma</em>, <em>mask=None</em>, <em>patch_radius=1</em>, <em>block_radius=5</em>, <em>rician=True</em>, <em>num_threads=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.denoise.nlmeans\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Non-local means for denoising 3D and 4D images</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>arr</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">3D or 4D ndarray</span></dt>\n<dd><p class=\"first last\">The array to be denoised</p>\n</dd>\n<dt><strong>mask</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">3D ndarray</span></dt>\n<dd></dd>\n<dt><strong>sigma</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float or 3D array</span></dt>\n<dd><p class=\"first last\">standard deviation of the noise estimated from the data</p>\n</dd>\n<dt><strong>patch_radius</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int</span></dt>\n<dd><p class=\"first last\">patch size is <code class=\"docutils literal notranslate\"><span class=\"pre\">2</span> <span class=\"pre\">x</span> <span class=\"pre\">patch_radius</span> <span class=\"pre\">+</span> <span class=\"pre\">1</span></code>. Default is 1.</p>\n</dd>\n<dt><strong>block_radius</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int</span></dt>\n<dd><p class=\"first last\">block size is <code class=\"docutils literal notranslate\"><span class=\"pre\">2</span> <span class=\"pre\">x</span> <span class=\"pre\">block_radius</span> <span class=\"pre\">+</span> <span class=\"pre\">1</span></code>. Default is 5.</p>\n</dd>\n<dt><strong>rician</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">boolean</span></dt>\n<dd><p class=\"first last\">If True the noise is estimated as Rician, otherwise Gaussian noise\nis assumed.</p>\n</dd>\n<dt><strong>num_threads</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int</span></dt>\n<dd><p class=\"first last\">Number of threads. If None (default) then all available threads\nwill be used (all CPU cores).</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>denoised_arr</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">ndarray</span></dt>\n<dd><p class=\"first last\">the denoised <code class=\"docutils literal notranslate\"><span class=\"pre\">arr</span></code> which has the same shape as <code class=\"docutils literal notranslate\"><span class=\"pre\">arr</span></code>.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">References</p>\n<table class=\"docutils citation\" frame=\"void\" id=\"r133aa7056047-descoteaux08\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\"><a class=\"fn-backref\" href=\"#id26\">[Descoteaux08]</a></td><td>Descoteaux, Maxim and Wiest-Daessle`, Nicolas and Prima,\nSylvain and Barillot, Christian and Deriche, Rachid\nImpact of Rician Adapted Non-Local Means Filtering on\nHARDI, MICCAI 2008</td></tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id27\">\n<h3>save_nifti<a class=\"headerlink\" href=\"#id27\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.denoise.save_nifti\">\n<code class=\"descclassname\">dipy.workflows.denoise.</code><code class=\"descname\">save_nifti</code><span class=\"sig-paren\">(</span><em>fname</em>, <em>data</em>, <em>affine</em>, <em>hdr=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.denoise.save_nifti\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</div>\n<div class=\"section\" id=\"id28\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.docstring_parser.NumpyDocString\" title=\"dipy.workflows.docstring_parser.NumpyDocString\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">NumpyDocString</span></code></a><a class=\"headerlink\" href=\"#id28\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.docstring_parser.NumpyDocString\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.docstring_parser.</code><code class=\"descname\">NumpyDocString</code><span class=\"sig-paren\">(</span><em>docstring</em>, <em>config={}</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.docstring_parser.NumpyDocString\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.7)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.docstring_parser.NumpyDocString.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>docstring</em>, <em>config={}</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.docstring_parser.NumpyDocString.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize self.  See help(type(self)) for accurate signature.</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"reader\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.docstring_parser.Reader\" title=\"dipy.workflows.docstring_parser.Reader\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Reader</span></code></a><a class=\"headerlink\" href=\"#reader\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.docstring_parser.Reader\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.docstring_parser.</code><code class=\"descname\">Reader</code><span class=\"sig-paren\">(</span><em>data</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.docstring_parser.Reader\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.7)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p>A line-based string reader.</p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"docutils\">\n<colgroup>\n<col width=\"76%\" />\n<col width=\"24%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><strong>eof</strong></td>\n<td>&#160;</td>\n</tr>\n<tr class=\"row-even\"><td><strong>is_empty</strong></td>\n<td>&#160;</td>\n</tr>\n<tr class=\"row-odd\"><td><strong>peek</strong></td>\n<td>&#160;</td>\n</tr>\n<tr class=\"row-even\"><td><strong>read</strong></td>\n<td>&#160;</td>\n</tr>\n<tr class=\"row-odd\"><td><strong>read_to_condition</strong></td>\n<td>&#160;</td>\n</tr>\n<tr class=\"row-even\"><td><strong>read_to_next_empty_line</strong></td>\n<td>&#160;</td>\n</tr>\n<tr class=\"row-odd\"><td><strong>read_to_next_unindented_line</strong></td>\n<td>&#160;</td>\n</tr>\n<tr class=\"row-even\"><td><strong>reset</strong></td>\n<td>&#160;</td>\n</tr>\n<tr class=\"row-odd\"><td><strong>seek_next_non_empty_line</strong></td>\n<td>&#160;</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.docstring_parser.Reader.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>data</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.docstring_parser.Reader.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>data</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">str</span></dt>\n<dd><p class=\"first last\">String with lines separated by \u2018</p>\n</dd>\n<dt><strong>\u2018.</strong></dt>\n<dd></dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.docstring_parser.Reader.eof\">\n<code class=\"descname\">eof</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.docstring_parser.Reader.eof\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.docstring_parser.Reader.is_empty\">\n<code class=\"descname\">is_empty</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.docstring_parser.Reader.is_empty\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.docstring_parser.Reader.peek\">\n<code class=\"descname\">peek</code><span class=\"sig-paren\">(</span><em>n=0</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.docstring_parser.Reader.peek\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.docstring_parser.Reader.read\">\n<code class=\"descname\">read</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.docstring_parser.Reader.read\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.docstring_parser.Reader.read_to_condition\">\n<code class=\"descname\">read_to_condition</code><span class=\"sig-paren\">(</span><em>condition_func</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.docstring_parser.Reader.read_to_condition\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.docstring_parser.Reader.read_to_next_empty_line\">\n<code class=\"descname\">read_to_next_empty_line</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.docstring_parser.Reader.read_to_next_empty_line\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.docstring_parser.Reader.read_to_next_unindented_line\">\n<code class=\"descname\">read_to_next_unindented_line</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.docstring_parser.Reader.read_to_next_unindented_line\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.docstring_parser.Reader.reset\">\n<code class=\"descname\">reset</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.docstring_parser.Reader.reset\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.docstring_parser.Reader.seek_next_non_empty_line\">\n<code class=\"descname\">seek_next_non_empty_line</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.docstring_parser.Reader.seek_next_non_empty_line\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"dedent-lines\">\n<h3>dedent_lines<a class=\"headerlink\" href=\"#dedent-lines\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.docstring_parser.dedent_lines\">\n<code class=\"descclassname\">dipy.workflows.docstring_parser.</code><code class=\"descname\">dedent_lines</code><span class=\"sig-paren\">(</span><em>lines</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.docstring_parser.dedent_lines\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Deindent a list of lines maximally</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"warn\">\n<h3>warn<a class=\"headerlink\" href=\"#warn\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.docstring_parser.warn\">\n<code class=\"descclassname\">dipy.workflows.docstring_parser.</code><code class=\"descname\">warn</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.docstring_parser.warn\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Issue a warning, or maybe ignore it or raise an exception.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id29\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.flow_runner.IntrospectiveArgumentParser\" title=\"dipy.workflows.flow_runner.IntrospectiveArgumentParser\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">IntrospectiveArgumentParser</span></code></a><a class=\"headerlink\" href=\"#id29\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.flow_runner.IntrospectiveArgumentParser\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.flow_runner.</code><code class=\"descname\">IntrospectiveArgumentParser</code><span class=\"sig-paren\">(</span><em>prog=None</em>, <em>usage=None</em>, <em>description=None</em>, <em>epilog=None</em>, <em>parents=[]</em>, <em>formatter_class=&lt;class 'argparse.RawTextHelpFormatter'&gt;</em>, <em>prefix_chars='-'</em>, <em>fromfile_prefix_chars=None</em>, <em>argument_default=None</em>, <em>conflict_handler='resolve'</em>, <em>add_help=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.flow_runner.IntrospectiveArgumentParser\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser\" title=\"(in Python v3.7)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">argparse.ArgumentParser</span></code></a></p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Attributes:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>optional_parameters</strong></dt>\n<dd></dd>\n<dt><strong>output_parameters</strong></dt>\n<dd></dd>\n<dt><strong>positional_parameters</strong></dt>\n<dd></dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">add_argument</span></code>(dest,&nbsp;\u2026[,&nbsp;name,&nbsp;name])</td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.flow_runner.IntrospectiveArgumentParser.add_sub_flow_args\" title=\"dipy.workflows.flow_runner.IntrospectiveArgumentParser.add_sub_flow_args\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">add_sub_flow_args</span></code></a>(sub_flows)</td>\n<td>Take an array of workflow objects and use introspection to extract the parameters, types and docstrings of their run method.</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">add_subparsers</span></code>(**kwargs)</td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.flow_runner.IntrospectiveArgumentParser.add_workflow\" title=\"dipy.workflows.flow_runner.IntrospectiveArgumentParser.add_workflow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">add_workflow</span></code></a>(workflow)</td>\n<td>Take a workflow object and use introspection to extract the parameters, types and docstrings of its run method.</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">error</span></code>(message)</td>\n<td>Prints a usage message incorporating the message to stderr and exits.</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">exit</span></code>([status,&nbsp;message])</td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">format_usage</span></code>()</td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.flow_runner.IntrospectiveArgumentParser.get_flow_args\" title=\"dipy.workflows.flow_runner.IntrospectiveArgumentParser.get_flow_args\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_flow_args</span></code></a>([args,&nbsp;namespace])</td>\n<td>Returns the parsed arguments as a dictionary that will be used as a workflow\u2019s run method arguments.</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">parse_args</span></code>([args,&nbsp;namespace])</td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">print_usage</span></code>([file])</td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">register</span></code>(registry_name,&nbsp;value,&nbsp;object)</td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">set_defaults</span></code>(**kwargs)</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<table border=\"1\" class=\"docutils\">\n<colgroup>\n<col width=\"76%\" />\n<col width=\"24%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><strong>add_argument_group</strong></td>\n<td>&#160;</td>\n</tr>\n<tr class=\"row-even\"><td><strong>add_description</strong></td>\n<td>&#160;</td>\n</tr>\n<tr class=\"row-odd\"><td><strong>add_epilogue</strong></td>\n<td>&#160;</td>\n</tr>\n<tr class=\"row-even\"><td><strong>add_mutually_exclusive_group</strong></td>\n<td>&#160;</td>\n</tr>\n<tr class=\"row-odd\"><td><strong>convert_arg_line_to_args</strong></td>\n<td>&#160;</td>\n</tr>\n<tr class=\"row-even\"><td><strong>format_help</strong></td>\n<td>&#160;</td>\n</tr>\n<tr class=\"row-odd\"><td><strong>get_default</strong></td>\n<td>&#160;</td>\n</tr>\n<tr class=\"row-even\"><td><strong>parse_known_args</strong></td>\n<td>&#160;</td>\n</tr>\n<tr class=\"row-odd\"><td><strong>print_help</strong></td>\n<td>&#160;</td>\n</tr>\n<tr class=\"row-even\"><td><strong>show_argument</strong></td>\n<td>&#160;</td>\n</tr>\n<tr class=\"row-odd\"><td><strong>update_argument</strong></td>\n<td>&#160;</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.flow_runner.IntrospectiveArgumentParser.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>prog=None</em>, <em>usage=None</em>, <em>description=None</em>, <em>epilog=None</em>, <em>parents=[]</em>, <em>formatter_class=&lt;class 'argparse.RawTextHelpFormatter'&gt;</em>, <em>prefix_chars='-'</em>, <em>fromfile_prefix_chars=None</em>, <em>argument_default=None</em>, <em>conflict_handler='resolve'</em>, <em>add_help=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.flow_runner.IntrospectiveArgumentParser.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Augmenting the argument parser to allow automatic creation of\narguments from workflows</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>prog</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">None</span></dt>\n<dd><p class=\"first last\">The name of the program (default: sys.argv[0])</p>\n</dd>\n<dt><strong>usage</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">None</span></dt>\n<dd><p class=\"first last\">A usage message (default: auto-generated from arguments)</p>\n</dd>\n<dt><strong>description</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">str</span></dt>\n<dd><p class=\"first last\">A description of what the program does</p>\n</dd>\n<dt><strong>epilog</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">str</span></dt>\n<dd><p class=\"first last\">Text following the argument descriptions</p>\n</dd>\n<dt><strong>parents</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">list</span></dt>\n<dd><p class=\"first last\">Parsers whose arguments should be copied into this one</p>\n</dd>\n<dt><strong>formatter_class</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">obj</span></dt>\n<dd><p class=\"first last\">HelpFormatter class for printing help messages</p>\n</dd>\n<dt><strong>prefix_chars</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">str</span></dt>\n<dd><p class=\"first last\">Characters that prefix optional arguments</p>\n</dd>\n<dt><strong>fromfile_prefix_chars</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">None</span></dt>\n<dd><p class=\"first last\">Characters that prefix files containing additional arguments</p>\n</dd>\n<dt><strong>argument_default</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">None</span></dt>\n<dd><p class=\"first last\">The default value for all arguments</p>\n</dd>\n<dt><strong>conflict_handler</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">str</span></dt>\n<dd><p class=\"first last\">String indicating how to handle conflicts</p>\n</dd>\n<dt><strong>add_help</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool</span></dt>\n<dd><p class=\"first last\">Add a -h/-help option</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.flow_runner.IntrospectiveArgumentParser.add_description\">\n<code class=\"descname\">add_description</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.flow_runner.IntrospectiveArgumentParser.add_description\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.flow_runner.IntrospectiveArgumentParser.add_epilogue\">\n<code class=\"descname\">add_epilogue</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.flow_runner.IntrospectiveArgumentParser.add_epilogue\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.flow_runner.IntrospectiveArgumentParser.add_sub_flow_args\">\n<code class=\"descname\">add_sub_flow_args</code><span class=\"sig-paren\">(</span><em>sub_flows</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.flow_runner.IntrospectiveArgumentParser.add_sub_flow_args\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Take an array of workflow objects and use introspection to extract\nthe parameters, types and docstrings of their run method. Only the\noptional input parameters are extracted for these as they are treated\nas sub workflows.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>sub_flows</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array of dipy.workflows.workflow.Workflow</span></dt>\n<dd><p class=\"first last\">Workflows to inspect.</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>sub_flow_optionals</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">dictionary of all sub workflow optional parameters</span></dt>\n<dd></dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.flow_runner.IntrospectiveArgumentParser.add_workflow\">\n<code class=\"descname\">add_workflow</code><span class=\"sig-paren\">(</span><em>workflow</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.flow_runner.IntrospectiveArgumentParser.add_workflow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Take a workflow object and use introspection to extract the parameters,\ntypes and docstrings of its run method. Then add these parameters\nto the current arparser\u2019s own params to parse. If the workflow is of\ntype combined_workflow, the optional input parameters of its\nsub workflows will also be added.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>workflow</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">dipy.workflows.workflow.Workflow</span></dt>\n<dd><p class=\"first last\">Workflow from which to infer parameters.</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>sub_flow_optionals</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">dictionary of all sub workflow optional parameters</span></dt>\n<dd></dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.flow_runner.IntrospectiveArgumentParser.get_flow_args\">\n<code class=\"descname\">get_flow_args</code><span class=\"sig-paren\">(</span><em>args=None</em>, <em>namespace=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.flow_runner.IntrospectiveArgumentParser.get_flow_args\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns the parsed arguments as a dictionary that will be used\nas a workflow\u2019s run method arguments.</p>\n</dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.workflows.flow_runner.IntrospectiveArgumentParser.optional_parameters\">\n<code class=\"descname\">optional_parameters</code><a class=\"headerlink\" href=\"#dipy.workflows.flow_runner.IntrospectiveArgumentParser.optional_parameters\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.workflows.flow_runner.IntrospectiveArgumentParser.output_parameters\">\n<code class=\"descname\">output_parameters</code><a class=\"headerlink\" href=\"#dipy.workflows.flow_runner.IntrospectiveArgumentParser.output_parameters\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.workflows.flow_runner.IntrospectiveArgumentParser.positional_parameters\">\n<code class=\"descname\">positional_parameters</code><a class=\"headerlink\" href=\"#dipy.workflows.flow_runner.IntrospectiveArgumentParser.positional_parameters\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.flow_runner.IntrospectiveArgumentParser.show_argument\">\n<code class=\"descname\">show_argument</code><span class=\"sig-paren\">(</span><em>dest</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.flow_runner.IntrospectiveArgumentParser.show_argument\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.flow_runner.IntrospectiveArgumentParser.update_argument\">\n<code class=\"descname\">update_argument</code><span class=\"sig-paren\">(</span><em>*args</em>, <em>**kargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.flow_runner.IntrospectiveArgumentParser.update_argument\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"get-level\">\n<h3>get_level<a class=\"headerlink\" href=\"#get-level\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.flow_runner.get_level\">\n<code class=\"descclassname\">dipy.workflows.flow_runner.</code><code class=\"descname\">get_level</code><span class=\"sig-paren\">(</span><em>lvl</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.flow_runner.get_level\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Transforms the loggin level passed on the commandline into a proper\nlogging level name.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id30\">\n<h3>iteritems<a class=\"headerlink\" href=\"#id30\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.flow_runner.iteritems\">\n<code class=\"descclassname\">dipy.workflows.flow_runner.</code><code class=\"descname\">iteritems</code><span class=\"sig-paren\">(</span><em>d</em>, <em>**kw</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.flow_runner.iteritems\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return an iterator over the (key, value) pairs of a dictionary.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"run-flow\">\n<h3>run_flow<a class=\"headerlink\" href=\"#run-flow\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.flow_runner.run_flow\">\n<code class=\"descclassname\">dipy.workflows.flow_runner.</code><code class=\"descname\">run_flow</code><span class=\"sig-paren\">(</span><em>flow</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.flow_runner.run_flow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Wraps the process of building an argparser that reflects the workflow\nthat we want to run along with some generic parameters like logging,\nforce and output strategies. The resulting parameters are then fed to\nthe workflow\u2019s run method.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"ioinfoflow\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.io.IoInfoFlow\" title=\"dipy.workflows.io.IoInfoFlow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">IoInfoFlow</span></code></a><a class=\"headerlink\" href=\"#ioinfoflow\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.io.IoInfoFlow\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.io.</code><code class=\"descname\">IoInfoFlow</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.io.IoInfoFlow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow\" title=\"dipy.workflows.workflow.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.workflows.workflow.Workflow</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code>()</td>\n<td>Create an iterator for IO.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.io.IoInfoFlow.get_short_name\" title=\"dipy.workflows.io.IoInfoFlow.get_short_name\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code></a>()</td>\n<td>Return A short name for the workflow used to subdivide.</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code>()</td>\n<td>Return No sub runs since this is a simple workflow.</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code>()</td>\n<td>Check if a file will be overwritten upon processing the inputs.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.io.IoInfoFlow.run\" title=\"dipy.workflows.io.IoInfoFlow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(input_files[,&nbsp;b0_threshold,&nbsp;bvecs_tol,&nbsp;\u2026])</td>\n<td>Provides useful information about different files used in medical imaging.</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.io.IoInfoFlow.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.io.IoInfoFlow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"classmethod\">\n<dt id=\"dipy.workflows.io.IoInfoFlow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.io.IoInfoFlow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return A short name for the workflow used to subdivide.</p>\n<p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name.</p>\n<p>For example, a combined workflow with dti reconstruction and csd\nreconstruction might en up with the b0_threshold parameter. Using short\nnames, we will have dti.b0_threshold and csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.io.IoInfoFlow.run\">\n<code class=\"descname\">run</code><span class=\"sig-paren\">(</span><em>input_files</em>, <em>b0_threshold=50</em>, <em>bvecs_tol=0.01</em>, <em>bshell_thr=100</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.io.IoInfoFlow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Provides useful information about different files used in\nmedical imaging. Any number of input files can be provided. The\nprogram identifies the type of file by its extension.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>input_files</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">variable string</span></dt>\n<dd><p class=\"first last\">Any number of Nifti1, bvals or bvecs files.</p>\n</dd>\n<dt><strong>b0_threshold</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float, optional</span></dt>\n<dd><p class=\"first last\">(default 50)</p>\n</dd>\n<dt><strong>bvecs_tol</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float, optional</span></dt>\n<dd><p class=\"first last\">Threshold used to check that norm(bvec) = 1 +/- bvecs_tol\nb-vectors are unit vectors (default 0.01)</p>\n</dd>\n<dt><strong>bshell_thr</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float, optional</span></dt>\n<dd><p class=\"first last\">Threshold for distinguishing b-values in different shells\n(default 100)</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id31\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.io.Workflow\" title=\"dipy.workflows.io.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a><a class=\"headerlink\" href=\"#id31\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.io.Workflow\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.io.</code><code class=\"descname\">Workflow</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.io.Workflow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.7)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.io.Workflow.get_io_iterator\" title=\"dipy.workflows.io.Workflow.get_io_iterator\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code></a>()</td>\n<td>Create an iterator for IO.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.io.Workflow.get_short_name\" title=\"dipy.workflows.io.Workflow.get_short_name\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code></a>()</td>\n<td>Return A short name for the workflow used to subdivide.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.io.Workflow.get_sub_runs\" title=\"dipy.workflows.io.Workflow.get_sub_runs\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code></a>()</td>\n<td>Return No sub runs since this is a simple workflow.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.io.Workflow.manage_output_overwrite\" title=\"dipy.workflows.io.Workflow.manage_output_overwrite\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code></a>()</td>\n<td>Check if a file will be overwritten upon processing the inputs.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.io.Workflow.run\" title=\"dipy.workflows.io.Workflow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(*args,&nbsp;**kwargs)</td>\n<td>Execute the workflow.</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.io.Workflow.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.io.Workflow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.io.Workflow.get_io_iterator\">\n<code class=\"descname\">get_io_iterator</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.io.Workflow.get_io_iterator\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Create an iterator for IO.</p>\n<p>Use a couple of inspection tricks to build an IOIterator using the\nprevious frame (values of local variables and other contextuals) and\nthe run method\u2019s docstring.</p>\n</dd></dl>\n\n<dl class=\"classmethod\">\n<dt id=\"dipy.workflows.io.Workflow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.io.Workflow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return A short name for the workflow used to subdivide.</p>\n<p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name.</p>\n<p>For example, a combined workflow with dti reconstruction and csd\nreconstruction might en up with the b0_threshold parameter. Using short\nnames, we will have dti.b0_threshold and csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.io.Workflow.get_sub_runs\">\n<code class=\"descname\">get_sub_runs</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.io.Workflow.get_sub_runs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return No sub runs since this is a simple workflow.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.io.Workflow.manage_output_overwrite\">\n<code class=\"descname\">manage_output_overwrite</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.io.Workflow.manage_output_overwrite\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Check if a file will be overwritten upon processing the inputs.</p>\n<p>If it is bound to happen, an action is taken depending on\nself._force_overwrite (or \u2013force via command line). A log message is\noutput independently of the outcome to tell the user something\nhappened.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.io.Workflow.run\">\n<code class=\"descname\">run</code><span class=\"sig-paren\">(</span><em>*args</em>, <em>**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.io.Workflow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Execute the workflow.</p>\n<p>Since this is an abstract class, raise exception if this code is\nreached (not impletemented in child class or literally called on this\nclass)</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id32\">\n<h3>load_nifti<a class=\"headerlink\" href=\"#id32\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.io.load_nifti\">\n<code class=\"descclassname\">dipy.workflows.io.</code><code class=\"descname\">load_nifti</code><span class=\"sig-paren\">(</span><em>fname</em>, <em>return_img=False</em>, <em>return_voxsize=False</em>, <em>return_coords=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.io.load_nifti\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</div>\n<div class=\"section\" id=\"maskflow\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.mask.MaskFlow\" title=\"dipy.workflows.mask.MaskFlow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">MaskFlow</span></code></a><a class=\"headerlink\" href=\"#maskflow\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.mask.MaskFlow\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.mask.</code><code class=\"descname\">MaskFlow</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.mask.MaskFlow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow\" title=\"dipy.workflows.workflow.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.workflows.workflow.Workflow</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code>()</td>\n<td>Create an iterator for IO.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.mask.MaskFlow.get_short_name\" title=\"dipy.workflows.mask.MaskFlow.get_short_name\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code></a>()</td>\n<td>Return A short name for the workflow used to subdivide.</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code>()</td>\n<td>Return No sub runs since this is a simple workflow.</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code>()</td>\n<td>Check if a file will be overwritten upon processing the inputs.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.mask.MaskFlow.run\" title=\"dipy.workflows.mask.MaskFlow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(input_files,&nbsp;lb[,&nbsp;ub,&nbsp;out_dir,&nbsp;out_mask])</td>\n<td>Workflow for creating a binary mask</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.mask.MaskFlow.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.mask.MaskFlow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"classmethod\">\n<dt id=\"dipy.workflows.mask.MaskFlow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.mask.MaskFlow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return A short name for the workflow used to subdivide.</p>\n<p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name.</p>\n<p>For example, a combined workflow with dti reconstruction and csd\nreconstruction might en up with the b0_threshold parameter. Using short\nnames, we will have dti.b0_threshold and csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.mask.MaskFlow.run\">\n<code class=\"descname\">run</code><span class=\"sig-paren\">(</span><em>input_files</em>, <em>lb</em>, <em>ub=inf</em>, <em>out_dir=''</em>, <em>out_mask='mask.nii.gz'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.mask.MaskFlow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Workflow for creating a binary mask</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>input_files</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">Path to image to be masked.</p>\n</dd>\n<dt><strong>lb</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float</span></dt>\n<dd><p class=\"first last\">Lower bound value.</p>\n</dd>\n<dt><strong>ub</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float, optional</span></dt>\n<dd><p class=\"first last\">Upper bound value (default Inf)</p>\n</dd>\n<dt><strong>out_dir</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Output directory (default input file directory)</p>\n</dd>\n<dt><strong>out_mask</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the masked file (default \u2018mask.nii.gz\u2019)</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id33\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.mask.Workflow\" title=\"dipy.workflows.mask.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a><a class=\"headerlink\" href=\"#id33\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.mask.Workflow\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.mask.</code><code class=\"descname\">Workflow</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.mask.Workflow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.7)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.mask.Workflow.get_io_iterator\" title=\"dipy.workflows.mask.Workflow.get_io_iterator\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code></a>()</td>\n<td>Create an iterator for IO.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.mask.Workflow.get_short_name\" title=\"dipy.workflows.mask.Workflow.get_short_name\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code></a>()</td>\n<td>Return A short name for the workflow used to subdivide.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.mask.Workflow.get_sub_runs\" title=\"dipy.workflows.mask.Workflow.get_sub_runs\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code></a>()</td>\n<td>Return No sub runs since this is a simple workflow.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.mask.Workflow.manage_output_overwrite\" title=\"dipy.workflows.mask.Workflow.manage_output_overwrite\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code></a>()</td>\n<td>Check if a file will be overwritten upon processing the inputs.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.mask.Workflow.run\" title=\"dipy.workflows.mask.Workflow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(*args,&nbsp;**kwargs)</td>\n<td>Execute the workflow.</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.mask.Workflow.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.mask.Workflow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.mask.Workflow.get_io_iterator\">\n<code class=\"descname\">get_io_iterator</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.mask.Workflow.get_io_iterator\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Create an iterator for IO.</p>\n<p>Use a couple of inspection tricks to build an IOIterator using the\nprevious frame (values of local variables and other contextuals) and\nthe run method\u2019s docstring.</p>\n</dd></dl>\n\n<dl class=\"classmethod\">\n<dt id=\"dipy.workflows.mask.Workflow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.mask.Workflow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return A short name for the workflow used to subdivide.</p>\n<p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name.</p>\n<p>For example, a combined workflow with dti reconstruction and csd\nreconstruction might en up with the b0_threshold parameter. Using short\nnames, we will have dti.b0_threshold and csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.mask.Workflow.get_sub_runs\">\n<code class=\"descname\">get_sub_runs</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.mask.Workflow.get_sub_runs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return No sub runs since this is a simple workflow.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.mask.Workflow.manage_output_overwrite\">\n<code class=\"descname\">manage_output_overwrite</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.mask.Workflow.manage_output_overwrite\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Check if a file will be overwritten upon processing the inputs.</p>\n<p>If it is bound to happen, an action is taken depending on\nself._force_overwrite (or \u2013force via command line). A log message is\noutput independently of the outcome to tell the user something\nhappened.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.mask.Workflow.run\">\n<code class=\"descname\">run</code><span class=\"sig-paren\">(</span><em>*args</em>, <em>**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.mask.Workflow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Execute the workflow.</p>\n<p>Since this is an abstract class, raise exception if this code is\nreached (not impletemented in child class or literally called on this\nclass)</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id34\">\n<h3>load_nifti<a class=\"headerlink\" href=\"#id34\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.mask.load_nifti\">\n<code class=\"descclassname\">dipy.workflows.mask.</code><code class=\"descname\">load_nifti</code><span class=\"sig-paren\">(</span><em>fname</em>, <em>return_img=False</em>, <em>return_voxsize=False</em>, <em>return_coords=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.mask.load_nifti\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</div>\n<div class=\"section\" id=\"id35\">\n<h3>save_nifti<a class=\"headerlink\" href=\"#id35\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.mask.save_nifti\">\n<code class=\"descclassname\">dipy.workflows.mask.</code><code class=\"descname\">save_nifti</code><span class=\"sig-paren\">(</span><em>fname</em>, <em>data</em>, <em>affine</em>, <em>hdr=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.mask.save_nifti\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</div>\n<div class=\"section\" id=\"ioiterator\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.multi_io.IOIterator\" title=\"dipy.workflows.multi_io.IOIterator\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">IOIterator</span></code></a><a class=\"headerlink\" href=\"#ioiterator\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.multi_io.IOIterator\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.multi_io.</code><code class=\"descname\">IOIterator</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.multi_io.IOIterator\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.7)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p>Create output filenames that work nicely with multiple input files from\nmultiple directories (processing multiple subjects with one command)</p>\n<p>Use information from input files, out_dir and out_fnames to generate\ncorrect outputs which can come from long lists of multiple or single\ninputs.</p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"docutils\">\n<colgroup>\n<col width=\"71%\" />\n<col width=\"29%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><strong>create_directories</strong></td>\n<td>&#160;</td>\n</tr>\n<tr class=\"row-even\"><td><strong>create_outputs</strong></td>\n<td>&#160;</td>\n</tr>\n<tr class=\"row-odd\"><td><strong>file_existence_check</strong></td>\n<td>&#160;</td>\n</tr>\n<tr class=\"row-even\"><td><strong>set_inputs</strong></td>\n<td>&#160;</td>\n</tr>\n<tr class=\"row-odd\"><td><strong>set_out_dir</strong></td>\n<td>&#160;</td>\n</tr>\n<tr class=\"row-even\"><td><strong>set_out_fnames</strong></td>\n<td>&#160;</td>\n</tr>\n<tr class=\"row-odd\"><td><strong>set_output_keys</strong></td>\n<td>&#160;</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.multi_io.IOIterator.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.multi_io.IOIterator.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize self.  See help(type(self)) for accurate signature.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.multi_io.IOIterator.create_directories\">\n<code class=\"descname\">create_directories</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.multi_io.IOIterator.create_directories\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.multi_io.IOIterator.create_outputs\">\n<code class=\"descname\">create_outputs</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.multi_io.IOIterator.create_outputs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.multi_io.IOIterator.file_existence_check\">\n<code class=\"descname\">file_existence_check</code><span class=\"sig-paren\">(</span><em>args</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.multi_io.IOIterator.file_existence_check\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.multi_io.IOIterator.set_inputs\">\n<code class=\"descname\">set_inputs</code><span class=\"sig-paren\">(</span><em>*args</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.multi_io.IOIterator.set_inputs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.multi_io.IOIterator.set_out_dir\">\n<code class=\"descname\">set_out_dir</code><span class=\"sig-paren\">(</span><em>out_dir</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.multi_io.IOIterator.set_out_dir\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.multi_io.IOIterator.set_out_fnames\">\n<code class=\"descname\">set_out_fnames</code><span class=\"sig-paren\">(</span><em>*args</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.multi_io.IOIterator.set_out_fnames\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.multi_io.IOIterator.set_output_keys\">\n<code class=\"descname\">set_output_keys</code><span class=\"sig-paren\">(</span><em>*args</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.multi_io.IOIterator.set_output_keys\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"basename-without-extension\">\n<h3>basename_without_extension<a class=\"headerlink\" href=\"#basename-without-extension\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.multi_io.basename_without_extension\">\n<code class=\"descclassname\">dipy.workflows.multi_io.</code><code class=\"descname\">basename_without_extension</code><span class=\"sig-paren\">(</span><em>fname</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.multi_io.basename_without_extension\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</div>\n<div class=\"section\" id=\"common-start\">\n<h3>common_start<a class=\"headerlink\" href=\"#common-start\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.multi_io.common_start\">\n<code class=\"descclassname\">dipy.workflows.multi_io.</code><code class=\"descname\">common_start</code><span class=\"sig-paren\">(</span><em>sa</em>, <em>sb</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.multi_io.common_start\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return the longest common substring from the beginning of sa and sb.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"concatenate-inputs\">\n<h3>concatenate_inputs<a class=\"headerlink\" href=\"#concatenate-inputs\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.multi_io.concatenate_inputs\">\n<code class=\"descclassname\">dipy.workflows.multi_io.</code><code class=\"descname\">concatenate_inputs</code><span class=\"sig-paren\">(</span><em>multi_inputs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.multi_io.concatenate_inputs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Concatenate list of inputs</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"connect-output-paths\">\n<h3>connect_output_paths<a class=\"headerlink\" href=\"#connect-output-paths\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.multi_io.connect_output_paths\">\n<code class=\"descclassname\">dipy.workflows.multi_io.</code><code class=\"descname\">connect_output_paths</code><span class=\"sig-paren\">(</span><em>inputs</em>, <em>out_dir</em>, <em>out_files</em>, <em>output_strategy='absolute'</em>, <em>mix_names=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.multi_io.connect_output_paths\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Generates a list of output files paths based on input files and\noutput strategies.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>inputs</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array</span></dt>\n<dd><blockquote class=\"first\">\n<div><p>List of input paths.</p>\n</div></blockquote>\n<dl class=\"last docutils\">\n<dt>out_dir <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">The output directory.</p>\n</dd>\n<dt>out_files <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array</span></dt>\n<dd><p class=\"first last\">List of output files.</p>\n</dd>\n<dt>output_strategy <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><dl class=\"first last docutils\">\n<dt>Which strategy to use to generate the output paths.</dt>\n<dd><p class=\"first last\">\u2018append\u2019: Add out_dir to the path of the input.\n\u2018prepend\u2019: Add the input path directory tree to out_dir.\n\u2018absolute\u2019: Put directly in out_dir.</p>\n</dd>\n</dl>\n</dd>\n<dt>mix_names <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool</span></dt>\n<dd><p class=\"first last\">Whether or not prepend a string composed of a mix of the input\nnames to the final output name.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>A list of output file paths.</strong></dt>\n<dd></dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id36\">\n<h3>get_args_default<a class=\"headerlink\" href=\"#id36\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.multi_io.get_args_default\">\n<code class=\"descclassname\">dipy.workflows.multi_io.</code><code class=\"descname\">get_args_default</code><span class=\"sig-paren\">(</span><em>func</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.multi_io.get_args_default\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</div>\n<div class=\"section\" id=\"glob\">\n<h3>glob<a class=\"headerlink\" href=\"#glob\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.multi_io.glob\">\n<code class=\"descclassname\">dipy.workflows.multi_io.</code><code class=\"descname\">glob</code><span class=\"sig-paren\">(</span><em>pathname</em>, <em>*</em>, <em>recursive=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.multi_io.glob\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return a list of paths matching a pathname pattern.</p>\n<p>The pattern may contain simple shell-style wildcards a la\nfnmatch. However, unlike fnmatch, filenames starting with a\ndot are special cases that are not matched by \u2018*\u2019 and \u2018?\u2019\npatterns.</p>\n<p>If recursive is true, the pattern \u2018**\u2019 will match any files and\nzero or more directories and subdirectories.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"io-iterator\">\n<h3>io_iterator<a class=\"headerlink\" href=\"#io-iterator\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.multi_io.io_iterator\">\n<code class=\"descclassname\">dipy.workflows.multi_io.</code><code class=\"descname\">io_iterator</code><span class=\"sig-paren\">(</span><em>inputs</em>, <em>out_dir</em>, <em>fnames</em>, <em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>out_keys=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.multi_io.io_iterator\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Creates an IOIterator from the parameters.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>inputs</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array</span></dt>\n<dd><blockquote class=\"first\">\n<div><p>List of input files.</p>\n</div></blockquote>\n<dl class=\"last docutils\">\n<dt>out_dir <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">Output directory.</p>\n</dd>\n<dt>fnames <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array</span></dt>\n<dd><p class=\"first last\">File names of all outputs to be created.</p>\n</dd>\n<dt>output_strategy <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">Controls the behavior of the IOIterator for output paths.</p>\n</dd>\n<dt>mix_names <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool</span></dt>\n<dd><p class=\"first last\">Whether or not to append a mix of input names at the beginning.</p>\n</dd>\n</dl>\n</dd>\n<dt><strong>Returns</strong></dt>\n<dd></dd>\n<dt><strong>\u2014\u2014-</strong></dt>\n<dd><p class=\"first last\">Properly instantiated IOIterator object.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id37\">\n<h3><a href=\"#id155\"><span class=\"problematic\" id=\"id156\">io_iterator_</span></a><a class=\"headerlink\" href=\"#id37\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.multi_io.io_iterator_\">\n<code class=\"descclassname\">dipy.workflows.multi_io.</code><code class=\"descname\">io_iterator_</code><span class=\"sig-paren\">(</span><em>frame</em>, <em>fnc</em>, <em>output_strategy='absolute'</em>, <em>mix_names=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.multi_io.io_iterator_\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Creates an IOIterator using introspection.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>frame</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">frameobject</span></dt>\n<dd><blockquote class=\"first\">\n<div><p>Contains the info about the current local variables values.</p>\n</div></blockquote>\n<dl class=\"last docutils\">\n<dt>fnc <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">function</span></dt>\n<dd><p class=\"first last\">The function to inspect</p>\n</dd>\n<dt>output_strategy <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">Controls the behavior of the IOIterator for output paths.</p>\n</dd>\n<dt>mix_names <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool</span></dt>\n<dd><p class=\"first last\">Whether or not to append a mix of input names at the beginning.</p>\n</dd>\n</dl>\n</dd>\n<dt><strong>Returns</strong></dt>\n<dd></dd>\n<dt><strong>\u2014\u2014-</strong></dt>\n<dd><p class=\"first last\">Properly instantiated IOIterator object.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"slash-to-under\">\n<h3>slash_to_under<a class=\"headerlink\" href=\"#slash-to-under\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.multi_io.slash_to_under\">\n<code class=\"descclassname\">dipy.workflows.multi_io.</code><code class=\"descname\">slash_to_under</code><span class=\"sig-paren\">(</span><em>dir_str</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.multi_io.slash_to_under\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</div>\n<div class=\"section\" id=\"constrainedsphericaldeconvmodel\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.reconst.ConstrainedSphericalDeconvModel\" title=\"dipy.workflows.reconst.ConstrainedSphericalDeconvModel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ConstrainedSphericalDeconvModel</span></code></a><a class=\"headerlink\" href=\"#constrainedsphericaldeconvmodel\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.reconst.ConstrainedSphericalDeconvModel\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.reconst.</code><code class=\"descname\">ConstrainedSphericalDeconvModel</code><span class=\"sig-paren\">(</span><em>gtab</em>, <em>response</em>, <em>reg_sphere=None</em>, <em>sh_order=8</em>, <em>lambda_=1</em>, <em>tau=0.1</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.ConstrainedSphericalDeconvModel\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"../dipy.reconst/#dipy.reconst.shm.SphHarmModel\" title=\"dipy.reconst.shm.SphHarmModel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.reconst.shm.SphHarmModel</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">cache_clear</span></code>()</td>\n<td>Clear the cache.</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">cache_get</span></code>(tag,&nbsp;key[,&nbsp;default])</td>\n<td>Retrieve a value from the cache.</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">cache_set</span></code>(tag,&nbsp;key,&nbsp;value)</td>\n<td>Store a value in the cache.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.ConstrainedSphericalDeconvModel.fit\" title=\"dipy.workflows.reconst.ConstrainedSphericalDeconvModel.fit\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">fit</span></code></a>(data[,&nbsp;mask])</td>\n<td>Fit method for every voxel in data</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.ConstrainedSphericalDeconvModel.predict\" title=\"dipy.workflows.reconst.ConstrainedSphericalDeconvModel.predict\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">predict</span></code></a>(sh_coeff[,&nbsp;gtab,&nbsp;S0])</td>\n<td>Compute a signal prediction given spherical harmonic coefficients for the provided GradientTable class instance.</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">sampling_matrix</span></code>(sphere)</td>\n<td>The matrix needed to sample ODFs from coefficients of the model.</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.ConstrainedSphericalDeconvModel.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>gtab</em>, <em>response</em>, <em>reg_sphere=None</em>, <em>sh_order=8</em>, <em>lambda_=1</em>, <em>tau=0.1</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.ConstrainedSphericalDeconvModel.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Constrained Spherical Deconvolution (CSD) <a class=\"reference internal\" href=\"#r83cf0c2022c7-1\" id=\"id38\">[1]</a>.</p>\n<p>Spherical deconvolution computes a fiber orientation distribution\n(FOD), also called fiber ODF (fODF) <a class=\"reference internal\" href=\"#r83cf0c2022c7-2\" id=\"id39\">[2]</a>, as opposed to a diffusion ODF\nas the QballModel or the CsaOdfModel. This results in a sharper angular\nprofile with better angular resolution that is the best object to be\nused for later deterministic and probabilistic tractography <a class=\"reference internal\" href=\"#r83cf0c2022c7-3\" id=\"id40\">[3]</a>.</p>\n<p>A sharp fODF is obtained because a single fiber <em>response</em> function is\ninjected as <em>a priori</em> knowledge. The response function is often\ndata-driven and is thus provided as input to the\nConstrainedSphericalDeconvModel. It will be used as deconvolution\nkernel, as described in <a class=\"reference internal\" href=\"#r83cf0c2022c7-1\" id=\"id41\">[1]</a>.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>gtab</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">GradientTable</span></dt>\n<dd></dd>\n<dt><strong>response</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">tuple or AxSymShResponse object</span></dt>\n<dd><p class=\"first last\">A tuple with two elements. The first is the eigen-values as an (3,)\nndarray and the second is the signal value for the response\nfunction without diffusion weighting.  This is to be able to\ngenerate a single fiber synthetic signal. The response function\nwill be used as deconvolution kernel (<a class=\"reference internal\" href=\"#r83cf0c2022c7-1\" id=\"id42\">[1]</a>)</p>\n</dd>\n<dt><strong>reg_sphere</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">Sphere (optional)</span></dt>\n<dd><p class=\"first last\">sphere used to build the regularization B matrix.\nDefault: \u2018symmetric362\u2019.</p>\n</dd>\n<dt><strong>sh_order</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int (optional)</span></dt>\n<dd><p class=\"first last\">maximal spherical harmonics order. Default: 8</p>\n</dd>\n<dt><strong>lambda_</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float (optional)</span></dt>\n<dd><p class=\"first last\">weight given to the constrained-positivity regularization part of\nthe deconvolution equation (see <a class=\"reference internal\" href=\"#r83cf0c2022c7-1\" id=\"id43\">[1]</a>). Default: 1</p>\n</dd>\n<dt><strong>tau</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float (optional)</span></dt>\n<dd><p class=\"first last\">threshold controlling the amplitude below which the corresponding\nfODF is assumed to be zero.  Ideally, tau should be set to\nzero. However, to improve the stability of the algorithm, tau is\nset to tau*100 % of the mean fODF amplitude (here, 10% by default)\n(see <a class=\"reference internal\" href=\"#r83cf0c2022c7-1\" id=\"id44\">[1]</a>). Default: 0.1</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">References</p>\n<table class=\"docutils citation\" frame=\"void\" id=\"r83cf0c2022c7-1\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\">[1]</td><td><em>(<a class=\"fn-backref\" href=\"#id38\">1</a>, <a class=\"fn-backref\" href=\"#id41\">2</a>, <a class=\"fn-backref\" href=\"#id42\">3</a>, <a class=\"fn-backref\" href=\"#id43\">4</a>, <a class=\"fn-backref\" href=\"#id44\">5</a>, <a class=\"fn-backref\" href=\"#id45\">6</a>)</em> Tournier, J.D., et al. NeuroImage 2007. Robust determination of\nthe fibre orientation distribution in diffusion MRI:\nNon-negativity constrained super-resolved spherical\ndeconvolution</td></tr>\n</tbody>\n</table>\n<table class=\"docutils citation\" frame=\"void\" id=\"r83cf0c2022c7-2\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\">[2]</td><td><em>(<a class=\"fn-backref\" href=\"#id39\">1</a>, <a class=\"fn-backref\" href=\"#id46\">2</a>)</em> Descoteaux, M., et al. IEEE TMI 2009. Deterministic and\nProbabilistic Tractography Based on Complex Fibre Orientation\nDistributions</td></tr>\n</tbody>\n</table>\n<table class=\"docutils citation\" frame=\"void\" id=\"r83cf0c2022c7-3\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\">[3]</td><td><em>(<a class=\"fn-backref\" href=\"#id40\">1</a>, <a class=\"fn-backref\" href=\"#id47\">2</a>)</em> C^ot\u2019e, M-A., et al. Medical Image Analysis 2013. Tractometer:\nTowards validation of tractography pipelines</td></tr>\n</tbody>\n</table>\n<table class=\"docutils citation\" frame=\"void\" id=\"r83cf0c2022c7-4\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\"><a class=\"fn-backref\" href=\"#id48\">[4]</a></td><td>Tournier, J.D, et al. Imaging Systems and Technology\n2012. MRtrix: Diffusion Tractography in Crossing Fiber Regions</td></tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.ConstrainedSphericalDeconvModel.fit\">\n<code class=\"descname\">fit</code><span class=\"sig-paren\">(</span><em>data</em>, <em>mask=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.ConstrainedSphericalDeconvModel.fit\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Fit method for every voxel in data</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.ConstrainedSphericalDeconvModel.predict\">\n<code class=\"descname\">predict</code><span class=\"sig-paren\">(</span><em>sh_coeff</em>, <em>gtab=None</em>, <em>S0=1.0</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.ConstrainedSphericalDeconvModel.predict\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Compute a signal prediction given spherical harmonic coefficients\nfor the provided GradientTable class instance.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>sh_coeff</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">ndarray</span></dt>\n<dd><p class=\"first last\">The spherical harmonic representation of the FOD from which to make\nthe signal prediction.</p>\n</dd>\n<dt><strong>gtab</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">GradientTable</span></dt>\n<dd><p class=\"first last\">The gradients for which the signal will be predicted. Use the\nmodel\u2019s gradient table by default.</p>\n</dd>\n<dt><strong>S0</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">ndarray or float</span></dt>\n<dd><p class=\"first last\">The non diffusion-weighted signal value.</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>pred_sig</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">ndarray</span></dt>\n<dd><p class=\"first last\">The predicted signal.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"csaodfmodel\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.reconst.CsaOdfModel\" title=\"dipy.workflows.reconst.CsaOdfModel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">CsaOdfModel</span></code></a><a class=\"headerlink\" href=\"#csaodfmodel\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.reconst.CsaOdfModel\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.reconst.</code><code class=\"descname\">CsaOdfModel</code><span class=\"sig-paren\">(</span><em>gtab</em>, <em>sh_order</em>, <em>smooth=0.006</em>, <em>min_signal=1.0</em>, <em>assume_normed=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.CsaOdfModel\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"../dipy.reconst/#dipy.reconst.shm.QballBaseModel\" title=\"dipy.reconst.shm.QballBaseModel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.reconst.shm.QballBaseModel</span></code></a></p>\n<p>Implementation of Constant Solid Angle reconstruction method.</p>\n<p class=\"rubric\">References</p>\n<table class=\"docutils citation\" frame=\"void\" id=\"r9e10b82edb3a-1\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\"><a class=\"fn-backref\" href=\"#id49\">[1]</a></td><td>Aganj, I., et al. 2009. ODF Reconstruction in Q-Ball Imaging With\nSolid Angle Consideration.</td></tr>\n</tbody>\n</table>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">cache_clear</span></code>()</td>\n<td>Clear the cache.</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">cache_get</span></code>(tag,&nbsp;key[,&nbsp;default])</td>\n<td>Retrieve a value from the cache.</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">cache_set</span></code>(tag,&nbsp;key,&nbsp;value)</td>\n<td>Store a value in the cache.</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">fit</span></code>(data[,&nbsp;mask])</td>\n<td>Fits the model to diffusion data and returns the model fit</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">sampling_matrix</span></code>(sphere)</td>\n<td>The matrix needed to sample ODFs from coefficients of the model.</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.CsaOdfModel.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>gtab</em>, <em>sh_order</em>, <em>smooth=0.006</em>, <em>min_signal=1.0</em>, <em>assume_normed=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.CsaOdfModel.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Creates a model that can be used to fit or sample diffusion data</p>\n<div class=\"admonition seealso\">\n<p class=\"first admonition-title\">See also</p>\n<p class=\"last\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">normalize_data</span></code></p>\n</div>\n</dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.workflows.reconst.CsaOdfModel.max\">\n<code class=\"descname\">max</code><em class=\"property\"> = 0.999</em><a class=\"headerlink\" href=\"#dipy.workflows.reconst.CsaOdfModel.max\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.workflows.reconst.CsaOdfModel.min\">\n<code class=\"descname\">min</code><em class=\"property\"> = 0.001</em><a class=\"headerlink\" href=\"#dipy.workflows.reconst.CsaOdfModel.min\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"diffusionkurtosismodel\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.reconst.DiffusionKurtosisModel\" title=\"dipy.workflows.reconst.DiffusionKurtosisModel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DiffusionKurtosisModel</span></code></a><a class=\"headerlink\" href=\"#diffusionkurtosismodel\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.reconst.DiffusionKurtosisModel\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.reconst.</code><code class=\"descname\">DiffusionKurtosisModel</code><span class=\"sig-paren\">(</span><em>gtab</em>, <em>fit_method='WLS'</em>, <em>*args</em>, <em>**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.DiffusionKurtosisModel\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"../dipy.reconst/#dipy.reconst.base.ReconstModel\" title=\"dipy.reconst.base.ReconstModel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.reconst.base.ReconstModel</span></code></a></p>\n<p>Class for the Diffusion Kurtosis Model</p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.DiffusionKurtosisModel.fit\" title=\"dipy.workflows.reconst.DiffusionKurtosisModel.fit\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">fit</span></code></a>(data[,&nbsp;mask])</td>\n<td>Fit method of the DKI model class</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.DiffusionKurtosisModel.predict\" title=\"dipy.workflows.reconst.DiffusionKurtosisModel.predict\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">predict</span></code></a>(dki_params[,&nbsp;S0])</td>\n<td>Predict a signal for this DKI model class instance given parameters.</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.DiffusionKurtosisModel.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>gtab</em>, <em>fit_method='WLS'</em>, <em>*args</em>, <em>**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.DiffusionKurtosisModel.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Diffusion Kurtosis Tensor Model [1]</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>gtab</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">GradientTable class instance</span></dt>\n<dd></dd>\n<dt><strong>fit_method</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">str or callable</span></dt>\n<dd><p class=\"first\">str can be one of the following:\n\u2018OLS\u2019 or \u2018ULLS\u2019 for ordinary least squares</p>\n<blockquote>\n<div><p>dki.ols_fit_dki</p>\n</div></blockquote>\n<dl class=\"last docutils\">\n<dt>\u2018WLS\u2019 or \u2018UWLLS\u2019 for weighted ordinary least squares</dt>\n<dd><p class=\"first last\">dki.wls_fit_dki</p>\n</dd>\n<dt>callable has to have the signature:</dt>\n<dd><p class=\"first last\">fit_method(design_matrix, data, <a href=\"#id50\"><span class=\"problematic\" id=\"id51\">*</span></a>args, <a href=\"#id52\"><span class=\"problematic\" id=\"id53\">**</span></a>kwargs)</p>\n</dd>\n</dl>\n</dd>\n<dt><strong>args, kwargs</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">arguments and key-word arguments passed to the</span></dt>\n<dd><p class=\"first last\">fit_method. See dki.ols_fit_dki, dki.wls_fit_dki for details</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">References</p>\n<table class=\"docutils citation\" frame=\"void\" id=\"r05d15d5c8284-1\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\"><a class=\"fn-backref\" href=\"#id54\">[1]</a></td><td>Tabesh, A., Jensen, J.H., Ardekani, B.A., Helpern, J.A., 2011.</td></tr>\n</tbody>\n</table>\n<p>Estimation of tensors and tensor-derived measures in diffusional\nkurtosis imaging. Magn Reson Med. 65(3), 823-836</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.DiffusionKurtosisModel.fit\">\n<code class=\"descname\">fit</code><span class=\"sig-paren\">(</span><em>data</em>, <em>mask=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.DiffusionKurtosisModel.fit\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Fit method of the DKI model class</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>data</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array</span></dt>\n<dd><p class=\"first last\">The measured signal from one voxel.</p>\n</dd>\n<dt><strong>mask</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array</span></dt>\n<dd><p class=\"first last\">A boolean array used to mark the coordinates in the data that\nshould be analyzed that has the shape data.shape[-1]</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.DiffusionKurtosisModel.predict\">\n<code class=\"descname\">predict</code><span class=\"sig-paren\">(</span><em>dki_params</em>, <em>S0=1.0</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.DiffusionKurtosisModel.predict\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Predict a signal for this DKI model class instance given\nparameters.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>dki_params</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">ndarray (x, y, z, 27) or (n, 27)</span></dt>\n<dd><p class=\"first\">All parameters estimated from the diffusion kurtosis model.\nParameters are ordered as follows:</p>\n<blockquote class=\"last\">\n<div><ol class=\"arabic simple\">\n<li>Three diffusion tensor\u2019s eigenvalues</li>\n<li>Three lines of the eigenvector matrix each containing the\nfirst, second and third coordinates of the eigenvector</li>\n<li>Fifteen elements of the kurtosis tensor</li>\n</ol>\n</div></blockquote>\n</dd>\n<dt><strong>S0</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float or ndarray (optional)</span></dt>\n<dd><p class=\"first last\">The non diffusion-weighted signal in every voxel, or across all\nvoxels. Default: 1</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"reconstcsaflow\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.reconst.ReconstCSAFlow\" title=\"dipy.workflows.reconst.ReconstCSAFlow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ReconstCSAFlow</span></code></a><a class=\"headerlink\" href=\"#reconstcsaflow\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.reconst.ReconstCSAFlow\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.reconst.</code><code class=\"descname\">ReconstCSAFlow</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.ReconstCSAFlow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow\" title=\"dipy.workflows.workflow.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.workflows.workflow.Workflow</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code>()</td>\n<td>Create an iterator for IO.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.ReconstCSAFlow.get_short_name\" title=\"dipy.workflows.reconst.ReconstCSAFlow.get_short_name\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code></a>()</td>\n<td>Return A short name for the workflow used to subdivide.</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code>()</td>\n<td>Return No sub runs since this is a simple workflow.</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code>()</td>\n<td>Check if a file will be overwritten upon processing the inputs.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.ReconstCSAFlow.run\" title=\"dipy.workflows.reconst.ReconstCSAFlow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(input_files,&nbsp;bvalues_files,&nbsp;\u2026[,&nbsp;\u2026])</td>\n<td>Constant Solid Angle.</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.ReconstCSAFlow.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.ReconstCSAFlow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"classmethod\">\n<dt id=\"dipy.workflows.reconst.ReconstCSAFlow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.ReconstCSAFlow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return A short name for the workflow used to subdivide.</p>\n<p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name.</p>\n<p>For example, a combined workflow with dti reconstruction and csd\nreconstruction might en up with the b0_threshold parameter. Using short\nnames, we will have dti.b0_threshold and csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.ReconstCSAFlow.run\">\n<code class=\"descname\">run</code><span class=\"sig-paren\">(</span><em>input_files</em>, <em>bvalues_files</em>, <em>bvectors_files</em>, <em>mask_files</em>, <em>sh_order=6</em>, <em>odf_to_sh_order=8</em>, <em>b0_threshold=50.0</em>, <em>bvecs_tol=0.01</em>, <em>extract_pam_values=False</em>, <em>out_dir=''</em>, <em>out_pam='peaks.pam5'</em>, <em>out_shm='shm.nii.gz'</em>, <em>out_peaks_dir='peaks_dirs.nii.gz'</em>, <em>out_peaks_values='peaks_values.nii.gz'</em>, <em>out_peaks_indices='peaks_indices.nii.gz'</em>, <em>out_gfa='gfa.nii.gz'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.ReconstCSAFlow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Constant Solid Angle.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>input_files</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">Path to the input volumes. This path may contain wildcards to\nprocess multiple inputs at once.</p>\n</dd>\n<dt><strong>bvalues_files</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">Path to the bvalues files. This path may contain wildcards to use\nmultiple bvalues files at once.</p>\n</dd>\n<dt><strong>bvectors_files</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">Path to the bvectors files. This path may contain wildcards to use\nmultiple bvectors files at once.</p>\n</dd>\n<dt><strong>mask_files</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">Path to the input masks. This path may contain wildcards to use\nmultiple masks at once. (default: No mask used)</p>\n</dd>\n<dt><strong>sh_order</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int, optional</span></dt>\n<dd><p class=\"first last\">Spherical harmonics order (default 6) used in the CSA fit.</p>\n</dd>\n<dt><strong>odf_to_sh_order</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int, optional</span></dt>\n<dd><p class=\"first last\">Spherical harmonics order used for peak_from_model to compress\nthe ODF to spherical harmonics coefficients (default 8)</p>\n</dd>\n<dt><strong>b0_threshold</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float, optional</span></dt>\n<dd><p class=\"first last\">Threshold used to find b=0 directions</p>\n</dd>\n<dt><strong>bvecs_tol</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float, optional</span></dt>\n<dd><p class=\"first last\">Threshold used so that norm(bvec)=1 (default 0.01)</p>\n</dd>\n<dt><strong>extract_pam_values</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool, optional</span></dt>\n<dd><p class=\"first last\">Wheter or not to save pam volumes as single nifti files.</p>\n</dd>\n<dt><strong>out_dir</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Output directory (default input file directory)</p>\n</dd>\n<dt><strong>out_pam</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the peaks volume to be saved (default \u2018peaks.pam5\u2019)</p>\n</dd>\n<dt><strong>out_shm</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the shperical harmonics volume to be saved\n(default \u2018shm.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_peaks_dir</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the peaks directions volume to be saved\n(default \u2018peaks_dirs.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_peaks_values</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the peaks values volume to be saved\n(default \u2018peaks_values.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_peaks_indices</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the peaks indices volume to be saved\n(default \u2018peaks_indices.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_gfa</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the generalise fa volume to be saved (default \u2018gfa.nii.gz\u2019)</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">References</p>\n<table class=\"docutils citation\" frame=\"void\" id=\"r91123ab0acf1-1\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\"><a class=\"fn-backref\" href=\"#id55\">[1]</a></td><td>Aganj, I., et al. 2009. ODF Reconstruction in Q-Ball Imaging\nwith Solid Angle Consideration.</td></tr>\n</tbody>\n</table>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"reconstcsdflow\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.reconst.ReconstCSDFlow\" title=\"dipy.workflows.reconst.ReconstCSDFlow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ReconstCSDFlow</span></code></a><a class=\"headerlink\" href=\"#reconstcsdflow\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.reconst.ReconstCSDFlow\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.reconst.</code><code class=\"descname\">ReconstCSDFlow</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.ReconstCSDFlow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow\" title=\"dipy.workflows.workflow.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.workflows.workflow.Workflow</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code>()</td>\n<td>Create an iterator for IO.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.ReconstCSDFlow.get_short_name\" title=\"dipy.workflows.reconst.ReconstCSDFlow.get_short_name\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code></a>()</td>\n<td>Return A short name for the workflow used to subdivide.</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code>()</td>\n<td>Return No sub runs since this is a simple workflow.</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code>()</td>\n<td>Check if a file will be overwritten upon processing the inputs.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.ReconstCSDFlow.run\" title=\"dipy.workflows.reconst.ReconstCSDFlow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(input_files,&nbsp;bvalues_files,&nbsp;\u2026[,&nbsp;\u2026])</td>\n<td>Constrained spherical deconvolution</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.ReconstCSDFlow.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.ReconstCSDFlow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"classmethod\">\n<dt id=\"dipy.workflows.reconst.ReconstCSDFlow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.ReconstCSDFlow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return A short name for the workflow used to subdivide.</p>\n<p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name.</p>\n<p>For example, a combined workflow with dti reconstruction and csd\nreconstruction might en up with the b0_threshold parameter. Using short\nnames, we will have dti.b0_threshold and csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.ReconstCSDFlow.run\">\n<code class=\"descname\">run</code><span class=\"sig-paren\">(</span><em>input_files</em>, <em>bvalues_files</em>, <em>bvectors_files</em>, <em>mask_files</em>, <em>b0_threshold=50.0</em>, <em>bvecs_tol=0.01</em>, <em>roi_center=None</em>, <em>roi_radius=10</em>, <em>fa_thr=0.7</em>, <em>frf=None</em>, <em>extract_pam_values=False</em>, <em>sh_order=8</em>, <em>odf_to_sh_order=8</em>, <em>out_dir=''</em>, <em>out_pam='peaks.pam5'</em>, <em>out_shm='shm.nii.gz'</em>, <em>out_peaks_dir='peaks_dirs.nii.gz'</em>, <em>out_peaks_values='peaks_values.nii.gz'</em>, <em>out_peaks_indices='peaks_indices.nii.gz'</em>, <em>out_gfa='gfa.nii.gz'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.ReconstCSDFlow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Constrained spherical deconvolution</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>input_files</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">Path to the input volumes. This path may contain wildcards to\nprocess multiple inputs at once.</p>\n</dd>\n<dt><strong>bvalues_files</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">Path to the bvalues files. This path may contain wildcards to use\nmultiple bvalues files at once.</p>\n</dd>\n<dt><strong>bvectors_files</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">Path to the bvectors files. This path may contain wildcards to use\nmultiple bvectors files at once.</p>\n</dd>\n<dt><strong>mask_files</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">Path to the input masks. This path may contain wildcards to use\nmultiple masks at once. (default: No mask used)</p>\n</dd>\n<dt><strong>b0_threshold</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float, optional</span></dt>\n<dd><p class=\"first last\">Threshold used to find b=0 directions</p>\n</dd>\n<dt><strong>bvecs_tol</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float, optional</span></dt>\n<dd><p class=\"first last\">Bvecs should be unit vectors. (default:0.01)</p>\n</dd>\n<dt><strong>roi_center</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">variable int, optional</span></dt>\n<dd><p class=\"first last\">Center of ROI in data. If center is None, it is assumed that it is\nthe center of the volume with shape <cite>data.shape[:3]</cite> (default None)</p>\n</dd>\n<dt><strong>roi_radius</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int, optional</span></dt>\n<dd><p class=\"first last\">radius of cubic ROI in voxels (default 10)</p>\n</dd>\n<dt><strong>fa_thr</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float, optional</span></dt>\n<dd><p class=\"first last\">FA threshold for calculating the response function (default 0.7)</p>\n</dd>\n<dt><strong>frf</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">variable float, optional</span></dt>\n<dd><p class=\"first last\">Fiber response function can be for example inputed as 15 4 4\n(from the command line) or [15, 4, 4] from a Python script to be\nconverted to float and mutiplied by 10**-4 . If None\nthe fiber response function will be computed automatically\n(default: None).</p>\n</dd>\n<dt><strong>extract_pam_values</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool, optional</span></dt>\n<dd><p class=\"first last\">Save or not to save pam volumes as single nifti files.</p>\n</dd>\n<dt><strong>sh_order</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int, optional</span></dt>\n<dd><p class=\"first last\">Spherical harmonics order (default 6) used in the CSA fit.</p>\n</dd>\n<dt><strong>odf_to_sh_order</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int, optional</span></dt>\n<dd><p class=\"first last\">Spherical harmonics order used for peak_from_model to compress\nthe ODF to spherical harmonics coefficients (default 8)</p>\n</dd>\n<dt><strong>out_dir</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Output directory (default input file directory)</p>\n</dd>\n<dt><strong>out_pam</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the peaks volume to be saved (default \u2018peaks.pam5\u2019)</p>\n</dd>\n<dt><strong>out_shm</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the shperical harmonics volume to be saved\n(default \u2018shm.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_peaks_dir</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the peaks directions volume to be saved\n(default \u2018peaks_dirs.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_peaks_values</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the peaks values volume to be saved\n(default \u2018peaks_values.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_peaks_indices</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the peaks indices volume to be saved\n(default \u2018peaks_indices.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_gfa</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the generalise fa volume to be saved (default \u2018gfa.nii.gz\u2019)</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">References</p>\n<table class=\"docutils citation\" frame=\"void\" id=\"rd2338fb036e0-1\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\"><a class=\"fn-backref\" href=\"#id56\">[1]</a></td><td>Tournier, J.D., et al. NeuroImage 2007. Robust determination of\nthe fibre orientation distribution in diffusion MRI: Non-negativity\nconstrained super-resolved spherical deconvolution.</td></tr>\n</tbody>\n</table>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"reconstdkiflow\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.reconst.ReconstDkiFlow\" title=\"dipy.workflows.reconst.ReconstDkiFlow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ReconstDkiFlow</span></code></a><a class=\"headerlink\" href=\"#reconstdkiflow\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.reconst.ReconstDkiFlow\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.reconst.</code><code class=\"descname\">ReconstDkiFlow</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.ReconstDkiFlow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow\" title=\"dipy.workflows.workflow.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.workflows.workflow.Workflow</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code>()</td>\n<td>Create an iterator for IO.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.ReconstDkiFlow.get_short_name\" title=\"dipy.workflows.reconst.ReconstDkiFlow.get_short_name\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code></a>()</td>\n<td>Return A short name for the workflow used to subdivide.</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code>()</td>\n<td>Return No sub runs since this is a simple workflow.</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code>()</td>\n<td>Check if a file will be overwritten upon processing the inputs.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.ReconstDkiFlow.run\" title=\"dipy.workflows.reconst.ReconstDkiFlow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(input_files,&nbsp;bvalues_files,&nbsp;\u2026[,&nbsp;\u2026])</td>\n<td>Workflow for Diffusion Kurtosis reconstruction and for computing DKI metrics.</td>\n</tr>\n</tbody>\n</table>\n<table border=\"1\" class=\"docutils\">\n<colgroup>\n<col width=\"68%\" />\n<col width=\"32%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><strong>get_dki_model</strong></td>\n<td>&#160;</td>\n</tr>\n<tr class=\"row-even\"><td><strong>get_fitted_tensor</strong></td>\n<td>&#160;</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.ReconstDkiFlow.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.ReconstDkiFlow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.ReconstDkiFlow.get_dki_model\">\n<code class=\"descname\">get_dki_model</code><span class=\"sig-paren\">(</span><em>gtab</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.ReconstDkiFlow.get_dki_model\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.ReconstDkiFlow.get_fitted_tensor\">\n<code class=\"descname\">get_fitted_tensor</code><span class=\"sig-paren\">(</span><em>data</em>, <em>mask</em>, <em>bval</em>, <em>bvec</em>, <em>b0_threshold=50</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.ReconstDkiFlow.get_fitted_tensor\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"classmethod\">\n<dt id=\"dipy.workflows.reconst.ReconstDkiFlow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.ReconstDkiFlow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return A short name for the workflow used to subdivide.</p>\n<p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name.</p>\n<p>For example, a combined workflow with dti reconstruction and csd\nreconstruction might en up with the b0_threshold parameter. Using short\nnames, we will have dti.b0_threshold and csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.ReconstDkiFlow.run\">\n<code class=\"descname\">run</code><span class=\"sig-paren\">(</span><em>input_files</em>, <em>bvalues_files</em>, <em>bvectors_files</em>, <em>mask_files</em>, <em>b0_threshold=50.0</em>, <em>save_metrics=[]</em>, <em>out_dir=''</em>, <em>out_dt_tensor='dti_tensors.nii.gz'</em>, <em>out_fa='fa.nii.gz'</em>, <em>out_ga='ga.nii.gz'</em>, <em>out_rgb='rgb.nii.gz'</em>, <em>out_md='md.nii.gz'</em>, <em>out_ad='ad.nii.gz'</em>, <em>out_rd='rd.nii.gz'</em>, <em>out_mode='mode.nii.gz'</em>, <em>out_evec='evecs.nii.gz'</em>, <em>out_eval='evals.nii.gz'</em>, <em>out_dk_tensor='dki_tensors.nii.gz'</em>, <em>out_mk='mk.nii.gz'</em>, <em>out_ak='ak.nii.gz'</em>, <em>out_rk='rk.nii.gz'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.ReconstDkiFlow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Workflow for Diffusion Kurtosis reconstruction and for computing\nDKI metrics. Performs a DKI reconstruction on the files by \u2018globing\u2019\n<code class=\"docutils literal notranslate\"><span class=\"pre\">input_files</span></code> and saves the DKI metrics in a directory specified by\n<code class=\"docutils literal notranslate\"><span class=\"pre\">out_dir</span></code>.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>input_files</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">Path to the input volumes. This path may contain wildcards to\nprocess multiple inputs at once.</p>\n</dd>\n<dt><strong>bvalues_files</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">Path to the bvalues files. This path may contain wildcards to use\nmultiple bvalues files at once.</p>\n</dd>\n<dt><strong>bvectors_files</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">Path to the bvalues files. This path may contain wildcards to use\nmultiple bvalues files at once.</p>\n</dd>\n<dt><strong>mask_files</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">Path to the input masks. This path may contain wildcards to use\nmultiple masks at once. (default: No mask used)</p>\n</dd>\n<dt><strong>b0_threshold</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float, optional</span></dt>\n<dd><p class=\"first last\">Threshold used to find b=0 directions (default 0.0)</p>\n</dd>\n<dt><strong>save_metrics</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">variable string, optional</span></dt>\n<dd><p class=\"first last\">List of metrics to save.\nPossible values: fa, ga, rgb, md, ad, rd, mode, tensor, evec, eval\n(default [] (all))</p>\n</dd>\n<dt><strong>out_dir</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Output directory (default input file directory)</p>\n</dd>\n<dt><strong>out_dt_tensor</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the tensors volume to be saved\n(default: \u2018dti_tensors.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_dk_tensor</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the tensors volume to be saved\n(default \u2018dki_tensors.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_fa</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the fractional anisotropy volume to be saved\n(default \u2018fa.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_ga</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the geodesic anisotropy volume to be saved\n(default \u2018ga.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_rgb</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the color fa volume to be saved (default \u2018rgb.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_md</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the mean diffusivity volume to be saved\n(default \u2018md.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_ad</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the axial diffusivity volume to be saved\n(default \u2018ad.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_rd</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the radial diffusivity volume to be saved\n(default \u2018rd.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_mode</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the mode volume to be saved (default \u2018mode.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_evec</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the eigenvectors volume to be saved\n(default \u2018evecs.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_eval</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the eigenvalues to be saved (default \u2018evals.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_mk</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the mean kurtosis to be saved (default: \u2018mk.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_ak</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the axial kurtosis to be saved (default: \u2018ak.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_rk</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the radial kurtosis to be saved (default: \u2018rk.nii.gz\u2019)</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">References</p>\n<table class=\"docutils citation\" frame=\"void\" id=\"rba3aa504cda7-1\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\"><a class=\"fn-backref\" href=\"#id57\">[1]</a></td><td>Tabesh, A., Jensen, J.H., Ardekani, B.A., Helpern, J.A., 2011.\nEstimation of tensors and tensor-derived measures in diffusional\nkurtosis imaging. Magn Reson Med. 65(3), 823-836</td></tr>\n</tbody>\n</table>\n<table class=\"docutils citation\" frame=\"void\" id=\"rba3aa504cda7-2\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\"><a class=\"fn-backref\" href=\"#id58\">[2]</a></td><td>Jensen, Jens H., Joseph A. Helpern, Anita Ramani, Hanzhang Lu,\nand Kyle Kaczynski. 2005. Diffusional Kurtosis Imaging: The\nQuantification of Non-Gaussian Water Diffusion by Means of Magnetic\nResonance Imaging. MRM 53 (6):1432-40.</td></tr>\n</tbody>\n</table>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"reconstdtiflow\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.reconst.ReconstDtiFlow\" title=\"dipy.workflows.reconst.ReconstDtiFlow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ReconstDtiFlow</span></code></a><a class=\"headerlink\" href=\"#reconstdtiflow\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.reconst.ReconstDtiFlow\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.reconst.</code><code class=\"descname\">ReconstDtiFlow</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.ReconstDtiFlow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow\" title=\"dipy.workflows.workflow.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.workflows.workflow.Workflow</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code>()</td>\n<td>Create an iterator for IO.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.ReconstDtiFlow.get_short_name\" title=\"dipy.workflows.reconst.ReconstDtiFlow.get_short_name\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code></a>()</td>\n<td>Return A short name for the workflow used to subdivide.</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code>()</td>\n<td>Return No sub runs since this is a simple workflow.</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code>()</td>\n<td>Check if a file will be overwritten upon processing the inputs.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.ReconstDtiFlow.run\" title=\"dipy.workflows.reconst.ReconstDtiFlow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(input_files,&nbsp;bvalues_files,&nbsp;\u2026[,&nbsp;\u2026])</td>\n<td>Workflow for tensor reconstruction and for computing DTI metrics.</td>\n</tr>\n</tbody>\n</table>\n<table border=\"1\" class=\"docutils\">\n<colgroup>\n<col width=\"68%\" />\n<col width=\"32%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><strong>get_fitted_tensor</strong></td>\n<td>&#160;</td>\n</tr>\n<tr class=\"row-even\"><td><strong>get_tensor_model</strong></td>\n<td>&#160;</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.ReconstDtiFlow.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.ReconstDtiFlow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.ReconstDtiFlow.get_fitted_tensor\">\n<code class=\"descname\">get_fitted_tensor</code><span class=\"sig-paren\">(</span><em>data</em>, <em>mask</em>, <em>bval</em>, <em>bvec</em>, <em>b0_threshold=50</em>, <em>bvecs_tol=0.01</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.ReconstDtiFlow.get_fitted_tensor\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"classmethod\">\n<dt id=\"dipy.workflows.reconst.ReconstDtiFlow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.ReconstDtiFlow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return A short name for the workflow used to subdivide.</p>\n<p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name.</p>\n<p>For example, a combined workflow with dti reconstruction and csd\nreconstruction might en up with the b0_threshold parameter. Using short\nnames, we will have dti.b0_threshold and csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.ReconstDtiFlow.get_tensor_model\">\n<code class=\"descname\">get_tensor_model</code><span class=\"sig-paren\">(</span><em>gtab</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.ReconstDtiFlow.get_tensor_model\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.ReconstDtiFlow.run\">\n<code class=\"descname\">run</code><span class=\"sig-paren\">(</span><em>input_files</em>, <em>bvalues_files</em>, <em>bvectors_files</em>, <em>mask_files</em>, <em>b0_threshold=50</em>, <em>bvecs_tol=0.01</em>, <em>save_metrics=[]</em>, <em>out_dir=''</em>, <em>out_tensor='tensors.nii.gz'</em>, <em>out_fa='fa.nii.gz'</em>, <em>out_ga='ga.nii.gz'</em>, <em>out_rgb='rgb.nii.gz'</em>, <em>out_md='md.nii.gz'</em>, <em>out_ad='ad.nii.gz'</em>, <em>out_rd='rd.nii.gz'</em>, <em>out_mode='mode.nii.gz'</em>, <em>out_evec='evecs.nii.gz'</em>, <em>out_eval='evals.nii.gz'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.ReconstDtiFlow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Workflow for tensor reconstruction and for computing DTI metrics.\nusing Weighted Least-Squares.\nPerforms a tensor reconstruction on the files by \u2018globing\u2019\n<code class=\"docutils literal notranslate\"><span class=\"pre\">input_files</span></code> and saves the DTI metrics in a directory specified by\n<code class=\"docutils literal notranslate\"><span class=\"pre\">out_dir</span></code>.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>input_files</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">Path to the input volumes. This path may contain wildcards to\nprocess multiple inputs at once.</p>\n</dd>\n<dt><strong>bvalues_files</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">Path to the bvalues files. This path may contain wildcards to use\nmultiple bvalues files at once.</p>\n</dd>\n<dt><strong>bvectors_files</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">Path to the bvectors files. This path may contain wildcards to use\nmultiple bvectors files at once.</p>\n</dd>\n<dt><strong>mask_files</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">Path to the input masks. This path may contain wildcards to use\nmultiple masks at once. (default: No mask used)</p>\n</dd>\n<dt><strong>b0_threshold</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float, optional</span></dt>\n<dd><p class=\"first last\">Threshold used to find b=0 directions (default 0.0)</p>\n</dd>\n<dt><strong>bvecs_tol</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float, optional</span></dt>\n<dd><p class=\"first last\">Threshold used to check that norm(bvec) = 1 +/- bvecs_tol\nb-vectors are unit vectors (default 0.01)</p>\n</dd>\n<dt><strong>save_metrics</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">variable string, optional</span></dt>\n<dd><p class=\"first last\">List of metrics to save.\nPossible values: fa, ga, rgb, md, ad, rd, mode, tensor, evec, eval\n(default [] (all))</p>\n</dd>\n<dt><strong>out_dir</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Output directory (default input file directory)</p>\n</dd>\n<dt><strong>out_tensor</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the tensors volume to be saved (default \u2018tensors.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_fa</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the fractional anisotropy volume to be saved\n(default \u2018fa.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_ga</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the geodesic anisotropy volume to be saved\n(default \u2018ga.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_rgb</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the color fa volume to be saved (default \u2018rgb.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_md</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the mean diffusivity volume to be saved\n(default \u2018md.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_ad</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the axial diffusivity volume to be saved\n(default \u2018ad.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_rd</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the radial diffusivity volume to be saved\n(default \u2018rd.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_mode</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the mode volume to be saved (default \u2018mode.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_evec</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the eigenvectors volume to be saved\n(default \u2018evecs.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_eval</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the eigenvalues to be saved (default \u2018evals.nii.gz\u2019)</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">References</p>\n<table class=\"docutils citation\" frame=\"void\" id=\"r1c6b043e6f2c-1\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\"><a class=\"fn-backref\" href=\"#id59\">[1]</a></td><td>Basser, P.J., Mattiello, J., LeBihan, D., 1994. Estimation of\nthe effective self-diffusion tensor from the NMR spin echo. J Magn\nReson B 103, 247-254.</td></tr>\n</tbody>\n</table>\n<table class=\"docutils citation\" frame=\"void\" id=\"r1c6b043e6f2c-2\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\"><a class=\"fn-backref\" href=\"#id60\">[2]</a></td><td>Basser, P., Pierpaoli, C., 1996. Microstructural and\nphysiological features of tissues elucidated by quantitative\ndiffusion-tensor MRI.  Journal of Magnetic Resonance 111, 209-219.</td></tr>\n</tbody>\n</table>\n<table class=\"docutils citation\" frame=\"void\" id=\"r1c6b043e6f2c-3\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\"><a class=\"fn-backref\" href=\"#id61\">[3]</a></td><td>Lin-Ching C., Jones D.K., Pierpaoli, C. 2005. RESTORE: Robust\nestimation of tensors by outlier rejection. MRM 53: 1088-1095</td></tr>\n</tbody>\n</table>\n<table class=\"docutils citation\" frame=\"void\" id=\"r1c6b043e6f2c-4\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\"><a class=\"fn-backref\" href=\"#id62\">[4]</a></td><td>hung, SW., Lu, Y., Henry, R.G., 2006. Comparison of bootstrap\napproaches for estimation of uncertainties of DTI parameters.\nNeuroImage 33, 531-541.</td></tr>\n</tbody>\n</table>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"reconstivimflow\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.reconst.ReconstIvimFlow\" title=\"dipy.workflows.reconst.ReconstIvimFlow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ReconstIvimFlow</span></code></a><a class=\"headerlink\" href=\"#reconstivimflow\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.reconst.ReconstIvimFlow\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.reconst.</code><code class=\"descname\">ReconstIvimFlow</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.ReconstIvimFlow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow\" title=\"dipy.workflows.workflow.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.workflows.workflow.Workflow</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code>()</td>\n<td>Create an iterator for IO.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.ReconstIvimFlow.get_short_name\" title=\"dipy.workflows.reconst.ReconstIvimFlow.get_short_name\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code></a>()</td>\n<td>Return A short name for the workflow used to subdivide.</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code>()</td>\n<td>Return No sub runs since this is a simple workflow.</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code>()</td>\n<td>Check if a file will be overwritten upon processing the inputs.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.ReconstIvimFlow.run\" title=\"dipy.workflows.reconst.ReconstIvimFlow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(input_files,&nbsp;bvalues_files,&nbsp;\u2026[,&nbsp;\u2026])</td>\n<td>Workflow for Intra-voxel Incoherent Motion reconstruction and for computing IVIM metrics.</td>\n</tr>\n</tbody>\n</table>\n<table border=\"1\" class=\"docutils\">\n<colgroup>\n<col width=\"66%\" />\n<col width=\"34%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><strong>get_fitted_ivim</strong></td>\n<td>&#160;</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.ReconstIvimFlow.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.ReconstIvimFlow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.ReconstIvimFlow.get_fitted_ivim\">\n<code class=\"descname\">get_fitted_ivim</code><span class=\"sig-paren\">(</span><em>data</em>, <em>mask</em>, <em>bval</em>, <em>bvec</em>, <em>b0_threshold=50</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.ReconstIvimFlow.get_fitted_ivim\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"classmethod\">\n<dt id=\"dipy.workflows.reconst.ReconstIvimFlow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.ReconstIvimFlow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return A short name for the workflow used to subdivide.</p>\n<p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name.</p>\n<p>For example, a combined workflow with dti reconstruction and csd\nreconstruction might en up with the b0_threshold parameter. Using short\nnames, we will have dti.b0_threshold and csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.ReconstIvimFlow.run\">\n<code class=\"descname\">run</code><span class=\"sig-paren\">(</span><em>input_files</em>, <em>bvalues_files</em>, <em>bvectors_files</em>, <em>mask_files</em>, <em>split_b_D=400</em>, <em>split_b_S0=200</em>, <em>b0_threshold=0</em>, <em>save_metrics=[]</em>, <em>out_dir=''</em>, <em>out_S0_predicted='S0_predicted.nii.gz'</em>, <em>out_perfusion_fraction='perfusion_fraction.nii.gz'</em>, <em>out_D_star='D_star.nii.gz'</em>, <em>out_D='D.nii.gz'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.ReconstIvimFlow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Workflow for Intra-voxel Incoherent Motion reconstruction and for\ncomputing IVIM metrics. Performs a IVIM reconstruction on the files\nby \u2018globing\u2019 <code class=\"docutils literal notranslate\"><span class=\"pre\">input_files</span></code> and saves the IVIM metrics in a directory\nspecified by <code class=\"docutils literal notranslate\"><span class=\"pre\">out_dir</span></code>.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>input_files</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">Path to the input volumes. This path may contain wildcards to\nprocess multiple inputs at once.</p>\n</dd>\n<dt><strong>bvalues_files</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">Path to the bvalues files. This path may contain wildcards to use\nmultiple bvalues files at once.</p>\n</dd>\n<dt><strong>bvectors_files</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">Path to the bvalues files. This path may contain wildcards to use\nmultiple bvalues files at once.</p>\n</dd>\n<dt><strong>mask_files</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">Path to the input masks. This path may contain wildcards to use\nmultiple masks at once. (default: No mask used)</p>\n</dd>\n<dt><strong>split_b_D</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int, optional</span></dt>\n<dd><p class=\"first last\">Value to split the bvals to estimate D for the two-stage process of\nfitting\n(default 400)</p>\n</dd>\n<dt><strong>split_b_S0</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int, optional</span></dt>\n<dd><p class=\"first last\">Value to split the bvals to estimate S0 for the two-stage process\nof fitting.\n(default 200)</p>\n</dd>\n<dt><strong>b0_threshold</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int, optional</span></dt>\n<dd><p class=\"first last\">Threshold value for the b0 bval.\n(default 0)</p>\n</dd>\n<dt><strong>save_metrics</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">variable string, optional</span></dt>\n<dd><p class=\"first last\">List of metrics to save.\nPossible values: S0_predicted, perfusion_fraction, D_star, D\n(default [] (all))</p>\n</dd>\n<dt><strong>out_dir</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Output directory (default input file directory)</p>\n</dd>\n<dt><strong>out_S0_predicted</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the S0 signal estimated to be saved\n(default: \u2018S0_predicted.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_perfusion_fraction</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the estimated volume fractions to be saved\n(default \u2018perfusion_fraction.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_D_star</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the estimated pseudo-diffusion parameter to be saved\n(default \u2018D_star.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_D</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the estimated diffusion parameter to be saved\n(default \u2018D.nii.gz\u2019)</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">References</p>\n<table class=\"docutils citation\" frame=\"void\" id=\"r7e16754271e7-stejskal65\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\"><a class=\"fn-backref\" href=\"#id63\">[Stejskal65]</a></td><td>Stejskal, E. O.; Tanner, J. E. (1 January 1965).\n\u201cSpin Diffusion Measurements: Spin Echoes in the\nPresence of a Time-Dependent Field Gradient\u201d. The\nJournal of Chemical Physics 42 (1): 288.\nBibcode: 1965JChPh..42..288S. doi:10.1063/1.1695690.</td></tr>\n</tbody>\n</table>\n<table class=\"docutils citation\" frame=\"void\" id=\"r7e16754271e7-lebihan84\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\"><a class=\"fn-backref\" href=\"#id64\">[LeBihan84]</a></td><td>Le Bihan, Denis, et al. \u201cSeparation of diffusion\nand perfusion in intravoxel incoherent motion MR\nimaging.\u201d Radiology 168.2 (1988): 497-505.</td></tr>\n</tbody>\n</table>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"reconstmapmriflow\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.reconst.ReconstMAPMRIFlow\" title=\"dipy.workflows.reconst.ReconstMAPMRIFlow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ReconstMAPMRIFlow</span></code></a><a class=\"headerlink\" href=\"#reconstmapmriflow\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.reconst.ReconstMAPMRIFlow\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.reconst.</code><code class=\"descname\">ReconstMAPMRIFlow</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.ReconstMAPMRIFlow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow\" title=\"dipy.workflows.workflow.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.workflows.workflow.Workflow</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code>()</td>\n<td>Create an iterator for IO.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.ReconstMAPMRIFlow.get_short_name\" title=\"dipy.workflows.reconst.ReconstMAPMRIFlow.get_short_name\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code></a>()</td>\n<td>Return A short name for the workflow used to subdivide.</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code>()</td>\n<td>Return No sub runs since this is a simple workflow.</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code>()</td>\n<td>Check if a file will be overwritten upon processing the inputs.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.ReconstMAPMRIFlow.run\" title=\"dipy.workflows.reconst.ReconstMAPMRIFlow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(data_files,&nbsp;bvals_files,&nbsp;bvecs_files,&nbsp;\u2026)</td>\n<td>Workflow for fitting the MAPMRI model (with optional Laplacian regularization).</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.ReconstMAPMRIFlow.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.ReconstMAPMRIFlow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"classmethod\">\n<dt id=\"dipy.workflows.reconst.ReconstMAPMRIFlow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.ReconstMAPMRIFlow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return A short name for the workflow used to subdivide.</p>\n<p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name.</p>\n<p>For example, a combined workflow with dti reconstruction and csd\nreconstruction might en up with the b0_threshold parameter. Using short\nnames, we will have dti.b0_threshold and csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.ReconstMAPMRIFlow.run\">\n<code class=\"descname\">run</code><span class=\"sig-paren\">(</span><em>data_files</em>, <em>bvals_files</em>, <em>bvecs_files</em>, <em>small_delta</em>, <em>big_delta</em>, <em>b0_threshold=50.0</em>, <em>laplacian=True</em>, <em>positivity=True</em>, <em>bval_threshold=2000</em>, <em>save_metrics=[]</em>, <em>laplacian_weighting=0.05</em>, <em>radial_order=6</em>, <em>out_dir=''</em>, <em>out_rtop='rtop.nii.gz'</em>, <em>out_lapnorm='lapnorm.nii.gz'</em>, <em>out_msd='msd.nii.gz'</em>, <em>out_qiv='qiv.nii.gz'</em>, <em>out_rtap='rtap.nii.gz'</em>, <em>out_rtpp='rtpp.nii.gz'</em>, <em>out_ng='ng.nii.gz'</em>, <em>out_perng='perng.nii.gz'</em>, <em>out_parng='parng.nii.gz'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.ReconstMAPMRIFlow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Workflow for fitting the MAPMRI model (with optional Laplacian\nregularization). Generates rtop, lapnorm, msd, qiv, rtap, rtpp,\nnon-gaussian (ng), parallel ng, perpendicular ng saved in a nifti\nformat in input files provided by <cite>data_files</cite> and saves the nifti\nfiles to an output directory specified by <cite>out_dir</cite>.</p>\n<p>In order for the MAPMRI workflow to work in the way\nintended either the laplacian or positivity or both must\nbe set to True.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>data_files</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">Path to the input volume.</p>\n</dd>\n<dt><strong>bvals_files</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">Path to the bval files.</p>\n</dd>\n<dt><strong>bvecs_files</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">Path to the bvec files.</p>\n</dd>\n<dt><strong>small_delta</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float</span></dt>\n<dd><p class=\"first last\">Small delta value used in generation of gradient table of provided\nbval and bvec.</p>\n</dd>\n<dt><strong>big_delta</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float</span></dt>\n<dd><p class=\"first last\">Big delta value used in generation of gradient table of provided\nbval and bvec.</p>\n</dd>\n<dt><strong>b0_threshold</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float, optional</span></dt>\n<dd><p class=\"first last\">Threshold used to find b=0 directions (default 0.0)</p>\n</dd>\n<dt><strong>laplacian</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool, optional</span></dt>\n<dd><p class=\"first last\">Regularize using the Laplacian of the MAP-MRI basis (default True)</p>\n</dd>\n<dt><strong>positivity</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool, optional</span></dt>\n<dd><p class=\"first last\">Constrain the propagator to be positive. (default True)</p>\n</dd>\n<dt><strong>bval_threshold</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float, optional</span></dt>\n<dd><p class=\"first last\">Sets the b-value threshold to be used in the scale factor\nestimation. In order for the estimated non-Gaussianity to have\nmeaning this value should set to a lower value (b&lt;2000 s/mm^2)\nsuch that the scale factors are estimated on signal points that\nreasonably represent the spins at Gaussian diffusion.\n(default: 2000)</p>\n</dd>\n<dt><strong>save_metrics</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">variable string, optional</span></dt>\n<dd><p class=\"first last\">List of metrics to save.\nPossible values: rtop, laplacian_signal, msd, qiv, rtap, rtpp,\nng, perng, parng\n(default: [] (all))</p>\n</dd>\n<dt><strong>laplacian_weighting</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float, optional</span></dt>\n<dd><p class=\"first last\">Weighting value used in fitting the MAPMRI model in the laplacian\nand both model types. (default: 0.05)</p>\n</dd>\n<dt><strong>radial_order</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">unsigned int, optional</span></dt>\n<dd><p class=\"first last\">Even value used to set the order of the basis\n(default: 6)</p>\n</dd>\n<dt><strong>out_dir</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Output directory (default: input file directory)</p>\n</dd>\n<dt><strong>out_rtop</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the rtop to be saved</p>\n</dd>\n<dt><strong>out_lapnorm</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the norm of laplacian signal to be saved</p>\n</dd>\n<dt><strong>out_msd</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the msd to be saved</p>\n</dd>\n<dt><strong>out_qiv</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the qiv to be saved</p>\n</dd>\n<dt><strong>out_rtap</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the rtap to be saved</p>\n</dd>\n<dt><strong>out_rtpp</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the rtpp to be saved</p>\n</dd>\n<dt><strong>out_ng</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the Non-Gaussianity to be saved</p>\n</dd>\n<dt><strong>out_perng</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the Non-Gaussianity perpendicular to be saved</p>\n</dd>\n<dt><strong>out_parng</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the Non-Gaussianity parallel to be saved</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"tensormodel\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.reconst.TensorModel\" title=\"dipy.workflows.reconst.TensorModel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TensorModel</span></code></a><a class=\"headerlink\" href=\"#tensormodel\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.reconst.TensorModel\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.reconst.</code><code class=\"descname\">TensorModel</code><span class=\"sig-paren\">(</span><em>gtab</em>, <em>fit_method='WLS'</em>, <em>return_S0_hat=False</em>, <em>*args</em>, <em>**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.TensorModel\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"../dipy.reconst/#dipy.reconst.base.ReconstModel\" title=\"dipy.reconst.base.ReconstModel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.reconst.base.ReconstModel</span></code></a></p>\n<p>Diffusion Tensor</p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.TensorModel.fit\" title=\"dipy.workflows.reconst.TensorModel.fit\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">fit</span></code></a>(data[,&nbsp;mask])</td>\n<td>Fit method of the DTI model class</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.TensorModel.predict\" title=\"dipy.workflows.reconst.TensorModel.predict\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">predict</span></code></a>(dti_params[,&nbsp;S0])</td>\n<td>Predict a signal for this TensorModel class instance given parameters.</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.TensorModel.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>gtab</em>, <em>fit_method='WLS'</em>, <em>return_S0_hat=False</em>, <em>*args</em>, <em>**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.TensorModel.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A Diffusion Tensor Model <a class=\"reference internal\" href=\"#rcef4404f4d4d-1\" id=\"id65\">[1]</a>, <a class=\"reference internal\" href=\"#rcef4404f4d4d-2\" id=\"id66\">[2]</a>.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>gtab</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">GradientTable class instance</span></dt>\n<dd></dd>\n<dt><strong>fit_method</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">str or callable</span></dt>\n<dd><p class=\"first\">str can be one of the following:</p>\n<dl class=\"last docutils\">\n<dt>\u2018WLS\u2019 for weighted least squares</dt>\n<dd><p class=\"first last\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">dti.wls_fit_tensor()</span></code></p>\n</dd>\n<dt>\u2018LS\u2019 or \u2018OLS\u2019 for ordinary least squares</dt>\n<dd><p class=\"first last\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">dti.ols_fit_tensor()</span></code></p>\n</dd>\n<dt>\u2018NLLS\u2019 for non-linear least-squares</dt>\n<dd><p class=\"first last\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">dti.nlls_fit_tensor()</span></code></p>\n</dd>\n<dt>\u2018RT\u2019 or \u2018restore\u2019 or \u2018RESTORE\u2019 for RESTORE robust tensor</dt>\n<dd><p class=\"first last\">fitting <a class=\"reference internal\" href=\"#rcef4404f4d4d-3\" id=\"id67\">[3]</a>\n<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">dti.restore_fit_tensor()</span></code></p>\n</dd>\n<dt>callable has to have the signature:</dt>\n<dd><p class=\"first last\">fit_method(design_matrix, data, <a href=\"#id68\"><span class=\"problematic\" id=\"id69\">*</span></a>args, <a href=\"#id70\"><span class=\"problematic\" id=\"id71\">**</span></a>kwargs)</p>\n</dd>\n</dl>\n</dd>\n<dt><strong>return_S0_hat</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool</span></dt>\n<dd><p class=\"first last\">Boolean to return (True) or not (False) the S0 values for the fit.</p>\n</dd>\n<dt><strong>args, kwargs</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">arguments and key-word arguments passed to the</span></dt>\n<dd><p class=\"first last\">fit_method. See dti.wls_fit_tensor, dti.ols_fit_tensor for details</p>\n</dd>\n<dt><strong>min_signal</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float</span></dt>\n<dd><p class=\"first last\">The minimum signal value. Needs to be a strictly positive\nnumber. Default: minimal signal in the data provided to <cite>fit</cite>.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Notes</p>\n<p>In order to increase speed of processing, tensor fitting is done\nsimultaneously over many voxels. Many fit_methods use the \u2018step\u2019\nparameter to set the number of voxels that will be fit at once in each\niteration. This is the chunk size as a number of voxels. A larger step\nvalue should speed things up, but it will also take up more memory. It\nis advisable to keep an eye on memory consumption as this value is\nincreased.</p>\n<p>Example : In <code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">iter_fit_tensor()</span></code> we have a default step value of\n1e4</p>\n<p class=\"rubric\">References</p>\n<table class=\"docutils citation\" frame=\"void\" id=\"rcef4404f4d4d-1\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\">[1]</td><td><em>(<a class=\"fn-backref\" href=\"#id65\">1</a>, <a class=\"fn-backref\" href=\"#id72\">2</a>)</em> Basser, P.J., Mattiello, J., LeBihan, D., 1994. Estimation of\nthe effective self-diffusion tensor from the NMR spin echo. J Magn\nReson B 103, 247-254.</td></tr>\n</tbody>\n</table>\n<table class=\"docutils citation\" frame=\"void\" id=\"rcef4404f4d4d-2\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\">[2]</td><td><em>(<a class=\"fn-backref\" href=\"#id66\">1</a>, <a class=\"fn-backref\" href=\"#id73\">2</a>)</em> Basser, P., Pierpaoli, C., 1996. Microstructural and\nphysiological features of tissues elucidated by quantitative\ndiffusion-tensor MRI.  Journal of Magnetic Resonance 111, 209-219.</td></tr>\n</tbody>\n</table>\n<table class=\"docutils citation\" frame=\"void\" id=\"rcef4404f4d4d-3\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\">[3]</td><td><em>(<a class=\"fn-backref\" href=\"#id67\">1</a>, <a class=\"fn-backref\" href=\"#id74\">2</a>)</em> Lin-Ching C., Jones D.K., Pierpaoli, C. 2005. RESTORE: Robust\nestimation of tensors by outlier rejection. MRM 53: 1088-1095</td></tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.TensorModel.fit\">\n<code class=\"descname\">fit</code><span class=\"sig-paren\">(</span><em>data</em>, <em>mask=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.TensorModel.fit\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Fit method of the DTI model class</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>data</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array</span></dt>\n<dd><p class=\"first last\">The measured signal from one voxel.</p>\n</dd>\n<dt><strong>mask</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array</span></dt>\n<dd><p class=\"first last\">A boolean array used to mark the coordinates in the data that\nshould be analyzed that has the shape data.shape[:-1]</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.TensorModel.predict\">\n<code class=\"descname\">predict</code><span class=\"sig-paren\">(</span><em>dti_params</em>, <em>S0=1.0</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.TensorModel.predict\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Predict a signal for this TensorModel class instance given parameters.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>dti_params</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">ndarray</span></dt>\n<dd><p class=\"first last\">The last dimension should have 12 tensor parameters: 3\neigenvalues, followed by the 3 eigenvectors</p>\n</dd>\n<dt><strong>S0</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float or ndarray</span></dt>\n<dd><p class=\"first last\">The non diffusion-weighted signal in every voxel, or across all\nvoxels. Default: 1</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id75\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.reconst.Workflow\" title=\"dipy.workflows.reconst.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a><a class=\"headerlink\" href=\"#id75\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.reconst.Workflow\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.reconst.</code><code class=\"descname\">Workflow</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.Workflow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.7)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.Workflow.get_io_iterator\" title=\"dipy.workflows.reconst.Workflow.get_io_iterator\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code></a>()</td>\n<td>Create an iterator for IO.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.Workflow.get_short_name\" title=\"dipy.workflows.reconst.Workflow.get_short_name\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code></a>()</td>\n<td>Return A short name for the workflow used to subdivide.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.Workflow.get_sub_runs\" title=\"dipy.workflows.reconst.Workflow.get_sub_runs\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code></a>()</td>\n<td>Return No sub runs since this is a simple workflow.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.Workflow.manage_output_overwrite\" title=\"dipy.workflows.reconst.Workflow.manage_output_overwrite\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code></a>()</td>\n<td>Check if a file will be overwritten upon processing the inputs.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.reconst.Workflow.run\" title=\"dipy.workflows.reconst.Workflow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(*args,&nbsp;**kwargs)</td>\n<td>Execute the workflow.</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.Workflow.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.Workflow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.Workflow.get_io_iterator\">\n<code class=\"descname\">get_io_iterator</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.Workflow.get_io_iterator\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Create an iterator for IO.</p>\n<p>Use a couple of inspection tricks to build an IOIterator using the\nprevious frame (values of local variables and other contextuals) and\nthe run method\u2019s docstring.</p>\n</dd></dl>\n\n<dl class=\"classmethod\">\n<dt id=\"dipy.workflows.reconst.Workflow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.Workflow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return A short name for the workflow used to subdivide.</p>\n<p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name.</p>\n<p>For example, a combined workflow with dti reconstruction and csd\nreconstruction might en up with the b0_threshold parameter. Using short\nnames, we will have dti.b0_threshold and csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.Workflow.get_sub_runs\">\n<code class=\"descname\">get_sub_runs</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.Workflow.get_sub_runs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return No sub runs since this is a simple workflow.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.Workflow.manage_output_overwrite\">\n<code class=\"descname\">manage_output_overwrite</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.Workflow.manage_output_overwrite\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Check if a file will be overwritten upon processing the inputs.</p>\n<p>If it is bound to happen, an action is taken depending on\nself._force_overwrite (or \u2013force via command line). A log message is\noutput independently of the outcome to tell the user something\nhappened.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.Workflow.run\">\n<code class=\"descname\">run</code><span class=\"sig-paren\">(</span><em>*args</em>, <em>**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.Workflow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Execute the workflow.</p>\n<p>Since this is an abstract class, raise exception if this code is\nreached (not impletemented in child class or literally called on this\nclass)</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"ivimmodel\">\n<h3>IvimModel<a class=\"headerlink\" href=\"#ivimmodel\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.reconst.IvimModel\">\n<code class=\"descclassname\">dipy.workflows.reconst.</code><code class=\"descname\">IvimModel</code><span class=\"sig-paren\">(</span><em>gtab</em>, <em>fit_method='LM'</em>, <em>**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.IvimModel\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Selector function to switch between the 2-stage Levenberg-Marquardt based\nNLLS fitting method (also containing the linear fit): <cite>LM</cite> and the Variable\nProjections based fitting method: <cite>VarPro</cite>.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>fit_method</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">The value fit_method can either be \u2018LM\u2019 or \u2018VarPro\u2019.\ndefault : LM</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"auto-response\">\n<h3>auto_response<a class=\"headerlink\" href=\"#auto-response\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.reconst.auto_response\">\n<code class=\"descclassname\">dipy.workflows.reconst.</code><code class=\"descname\">auto_response</code><span class=\"sig-paren\">(</span><em>gtab</em>, <em>data</em>, <em>roi_center=None</em>, <em>roi_radius=10</em>, <em>fa_thr=0.7</em>, <em>fa_callable=&lt;function fa_superior&gt;</em>, <em>return_number_of_voxels=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.auto_response\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Automatic estimation of response function using FA.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>gtab</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">GradientTable</span></dt>\n<dd></dd>\n<dt><strong>data</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">ndarray</span></dt>\n<dd><p class=\"first last\">diffusion data</p>\n</dd>\n<dt><strong>roi_center</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">tuple, (3,)</span></dt>\n<dd><p class=\"first last\">Center of ROI in data. If center is None, it is assumed that it is\nthe center of the volume with shape <cite>data.shape[:3]</cite>.</p>\n</dd>\n<dt><strong>roi_radius</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int</span></dt>\n<dd><p class=\"first last\">radius of cubic ROI</p>\n</dd>\n<dt><strong>fa_thr</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float</span></dt>\n<dd><p class=\"first last\">FA threshold</p>\n</dd>\n<dt><strong>fa_callable</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">callable</span></dt>\n<dd><p class=\"first last\">A callable that defines an operation that compares FA with the fa_thr.\nThe operator should have two positional arguments\n(e.g., <cite>fa_operator(FA, fa_thr)</cite>) and it should return a bool array.</p>\n</dd>\n<dt><strong>return_number_of_voxels</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool</span></dt>\n<dd><p class=\"first last\">If True, returns the number of voxels used for estimating the response\nfunction.</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>response</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">tuple, (2,)</span></dt>\n<dd><p class=\"first last\">(<cite>evals</cite>, <cite>S0</cite>)</p>\n</dd>\n<dt><strong>ratio</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float</span></dt>\n<dd><p class=\"first last\">The ratio between smallest versus largest eigenvalue of the response.</p>\n</dd>\n<dt><strong>number of voxels</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int (optional)</span></dt>\n<dd><p class=\"first last\">The number of voxels used for estimating the response function.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Notes</p>\n<p>In CSD there is an important pre-processing step: the estimation of the\nfiber response function. In order to do this we look for voxels with very\nanisotropic configurations. For example we can use an ROI (20x20x20) at\nthe center of the volume and store the signal values for the voxels with\nFA values higher than 0.7. Of course, if we haven\u2019t precalculated FA we\nneed to fit a Tensor model to the datasets. Which is what we do in this\nfunction.</p>\n<p>For the response we also need to find the average S0 in the ROI. This is\npossible using <cite>gtab.b0s_mask()</cite> we can find all the S0 volumes (which\ncorrespond to b-values equal 0) in the dataset.</p>\n<p>The <cite>response</cite> consists always of a prolate tensor created by averaging\nthe highest and second highest eigenvalues in the ROI with FA higher than\nthreshold. We also include the average S0s.</p>\n<p>We also return the <cite>ratio</cite> which is used for the SDT models. If requested,\nthe number of voxels used for estimating the response function is also\nreturned, which can be used to judge the fidelity of the response function.\nAs a rule of thumb, at least 300 voxels should be used to estimate a good\nresponse function (see <a class=\"reference internal\" href=\"#r391093edbf61-1\" id=\"id76\">[1]</a>).</p>\n<p class=\"rubric\">References</p>\n<table class=\"docutils citation\" frame=\"void\" id=\"r391093edbf61-1\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\">[1]</td><td><em>(<a class=\"fn-backref\" href=\"#id76\">1</a>, <a class=\"fn-backref\" href=\"#id77\">2</a>)</em> Tournier, J.D., et al. NeuroImage 2004. Direct estimation of the</td></tr>\n</tbody>\n</table>\n<p>fiber orientation density function from diffusion-weighted MRI\ndata using spherical deconvolution</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"axial-diffusivity\">\n<h3>axial_diffusivity<a class=\"headerlink\" href=\"#axial-diffusivity\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.reconst.axial_diffusivity\">\n<code class=\"descclassname\">dipy.workflows.reconst.</code><code class=\"descname\">axial_diffusivity</code><span class=\"sig-paren\">(</span><em>evals</em>, <em>axis=-1</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.axial_diffusivity\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Axial Diffusivity (AD) of a diffusion tensor.\nAlso called parallel diffusivity.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>evals</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array-like</span></dt>\n<dd><p class=\"first last\">Eigenvalues of a diffusion tensor, must be sorted in descending order\nalong <cite>axis</cite>.</p>\n</dd>\n<dt><strong>axis</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int</span></dt>\n<dd><p class=\"first last\">Axis of <cite>evals</cite> which contains 3 eigenvalues.</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>ad</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array</span></dt>\n<dd><p class=\"first last\">Calculated AD.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Notes</p>\n<p>AD is calculated with the following equation:</p>\n<div class=\"math notranslate nohighlight\">\n\\[AD = \\lambda_1\\]</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"color-fa\">\n<h3>color_fa<a class=\"headerlink\" href=\"#color-fa\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.reconst.color_fa\">\n<code class=\"descclassname\">dipy.workflows.reconst.</code><code class=\"descname\">color_fa</code><span class=\"sig-paren\">(</span><em>fa</em>, <em>evecs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.color_fa\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Color fractional anisotropy of diffusion tensor</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>fa</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array-like</span></dt>\n<dd><blockquote class=\"first\">\n<div><p>Array of the fractional anisotropy (can be 1D, 2D or 3D)</p>\n</div></blockquote>\n<dl class=\"last docutils\">\n<dt>evecs <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array-like</span></dt>\n<dd><p class=\"first last\">eigen vectors from the tensor model</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>rgb</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">Array with 3 channels for each color as the last dimension.</span></dt>\n<dd><p class=\"first last\">Colormap of the FA with red for the x value, y for the green\nvalue and z for the blue value.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p>ec{e}))  imes fa</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"fractional-anisotropy\">\n<h3>fractional_anisotropy<a class=\"headerlink\" href=\"#fractional-anisotropy\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.reconst.fractional_anisotropy\">\n<code class=\"descclassname\">dipy.workflows.reconst.</code><code class=\"descname\">fractional_anisotropy</code><span class=\"sig-paren\">(</span><em>evals</em>, <em>axis=-1</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.fractional_anisotropy\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Fractional anisotropy (FA) of a diffusion tensor.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>evals</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array-like</span></dt>\n<dd><p class=\"first last\">Eigenvalues of a diffusion tensor.</p>\n</dd>\n<dt><strong>axis</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int</span></dt>\n<dd><p class=\"first last\">Axis of <cite>evals</cite> which contains 3 eigenvalues.</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>fa</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array</span></dt>\n<dd><p class=\"first last\">Calculated FA. Range is 0 &lt;= FA &lt;= 1.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Notes</p>\n<p>FA is calculated using the following equation:</p>\n<div class=\"math notranslate nohighlight\">\n\\[FA = \\sqrt{\\frac{1}{2}\\frac{(\\lambda_1-\\lambda_2)^2+(\\lambda_1-\n            \\lambda_3)^2+(\\lambda_2-\\lambda_3)^2}{\\lambda_1^2+\n            \\lambda_2^2+\\lambda_3^2}}\\]</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"geodesic-anisotropy\">\n<h3>geodesic_anisotropy<a class=\"headerlink\" href=\"#geodesic-anisotropy\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.reconst.geodesic_anisotropy\">\n<code class=\"descclassname\">dipy.workflows.reconst.</code><code class=\"descname\">geodesic_anisotropy</code><span class=\"sig-paren\">(</span><em>evals</em>, <em>axis=-1</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.geodesic_anisotropy\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Geodesic anisotropy (GA) of a diffusion tensor.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>evals</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array-like</span></dt>\n<dd><p class=\"first last\">Eigenvalues of a diffusion tensor.</p>\n</dd>\n<dt><strong>axis</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int</span></dt>\n<dd><p class=\"first last\">Axis of <cite>evals</cite> which contains 3 eigenvalues.</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>ga</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array</span></dt>\n<dd><p class=\"first last\">Calculated GA. In the range 0 to +infinity</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Notes</p>\n<p>GA is calculated using the following equation given in <a class=\"reference internal\" href=\"#rd98067e65c14-1\" id=\"id78\">[1]</a>:</p>\n<div class=\"math notranslate nohighlight\">\n\\[GA = \\sqrt{\\sum_{i=1}^3\n\\log^2{\\left ( \\lambda_i/&lt;\\mathbf{D}&gt; \\right )}},\n\\quad \\textrm{where} \\quad &lt;\\mathbf{D}&gt; =\n(\\lambda_1\\lambda_2\\lambda_3)^{1/3}\\]</div>\n<p>Note that the notation, <span class=\"math notranslate nohighlight\">\\(&lt;D&gt;\\)</span>, is often used as the mean diffusivity (MD)\nof the diffusion tensor and can lead to confusions in the literature\n(see <a class=\"reference internal\" href=\"#rd98067e65c14-1\" id=\"id79\">[1]</a> versus <a class=\"reference internal\" href=\"#rd98067e65c14-2\" id=\"id80\">[2]</a> versus <a class=\"reference internal\" href=\"#rd98067e65c14-3\" id=\"id81\">[3]</a> for example). Reference <a class=\"reference internal\" href=\"#rd98067e65c14-2\" id=\"id82\">[2]</a> defines\ngeodesic anisotropy (GA) with <span class=\"math notranslate nohighlight\">\\(&lt;D&gt;\\)</span> as the MD in the denominator of the\nsum. This is wrong. The original paper <a class=\"reference internal\" href=\"#rd98067e65c14-1\" id=\"id83\">[1]</a> defines GA with\n<span class=\"math notranslate nohighlight\">\\(&lt;D&gt; = det(D)^{1/3}\\)</span>, as the isotropic part of the distance. This might be\nan explanation for the confusion. The isotropic part of the diffusion\ntensor in Euclidean space is the MD whereas the isotropic part of the\ntensor in log-Euclidean space is <span class=\"math notranslate nohighlight\">\\(det(D)^{1/3}\\)</span>. The Appendix of <a class=\"reference internal\" href=\"#rd98067e65c14-1\" id=\"id84\">[1]</a> and\nlog-Euclidean derivations from <a class=\"reference internal\" href=\"#rd98067e65c14-3\" id=\"id85\">[3]</a> are clear on this. Hence, all that to\nsay that <span class=\"math notranslate nohighlight\">\\(&lt;D&gt; = det(D)^{1/3}\\)</span> here for the GA definition and not MD.</p>\n<p class=\"rubric\">References</p>\n<table class=\"docutils citation\" frame=\"void\" id=\"rd98067e65c14-1\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\">[1]</td><td><em>(<a class=\"fn-backref\" href=\"#id78\">1</a>, <a class=\"fn-backref\" href=\"#id79\">2</a>, <a class=\"fn-backref\" href=\"#id83\">3</a>, <a class=\"fn-backref\" href=\"#id84\">4</a>, <a class=\"fn-backref\" href=\"#id86\">5</a>)</em> P. G. Batchelor, M. Moakher, D. Atkinson, F. Calamante,\nA. Connelly, \u201cA rigorous framework for diffusion tensor calculus\u201d,\nMagnetic Resonance in Medicine, vol. 53, pp. 221-225, 2005.</td></tr>\n</tbody>\n</table>\n<table class=\"docutils citation\" frame=\"void\" id=\"rd98067e65c14-2\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\">[2]</td><td><em>(<a class=\"fn-backref\" href=\"#id80\">1</a>, <a class=\"fn-backref\" href=\"#id82\">2</a>, <a class=\"fn-backref\" href=\"#id87\">3</a>)</em> M. M. Correia, V. F. Newcombe, G.B. Williams.\n\u201cContrast-to-noise ratios for indices of anisotropy obtained from\ndiffusion MRI: a study with standard clinical b-values at 3T\u201d.\nNeuroImage, vol. 57, pp. 1103-1115, 2011.</td></tr>\n</tbody>\n</table>\n<table class=\"docutils citation\" frame=\"void\" id=\"rd98067e65c14-3\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\">[3]</td><td><em>(<a class=\"fn-backref\" href=\"#id81\">1</a>, <a class=\"fn-backref\" href=\"#id85\">2</a>, <a class=\"fn-backref\" href=\"#id88\">3</a>)</em> A. D. Lee, etal, P. M. Thompson.\n\u201cComparison of fractional and geodesic anisotropy in diffusion tensor\nimages of 90 monozygotic and dizygotic twins\u201d. 5th IEEE International\nSymposium on Biomedical Imaging (ISBI), pp. 943-946, May 2008.</td></tr>\n</tbody>\n</table>\n<table class=\"docutils citation\" frame=\"void\" id=\"rd98067e65c14-4\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\"><a class=\"fn-backref\" href=\"#id89\">[4]</a></td><td>V. Arsigny, P. Fillard, X. Pennec, N. Ayache.\n\u201cLog-Euclidean metrics for fast and simple calculus on diffusion\ntensors.\u201d Magnetic Resonance in Medecine, vol 56, pp. 411-421, 2006.</td></tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"get-mode\">\n<h3>get_mode<a class=\"headerlink\" href=\"#get-mode\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.reconst.get_mode\">\n<code class=\"descclassname\">dipy.workflows.reconst.</code><code class=\"descname\">get_mode</code><span class=\"sig-paren\">(</span><em>q_form</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.get_mode\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Mode (MO) of a diffusion tensor <a class=\"reference internal\" href=\"#r8502d494f176-1\" id=\"id90\">[1]</a>.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>q_form</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">ndarray</span></dt>\n<dd><p class=\"first last\">The quadratic form of a tensor, or an array with quadratic forms of\ntensors. Should be of shape (x, y, z, 3, 3) or (n, 3, 3) or (3, 3).</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>mode</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array</span></dt>\n<dd><p class=\"first last\">Calculated tensor mode in each spatial coordinate.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Notes</p>\n<p>Mode ranges between -1 (planar anisotropy) and +1 (linear anisotropy)\nwith 0 representing orthotropy. Mode is calculated with the\nfollowing equation (equation 9 in <a class=\"reference internal\" href=\"#r8502d494f176-1\" id=\"id91\">[1]</a>):</p>\n<div class=\"math notranslate nohighlight\">\n\\[Mode = 3*\\sqrt{6}*det(\\widetilde{A}/norm(\\widetilde{A}))\\]</div>\n<p>Where <span class=\"math notranslate nohighlight\">\\(\\widetilde{A}\\)</span> is the deviatoric part of the tensor quadratic form.</p>\n<p class=\"rubric\">References</p>\n<table class=\"docutils citation\" frame=\"void\" id=\"r8502d494f176-1\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\">[1]</td><td><em>(<a class=\"fn-backref\" href=\"#id5\">1</a>, <a class=\"fn-backref\" href=\"#id90\">2</a>, <a class=\"fn-backref\" href=\"#id91\">3</a>, <a class=\"fn-backref\" href=\"#id92\">4</a>)</em> Daniel B. Ennis and G. Kindlmann, \u201cOrthogonal Tensor\nInvariants and the Analysis of Diffusion Tensor Magnetic Resonance\nImages\u201d, Magnetic Resonance in Medicine, vol. 55, no. 1, pp. 136-146,\n2006.</td></tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"get-sphere\">\n<h3>get_sphere<a class=\"headerlink\" href=\"#get-sphere\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.reconst.get_sphere\">\n<code class=\"descclassname\">dipy.workflows.reconst.</code><code class=\"descname\">get_sphere</code><span class=\"sig-paren\">(</span><em>name='symmetric362'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.get_sphere\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>provide triangulated spheres</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>name</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">str</span></dt>\n<dd><p class=\"first last\">which sphere - one of:\n* \u2018symmetric362\u2019\n* \u2018symmetric642\u2019\n* \u2018symmetric724\u2019\n* \u2018repulsion724\u2019\n* \u2018repulsion100\u2019\n* \u2018repulsion200\u2019</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>sphere</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">a dipy.core.sphere.Sphere class instance</span></dt>\n<dd></dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">dipy.data</span> <span class=\"k\">import</span> <span class=\"n\">get_sphere</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sphere</span> <span class=\"o\">=</span> <span class=\"n\">get_sphere</span><span class=\"p\">(</span><span class=\"s1\">&#39;symmetric362&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">verts</span><span class=\"p\">,</span> <span class=\"n\">faces</span> <span class=\"o\">=</span> <span class=\"n\">sphere</span><span class=\"o\">.</span><span class=\"n\">vertices</span><span class=\"p\">,</span> <span class=\"n\">sphere</span><span class=\"o\">.</span><span class=\"n\">faces</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">verts</span><span class=\"o\">.</span><span class=\"n\">shape</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"mi\">362</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">faces</span><span class=\"o\">.</span><span class=\"n\">shape</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"mi\">720</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">verts</span><span class=\"p\">,</span> <span class=\"n\">faces</span> <span class=\"o\">=</span> <span class=\"n\">get_sphere</span><span class=\"p\">(</span><span class=\"s1\">&#39;not a sphere name&#39;</span><span class=\"p\">)</span> \n<span class=\"gt\">Traceback (most recent call last):</span>\n    <span class=\"o\">...</span>\n<span class=\"gr\">DataError</span>: <span class=\"n\">No sphere called &quot;not a sphere name&quot;</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"gradient-table\">\n<h3>gradient_table<a class=\"headerlink\" href=\"#gradient-table\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.reconst.gradient_table\">\n<code class=\"descclassname\">dipy.workflows.reconst.</code><code class=\"descname\">gradient_table</code><span class=\"sig-paren\">(</span><em>bvals</em>, <em>bvecs=None</em>, <em>big_delta=None</em>, <em>small_delta=None</em>, <em>b0_threshold=50</em>, <em>atol=0.01</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.gradient_table\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A general function for creating diffusion MR gradients.</p>\n<p>It reads, loads and prepares scanner parameters like the b-values and\nb-vectors so that they can be useful during the reconstruction process.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>bvals</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">can be any of the four options</span></dt>\n<dd><ol class=\"first last arabic simple\">\n<li>an array of shape (N,) or (1, N) or (N, 1) with the b-values.</li>\n<li>a path for the file which contains an array like the above (1).</li>\n<li>an array of shape (N, 4) or (4, N). Then this parameter is\nconsidered to be a b-table which contains both bvals and bvecs. In\nthis case the next parameter is skipped.</li>\n<li>a path for the file which contains an array like the one at (3).</li>\n</ol>\n</dd>\n<dt><strong>bvecs</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">can be any of two options</span></dt>\n<dd><ol class=\"first last arabic simple\">\n<li>an array of shape (N, 3) or (3, N) with the b-vectors.</li>\n<li>a path for the file which contains an array like the previous.</li>\n</ol>\n</dd>\n<dt><strong>big_delta</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float</span></dt>\n<dd><p class=\"first last\">acquisition pulse separation time in seconds (default None)</p>\n</dd>\n<dt><strong>small_delta</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float</span></dt>\n<dd><p class=\"first last\">acquisition pulse duration time in seconds (default None)</p>\n</dd>\n<dt><strong>b0_threshold</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float</span></dt>\n<dd><p class=\"first last\">All b-values with values less than or equal to <cite>bo_threshold</cite> are\nconsidered as b0s i.e. without diffusion weighting.</p>\n</dd>\n<dt><strong>atol</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float</span></dt>\n<dd><p class=\"first last\">All b-vectors need to be unit vectors up to a tolerance.</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>gradients</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">GradientTable</span></dt>\n<dd><p class=\"first last\">A GradientTable with all the gradient information.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Notes</p>\n<ol class=\"arabic simple\">\n<li>Often b0s (b-values which correspond to images without diffusion\nweighting) have 0 values however in some cases the scanner cannot\nprovide b0s of an exact 0 value and it gives a bit higher values\ne.g. 6 or 12. This is the purpose of the b0_threshold in the __init__.</li>\n<li>We assume that the minimum number of b-values is 7.</li>\n<li>B-vectors should be unit vectors.</li>\n</ol>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">dipy.core.gradients</span> <span class=\"k\">import</span> <span class=\"n\">gradient_table</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">bvals</span> <span class=\"o\">=</span> <span class=\"mi\">1500</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">bvals</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sq2</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">bvecs</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                  <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                  <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                  <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                  <span class=\"p\">[</span><span class=\"n\">sq2</span><span class=\"p\">,</span> <span class=\"n\">sq2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                  <span class=\"p\">[</span><span class=\"n\">sq2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">sq2</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                  <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">sq2</span><span class=\"p\">,</span> <span class=\"n\">sq2</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">gt</span> <span class=\"o\">=</span> <span class=\"n\">gradient_table</span><span class=\"p\">(</span><span class=\"n\">bvals</span><span class=\"p\">,</span> <span class=\"n\">bvecs</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">gt</span><span class=\"o\">.</span><span class=\"n\">bvecs</span><span class=\"o\">.</span><span class=\"n\">shape</span> <span class=\"o\">==</span> <span class=\"n\">bvecs</span><span class=\"o\">.</span><span class=\"n\">shape</span>\n<span class=\"go\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">gt</span> <span class=\"o\">=</span> <span class=\"n\">gradient_table</span><span class=\"p\">(</span><span class=\"n\">bvals</span><span class=\"p\">,</span> <span class=\"n\">bvecs</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">gt</span><span class=\"o\">.</span><span class=\"n\">bvecs</span><span class=\"o\">.</span><span class=\"n\">shape</span> <span class=\"o\">==</span> <span class=\"n\">bvecs</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"o\">.</span><span class=\"n\">shape</span>\n<span class=\"go\">False</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"literal-eval\">\n<h3>literal_eval<a class=\"headerlink\" href=\"#literal-eval\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.reconst.literal_eval\">\n<code class=\"descclassname\">dipy.workflows.reconst.</code><code class=\"descname\">literal_eval</code><span class=\"sig-paren\">(</span><em>node_or_string</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.literal_eval\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Safely evaluate an expression node or a string containing a Python\nexpression.  The string or node provided may only consist of the following\nPython literal structures: strings, bytes, numbers, tuples, lists, dicts,\nsets, booleans, and None.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id93\">\n<h3>load_nifti<a class=\"headerlink\" href=\"#id93\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.reconst.load_nifti\">\n<code class=\"descclassname\">dipy.workflows.reconst.</code><code class=\"descname\">load_nifti</code><span class=\"sig-paren\">(</span><em>fname</em>, <em>return_img=False</em>, <em>return_voxsize=False</em>, <em>return_coords=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.load_nifti\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</div>\n<div class=\"section\" id=\"lower-triangular\">\n<h3>lower_triangular<a class=\"headerlink\" href=\"#lower-triangular\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.reconst.lower_triangular\">\n<code class=\"descclassname\">dipy.workflows.reconst.</code><code class=\"descname\">lower_triangular</code><span class=\"sig-paren\">(</span><em>tensor</em>, <em>b0=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.lower_triangular\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns the six lower triangular values of the tensor and a dummy variable\nif b0 is not None</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>tensor</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array_like (\u2026, 3, 3)</span></dt>\n<dd><p class=\"first last\">a collection of 3, 3 diffusion tensors</p>\n</dd>\n<dt><strong>b0</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float</span></dt>\n<dd><p class=\"first last\">if b0 is not none log(b0) is returned as the dummy variable</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>D</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">ndarray</span></dt>\n<dd><p class=\"first last\">If b0 is none, then the shape will be (\u2026, 6) otherwise (\u2026, 7)</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"mean-diffusivity\">\n<h3>mean_diffusivity<a class=\"headerlink\" href=\"#mean-diffusivity\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.reconst.mean_diffusivity\">\n<code class=\"descclassname\">dipy.workflows.reconst.</code><code class=\"descname\">mean_diffusivity</code><span class=\"sig-paren\">(</span><em>evals</em>, <em>axis=-1</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.mean_diffusivity\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Mean Diffusivity (MD) of a diffusion tensor.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>evals</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array-like</span></dt>\n<dd><p class=\"first last\">Eigenvalues of a diffusion tensor.</p>\n</dd>\n<dt><strong>axis</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int</span></dt>\n<dd><p class=\"first last\">Axis of <cite>evals</cite> which contains 3 eigenvalues.</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>md</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array</span></dt>\n<dd><p class=\"first last\">Calculated MD.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Notes</p>\n<p>MD is calculated with the following equation:</p>\n<div class=\"math notranslate nohighlight\">\n\\[MD = \\frac{\\lambda_1 + \\lambda_2 + \\lambda_3}{3}\\]</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"peaks-from-model\">\n<h3>peaks_from_model<a class=\"headerlink\" href=\"#peaks-from-model\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.reconst.peaks_from_model\">\n<code class=\"descclassname\">dipy.workflows.reconst.</code><code class=\"descname\">peaks_from_model</code><span class=\"sig-paren\">(</span><em>model</em>, <em>data</em>, <em>sphere</em>, <em>relative_peak_threshold</em>, <em>min_separation_angle</em>, <em>mask=None</em>, <em>return_odf=False</em>, <em>return_sh=True</em>, <em>gfa_thr=0</em>, <em>normalize_peaks=False</em>, <em>sh_order=8</em>, <em>sh_basis_type=None</em>, <em>npeaks=5</em>, <em>B=None</em>, <em>invB=None</em>, <em>parallel=False</em>, <em>nbr_processes=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.peaks_from_model\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Fit the model to data and computes peaks and metrics</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>model</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">a model instance</span></dt>\n<dd><p class=\"first last\"><cite>model</cite> will be used to fit the data.</p>\n</dd>\n<dt><strong>sphere</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">Sphere</span></dt>\n<dd><p class=\"first last\">The Sphere providing discrete directions for evaluation.</p>\n</dd>\n<dt><strong>relative_peak_threshold</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float</span></dt>\n<dd><p class=\"first last\">Only return peaks greater than <code class=\"docutils literal notranslate\"><span class=\"pre\">relative_peak_threshold</span> <span class=\"pre\">*</span> <span class=\"pre\">m</span></code> where m\nis the largest peak.</p>\n</dd>\n<dt><strong>min_separation_angle</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float in [0, 90] The minimum distance between</span></dt>\n<dd><p class=\"first last\">directions. If two peaks are too close only the larger of the two is\nreturned.</p>\n</dd>\n<dt><strong>mask</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, optional</span></dt>\n<dd><p class=\"first last\">If <cite>mask</cite> is provided, voxels that are False in <cite>mask</cite> are skipped and\nno peaks are returned.</p>\n</dd>\n<dt><strong>return_odf</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool</span></dt>\n<dd><p class=\"first last\">If True, the odfs are returned.</p>\n</dd>\n<dt><strong>return_sh</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool</span></dt>\n<dd><p class=\"first last\">If True, the odf as spherical harmonics coefficients is returned</p>\n</dd>\n<dt><strong>gfa_thr</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float</span></dt>\n<dd><p class=\"first last\">Voxels with gfa less than <cite>gfa_thr</cite> are skipped, no peaks are returned.</p>\n</dd>\n<dt><strong>normalize_peaks</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool</span></dt>\n<dd><p class=\"first last\">If true, all peak values are calculated relative to <cite>max(odf)</cite>.</p>\n</dd>\n<dt><strong>sh_order</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int, optional</span></dt>\n<dd><p class=\"first last\">Maximum SH order in the SH fit.  For <cite>sh_order</cite>, there will be\n<code class=\"docutils literal notranslate\"><span class=\"pre\">(sh_order</span> <span class=\"pre\">+</span> <span class=\"pre\">1)</span> <span class=\"pre\">*</span> <span class=\"pre\">(sh_order</span> <span class=\"pre\">+</span> <span class=\"pre\">2)</span> <span class=\"pre\">/</span> <span class=\"pre\">2</span></code> SH coefficients (default 8).</p>\n</dd>\n<dt><strong>sh_basis_type</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">{None, \u2018tournier07\u2019, \u2018descoteaux07\u2019}</span></dt>\n<dd><p class=\"first last\"><code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> for the default DIPY basis,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">tournier07</span></code> for the Tournier 2007 <a class=\"reference internal\" href=\"#r238c65f161c0-2\" id=\"id94\">[2]</a> basis, and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">descoteaux07</span></code> for the Descoteaux 2007 <a class=\"reference internal\" href=\"#r238c65f161c0-1\" id=\"id95\">[1]</a> basis\n(<code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> defaults to <code class=\"docutils literal notranslate\"><span class=\"pre\">descoteaux07</span></code>).</p>\n</dd>\n<dt><strong>sh_smooth</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float, optional</span></dt>\n<dd><p class=\"first last\">Lambda-regularization in the SH fit (default 0.0).</p>\n</dd>\n<dt><strong>npeaks</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int</span></dt>\n<dd><p class=\"first last\">Maximum number of peaks found (default 5 peaks).</p>\n</dd>\n<dt><strong>B</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">ndarray, optional</span></dt>\n<dd><p class=\"first last\">Matrix that transforms spherical harmonics to spherical function\n<code class=\"docutils literal notranslate\"><span class=\"pre\">sf</span> <span class=\"pre\">=</span> <span class=\"pre\">np.dot(sh,</span> <span class=\"pre\">B)</span></code>.</p>\n</dd>\n<dt><strong>invB</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">ndarray, optional</span></dt>\n<dd><p class=\"first last\">Inverse of B.</p>\n</dd>\n<dt><strong>parallel: bool</strong></dt>\n<dd><p class=\"first last\">If True, use multiprocessing to compute peaks and metric\n(default False). Temporary files are saved in the default temporary\ndirectory of the system. It can be changed using <code class=\"docutils literal notranslate\"><span class=\"pre\">import</span> <span class=\"pre\">tempfile</span></code>\nand <code class=\"docutils literal notranslate\"><span class=\"pre\">tempfile.tempdir</span> <span class=\"pre\">=</span> <span class=\"pre\">'/path/to/tempdir'</span></code>.</p>\n</dd>\n<dt><strong>nbr_processes: int</strong></dt>\n<dd><p class=\"first last\">If <cite>parallel</cite> is True, the number of subprocesses to use\n(default multiprocessing.cpu_count()).</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>pam</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">PeaksAndMetrics</span></dt>\n<dd><p class=\"first last\">An object with <code class=\"docutils literal notranslate\"><span class=\"pre\">gfa</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">peak_directions</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">peak_values</span></code>,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">peak_indices</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">odf</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">shm_coeffs</span></code> as attributes</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">References</p>\n<table class=\"docutils citation\" frame=\"void\" id=\"r238c65f161c0-1\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\">[1]</td><td><em>(<a class=\"fn-backref\" href=\"#id95\">1</a>, <a class=\"fn-backref\" href=\"#id96\">2</a>)</em> Descoteaux, M., Angelino, E., Fitzgibbons, S. and Deriche, R.\nRegularized, Fast, and Robust Analytical Q-ball Imaging.\nMagn. Reson. Med. 2007;58:497-510.</td></tr>\n</tbody>\n</table>\n<table class=\"docutils citation\" frame=\"void\" id=\"r238c65f161c0-2\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\">[2]</td><td><em>(<a class=\"fn-backref\" href=\"#id94\">1</a>, <a class=\"fn-backref\" href=\"#id97\">2</a>)</em> Tournier J.D., Calamante F. and Connelly A. Robust determination\nof the fibre orientation distribution in diffusion MRI:\nNon-negativity constrained super-resolved spherical deconvolution.\nNeuroImage. 2007;35(4):1459-1472.</td></tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"peaks-to-niftis\">\n<h3>peaks_to_niftis<a class=\"headerlink\" href=\"#peaks-to-niftis\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.reconst.peaks_to_niftis\">\n<code class=\"descclassname\">dipy.workflows.reconst.</code><code class=\"descname\">peaks_to_niftis</code><span class=\"sig-paren\">(</span><em>pam</em>, <em>fname_shm</em>, <em>fname_dirs</em>, <em>fname_values</em>, <em>fname_indices</em>, <em>fname_gfa</em>, <em>reshape_dirs=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.peaks_to_niftis\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Save SH, directions, indices and values of peaks to Nifti.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"radial-diffusivity\">\n<h3>radial_diffusivity<a class=\"headerlink\" href=\"#radial-diffusivity\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.reconst.radial_diffusivity\">\n<code class=\"descclassname\">dipy.workflows.reconst.</code><code class=\"descname\">radial_diffusivity</code><span class=\"sig-paren\">(</span><em>evals</em>, <em>axis=-1</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.radial_diffusivity\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Radial Diffusivity (RD) of a diffusion tensor.\nAlso called perpendicular diffusivity.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>evals</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array-like</span></dt>\n<dd><p class=\"first last\">Eigenvalues of a diffusion tensor, must be sorted in descending order\nalong <cite>axis</cite>.</p>\n</dd>\n<dt><strong>axis</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int</span></dt>\n<dd><p class=\"first last\">Axis of <cite>evals</cite> which contains 3 eigenvalues.</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>rd</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array</span></dt>\n<dd><p class=\"first last\">Calculated RD.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Notes</p>\n<p>RD is calculated with the following equation:</p>\n<div class=\"math notranslate nohighlight\">\n\\[RD = \\frac{\\lambda_2 + \\lambda_3}{2}\\]</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"read-bvals-bvecs\">\n<h3>read_bvals_bvecs<a class=\"headerlink\" href=\"#read-bvals-bvecs\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.reconst.read_bvals_bvecs\">\n<code class=\"descclassname\">dipy.workflows.reconst.</code><code class=\"descname\">read_bvals_bvecs</code><span class=\"sig-paren\">(</span><em>fbvals</em>, <em>fbvecs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.read_bvals_bvecs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Read b-values and b-vectors from disk</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>fbvals</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">str</span></dt>\n<dd><p class=\"first last\">Full path to file with b-values. None to not read bvals.</p>\n</dd>\n<dt><strong>fbvecs</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">str</span></dt>\n<dd><p class=\"first last\">Full path of file with b-vectors. None to not read bvecs.</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>bvals</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, (N,) or None</span></dt>\n<dd></dd>\n<dt><strong>bvecs</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, (N, 3) or None</span></dt>\n<dd></dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Notes</p>\n<p>Files can be either \u2018.bvals\u2019/\u2019.bvecs\u2019 or \u2018.txt\u2019 or \u2018.npy\u2019 (containing\narrays stored with the appropriate values).</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id98\">\n<h3>save_nifti<a class=\"headerlink\" href=\"#id98\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.reconst.save_nifti\">\n<code class=\"descclassname\">dipy.workflows.reconst.</code><code class=\"descname\">save_nifti</code><span class=\"sig-paren\">(</span><em>fname</em>, <em>data</em>, <em>affine</em>, <em>hdr=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.save_nifti\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</div>\n<div class=\"section\" id=\"save-peaks\">\n<h3>save_peaks<a class=\"headerlink\" href=\"#save-peaks\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.reconst.save_peaks\">\n<code class=\"descclassname\">dipy.workflows.reconst.</code><code class=\"descname\">save_peaks</code><span class=\"sig-paren\">(</span><em>fname</em>, <em>pam</em>, <em>affine=None</em>, <em>verbose=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.save_peaks\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Save all important attributes of object PeaksAndMetrics in a PAM5 file\n(HDF5).</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>fname</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">Filename of PAM5 file</p>\n</dd>\n<dt><strong>pam</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">PeaksAndMetrics</span></dt>\n<dd><p class=\"first last\">Object holding peak_dirs, shm_coeffs and other attributes</p>\n</dd>\n<dt><strong>affine</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array</span></dt>\n<dd><p class=\"first last\">The 4x4 matrix transforming the date from native to world coordinates.\nPeaksAndMetrics should have that attribute but if not it can be\nprovided here. Default None.</p>\n</dd>\n<dt><strong>verbose</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool</span></dt>\n<dd><p class=\"first last\">Print summary information about the saved file.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"split-dki-param\">\n<h3>split_dki_param<a class=\"headerlink\" href=\"#split-dki-param\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.reconst.split_dki_param\">\n<code class=\"descclassname\">dipy.workflows.reconst.</code><code class=\"descname\">split_dki_param</code><span class=\"sig-paren\">(</span><em>dki_params</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.split_dki_param\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Extract the diffusion tensor eigenvalues, the diffusion tensor\neigenvector matrix, and the 15 independent elements of the kurtosis tensor\nfrom the model parameters estimated from the DKI model</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>dki_params</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">ndarray (x, y, z, 27) or (n, 27)</span></dt>\n<dd><p class=\"first\">All parameters estimated from the diffusion kurtosis model.\nParameters are ordered as follows:</p>\n<blockquote class=\"last\">\n<div><ol class=\"arabic simple\">\n<li>Three diffusion tensor\u2019s eigenvalues</li>\n<li>Three lines of the eigenvector matrix each containing the first,\nsecond and third coordinates of the eigenvector</li>\n<li>Fifteen elements of the kurtosis tensor</li>\n</ol>\n</div></blockquote>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>eigvals</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array (x, y, z, 3) or (n, 3)</span></dt>\n<dd><p class=\"first last\">Eigenvalues from eigen decomposition of the tensor.</p>\n</dd>\n<dt><strong>eigvecs</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array (x, y, z, 3, 3) or (n, 3, 3)</span></dt>\n<dd><p class=\"first last\">Associated eigenvectors from eigen decomposition of the tensor.\nEigenvectors are columnar (e.g. eigvecs[:,j] is associated with\neigvals[j])</p>\n</dd>\n<dt><strong>kt</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array (x, y, z, 15) or (n, 15)</span></dt>\n<dd><p class=\"first last\">Fifteen elements of the kurtosis tensor</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id99\">\n<h3>warn<a class=\"headerlink\" href=\"#id99\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.reconst.warn\">\n<code class=\"descclassname\">dipy.workflows.reconst.</code><code class=\"descname\">warn</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.warn\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Issue a warning, or maybe ignore it or raise an exception.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"labelsbundlesflow\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.segment.LabelsBundlesFlow\" title=\"dipy.workflows.segment.LabelsBundlesFlow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">LabelsBundlesFlow</span></code></a><a class=\"headerlink\" href=\"#labelsbundlesflow\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.segment.LabelsBundlesFlow\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.segment.</code><code class=\"descname\">LabelsBundlesFlow</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.LabelsBundlesFlow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow\" title=\"dipy.workflows.workflow.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.workflows.workflow.Workflow</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code>()</td>\n<td>Create an iterator for IO.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.segment.LabelsBundlesFlow.get_short_name\" title=\"dipy.workflows.segment.LabelsBundlesFlow.get_short_name\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code></a>()</td>\n<td>Return A short name for the workflow used to subdivide.</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code>()</td>\n<td>Return No sub runs since this is a simple workflow.</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code>()</td>\n<td>Check if a file will be overwritten upon processing the inputs.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.segment.LabelsBundlesFlow.run\" title=\"dipy.workflows.segment.LabelsBundlesFlow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(streamline_files,&nbsp;labels_files[,&nbsp;\u2026])</td>\n<td>Extract bundles using existing indices (labels)</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.segment.LabelsBundlesFlow.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.LabelsBundlesFlow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"classmethod\">\n<dt id=\"dipy.workflows.segment.LabelsBundlesFlow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.LabelsBundlesFlow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return A short name for the workflow used to subdivide.</p>\n<p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name.</p>\n<p>For example, a combined workflow with dti reconstruction and csd\nreconstruction might en up with the b0_threshold parameter. Using short\nnames, we will have dti.b0_threshold and csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.segment.LabelsBundlesFlow.run\">\n<code class=\"descname\">run</code><span class=\"sig-paren\">(</span><em>streamline_files</em>, <em>labels_files</em>, <em>out_dir=''</em>, <em>out_bundle='recognized_orig.trk'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.LabelsBundlesFlow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Extract bundles using existing indices (labels)</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>streamline_files</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">The path of streamline files where you want to recognize bundles</p>\n</dd>\n<dt><strong>labels_files</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">The path of model bundle files</p>\n</dd>\n<dt><strong>out_dir</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Output directory (default input file directory)</p>\n</dd>\n<dt><strong>out_bundle</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Recognized bundle in the space of the model bundle\n(default \u2018recognized_orig.trk\u2019)</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">References</p>\n<table class=\"docutils citation\" frame=\"void\" id=\"r1bded19041bc-garyfallidis17\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\"><a class=\"fn-backref\" href=\"#id100\">[Garyfallidis17]</a></td><td>Garyfallidis et al. Recognition of white matter\nbundles using local and global streamline-based registration and\nclustering, Neuroimage, 2017.</td></tr>\n</tbody>\n</table>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"medianotsuflow\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.segment.MedianOtsuFlow\" title=\"dipy.workflows.segment.MedianOtsuFlow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">MedianOtsuFlow</span></code></a><a class=\"headerlink\" href=\"#medianotsuflow\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.segment.MedianOtsuFlow\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.segment.</code><code class=\"descname\">MedianOtsuFlow</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.MedianOtsuFlow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow\" title=\"dipy.workflows.workflow.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.workflows.workflow.Workflow</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code>()</td>\n<td>Create an iterator for IO.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.segment.MedianOtsuFlow.get_short_name\" title=\"dipy.workflows.segment.MedianOtsuFlow.get_short_name\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code></a>()</td>\n<td>Return A short name for the workflow used to subdivide.</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code>()</td>\n<td>Return No sub runs since this is a simple workflow.</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code>()</td>\n<td>Check if a file will be overwritten upon processing the inputs.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.segment.MedianOtsuFlow.run\" title=\"dipy.workflows.segment.MedianOtsuFlow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(input_files[,&nbsp;save_masked,&nbsp;\u2026])</td>\n<td>Workflow wrapping the median_otsu segmentation method.</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.segment.MedianOtsuFlow.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.MedianOtsuFlow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"classmethod\">\n<dt id=\"dipy.workflows.segment.MedianOtsuFlow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.MedianOtsuFlow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return A short name for the workflow used to subdivide.</p>\n<p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name.</p>\n<p>For example, a combined workflow with dti reconstruction and csd\nreconstruction might en up with the b0_threshold parameter. Using short\nnames, we will have dti.b0_threshold and csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.segment.MedianOtsuFlow.run\">\n<code class=\"descname\">run</code><span class=\"sig-paren\">(</span><em>input_files</em>, <em>save_masked=False</em>, <em>median_radius=2</em>, <em>numpass=5</em>, <em>autocrop=False</em>, <em>vol_idx=None</em>, <em>dilate=None</em>, <em>out_dir=''</em>, <em>out_mask='brain_mask.nii.gz'</em>, <em>out_masked='dwi_masked.nii.gz'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.MedianOtsuFlow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Workflow wrapping the median_otsu segmentation method.</p>\n<p>Applies median_otsu segmentation on each file found by \u2018globing\u2019\n<code class=\"docutils literal notranslate\"><span class=\"pre\">input_files</span></code> and saves the results in a directory specified by\n<code class=\"docutils literal notranslate\"><span class=\"pre\">out_dir</span></code>.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>input_files</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">Path to the input volumes. This path may contain wildcards to\nprocess multiple inputs at once.</p>\n</dd>\n<dt><strong>save_masked</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool, optional</span></dt>\n<dd><p class=\"first last\">Save mask</p>\n</dd>\n<dt><strong>median_radius</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int, optional</span></dt>\n<dd><p class=\"first last\">Radius (in voxels) of the applied median filter (default 2)</p>\n</dd>\n<dt><strong>numpass</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int, optional</span></dt>\n<dd><p class=\"first last\">Number of pass of the median filter (default 5)</p>\n</dd>\n<dt><strong>autocrop</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool, optional</span></dt>\n<dd><p class=\"first last\">If True, the masked input_volumes will also be cropped using the\nbounding box defined by the masked data. For example, if diffusion\nimages are of 1x1x1 (mm^3) or higher resolution auto-cropping could\nreduce their size in memory and speed up some of the analysis.\n(default False)</p>\n</dd>\n<dt><strong>vol_idx</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">variable int, optional</span></dt>\n<dd><p class=\"first last\">1D array representing indices of <code class=\"docutils literal notranslate\"><span class=\"pre\">axis=3</span></code> of a 4D <cite>input_volume</cite>\n\u2018None\u2019 (the default) corresponds to <code class=\"docutils literal notranslate\"><span class=\"pre\">(0,)</span></code> (assumes first volume\nin 4D array). From cmd line use 3 4 5 6. From script use\n[3, 4, 5, 6].</p>\n</dd>\n<dt><strong>dilate</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int, optional</span></dt>\n<dd><p class=\"first last\">number of iterations for binary dilation (default \u2018None\u2019)</p>\n</dd>\n<dt><strong>out_dir</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Output directory (default input file directory)</p>\n</dd>\n<dt><strong>out_mask</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the mask volume to be saved (default \u2018brain_mask.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_masked</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the masked volume to be saved (default \u2018dwi_masked.nii.gz\u2019)</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"recobundles\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.segment.RecoBundles\" title=\"dipy.workflows.segment.RecoBundles\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">RecoBundles</span></code></a><a class=\"headerlink\" href=\"#recobundles\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.segment.RecoBundles\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.segment.</code><code class=\"descname\">RecoBundles</code><span class=\"sig-paren\">(</span><em>streamlines</em>, <em>greater_than=50</em>, <em>less_than=1000000</em>, <em>cluster_map=None</em>, <em>clust_thr=15</em>, <em>nb_pts=20</em>, <em>rng=None</em>, <em>verbose=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.RecoBundles\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.7)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.segment.RecoBundles.evaluate_results\" title=\"dipy.workflows.segment.RecoBundles.evaluate_results\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">evaluate_results</span></code></a>(model_bundle,&nbsp;\u2026)</td>\n<td>Comapare the similiarity between two given bundles, model bundle, and extracted bundle.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.segment.RecoBundles.recognize\" title=\"dipy.workflows.segment.RecoBundles.recognize\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">recognize</span></code></a>(model_bundle,&nbsp;model_clust_thr[,&nbsp;\u2026])</td>\n<td>Recognize the model_bundle in self.streamlines</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.segment.RecoBundles.refine\" title=\"dipy.workflows.segment.RecoBundles.refine\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">refine</span></code></a>(model_bundle,&nbsp;pruned_streamlines,&nbsp;\u2026)</td>\n<td>Refine and recognize the model_bundle in self.streamlines This method expects once pruned streamlines as input.</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.segment.RecoBundles.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>streamlines</em>, <em>greater_than=50</em>, <em>less_than=1000000</em>, <em>cluster_map=None</em>, <em>clust_thr=15</em>, <em>nb_pts=20</em>, <em>rng=None</em>, <em>verbose=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.RecoBundles.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Recognition of bundles</p>\n<p>Extract bundles from a participants\u2019 tractograms using model bundles\nsegmented from a different subject or an atlas of bundles.\nSee <a class=\"reference internal\" href=\"#ra1143d88a4bf-garyfallidis17\" id=\"id101\">[Garyfallidis17]</a> for the details.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>streamlines</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">Streamlines</span></dt>\n<dd><p class=\"first last\">The tractogram in which you want to recognize bundles.</p>\n</dd>\n<dt><strong>greater_than</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int, optional</span></dt>\n<dd><p class=\"first last\">Keep streamlines that have length greater than\nthis value (default 50)</p>\n</dd>\n<dt><strong>less_than</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int, optional</span></dt>\n<dd><p class=\"first last\">Keep streamlines have length less than this value (default 1000000)</p>\n</dd>\n<dt><strong>cluster_map</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">QB map</span></dt>\n<dd><p class=\"first last\">Provide existing clustering to start RB faster (default None).</p>\n</dd>\n<dt><strong>clust_thr</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float</span></dt>\n<dd><p class=\"first last\">Distance threshold in mm for clustering <cite>streamlines</cite></p>\n</dd>\n<dt><strong>rng</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">RandomState</span></dt>\n<dd><p class=\"first last\">If None define RandomState in initialization function.</p>\n</dd>\n<dt><strong>nb_pts</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int</span></dt>\n<dd><p class=\"first last\">Number of points per streamline (default 20)</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Notes</p>\n<p>Make sure that before creating this class that the streamlines and\nthe model bundles are roughly in the same space.\nAlso default thresholds are assumed in RAS 1mm^3 space. You may\nwant to adjust those if your streamlines are not in world coordinates.</p>\n<p class=\"rubric\">References</p>\n<table class=\"docutils citation\" frame=\"void\" id=\"ra1143d88a4bf-garyfallidis17\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\">[Garyfallidis17]</td><td><em>(<a class=\"fn-backref\" href=\"#id101\">1</a>, <a class=\"fn-backref\" href=\"#id102\">2</a>)</em> Garyfallidis et al. Recognition of white matter\nbundles using local and global streamline-based registration and\nclustering, Neuroimage, 2017.</td></tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.segment.RecoBundles.evaluate_results\">\n<code class=\"descname\">evaluate_results</code><span class=\"sig-paren\">(</span><em>model_bundle</em>, <em>pruned_streamlines</em>, <em>slr_select</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.RecoBundles.evaluate_results\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Comapare the similiarity between two given bundles, model bundle,\nand extracted bundle.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>model_bundle</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">Streamlines</span></dt>\n<dd></dd>\n<dt><strong>pruned_streamlines</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">Streamlines</span></dt>\n<dd></dd>\n<dt><strong>slr_select</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">tuple</span></dt>\n<dd><p class=\"first last\">Select the number of streamlines from model to neirborhood of\nmodel to perform the local SLR.</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>ba_value</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float</span></dt>\n<dd><p class=\"first last\">bundle analytics value between model bundle and pruned bundle</p>\n</dd>\n<dt><strong>bmd_value</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float</span></dt>\n<dd><p class=\"first last\">bundle minimum distance value between model bundle and\npruned bundle</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.segment.RecoBundles.recognize\">\n<code class=\"descname\">recognize</code><span class=\"sig-paren\">(</span><em>model_bundle</em>, <em>model_clust_thr</em>, <em>reduction_thr=10</em>, <em>reduction_distance='mdf'</em>, <em>slr=True</em>, <em>slr_num_threads=None</em>, <em>slr_metric=None</em>, <em>slr_x0=None</em>, <em>slr_bounds=None</em>, <em>slr_select=(400</em>, <em>600)</em>, <em>slr_method='L-BFGS-B'</em>, <em>pruning_thr=5</em>, <em>pruning_distance='mdf'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.RecoBundles.recognize\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Recognize the model_bundle in self.streamlines</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>model_bundle</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">Streamlines</span></dt>\n<dd></dd>\n<dt><strong>model_clust_thr</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float</span></dt>\n<dd></dd>\n<dt><strong>reduction_thr</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float</span></dt>\n<dd></dd>\n<dt><strong>reduction_distance</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">mdf or mam (default mam)</p>\n</dd>\n<dt><strong>slr</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool</span></dt>\n<dd><p class=\"first last\">Use Streamline-based Linear Registration (SLR) locally\n(default True)</p>\n</dd>\n<dt><strong>slr_metric</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">BundleMinDistanceMetric</span></dt>\n<dd></dd>\n<dt><strong>slr_x0</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array</span></dt>\n<dd><p class=\"first last\">(default None)</p>\n</dd>\n<dt><strong>slr_bounds</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array</span></dt>\n<dd><p class=\"first last\">(default None)</p>\n</dd>\n<dt><strong>slr_select</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">tuple</span></dt>\n<dd><p class=\"first last\">Select the number of streamlines from model to neirborhood of\nmodel to perform the local SLR.</p>\n</dd>\n<dt><strong>slr_method</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">Optimization method (default \u2018L-BFGS-B\u2019)</p>\n</dd>\n<dt><strong>pruning_thr</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float</span></dt>\n<dd></dd>\n<dt><strong>pruning_distance</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">MDF (\u2018mdf\u2019) and MAM (\u2018mam\u2019)</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>recognized_transf</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">Streamlines</span></dt>\n<dd><p class=\"first last\">Recognized bundle in the space of the model tractogram</p>\n</dd>\n<dt><strong>recognized_labels</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array</span></dt>\n<dd><p class=\"first last\">Indices of recognized bundle in the original tractogram</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">References</p>\n<table class=\"docutils citation\" frame=\"void\" id=\"r925a62eea99f-garyfallidis17\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\"><a class=\"fn-backref\" href=\"#id103\">[Garyfallidis17]</a></td><td>Garyfallidis et al. Recognition of white matter\nbundles using local and global streamline-based registration and\nclustering, Neuroimage, 2017.</td></tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.segment.RecoBundles.refine\">\n<code class=\"descname\">refine</code><span class=\"sig-paren\">(</span><em>model_bundle</em>, <em>pruned_streamlines</em>, <em>model_clust_thr</em>, <em>reduction_thr=14</em>, <em>reduction_distance='mdf'</em>, <em>slr=True</em>, <em>slr_metric=None</em>, <em>slr_x0=None</em>, <em>slr_bounds=None</em>, <em>slr_select=(400</em>, <em>600)</em>, <em>slr_method='L-BFGS-B'</em>, <em>pruning_thr=6</em>, <em>pruning_distance='mdf'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.RecoBundles.refine\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Refine and recognize the model_bundle in self.streamlines\nThis method expects once pruned streamlines as input. It refines the\nfirst ouput of recobundle by applying second local slr (optional),\nand second pruning. This method is useful when we are dealing with\nnoisy data or when we want to extract small tracks from tractograms.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>model_bundle</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">Streamlines</span></dt>\n<dd></dd>\n<dt><strong>pruned_streamlines</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">Streamlines</span></dt>\n<dd></dd>\n<dt><strong>model_clust_thr</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float</span></dt>\n<dd></dd>\n<dt><strong>reduction_thr</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float</span></dt>\n<dd></dd>\n<dt><strong>reduction_distance</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">mdf or mam (default mam)</p>\n</dd>\n<dt><strong>slr</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool</span></dt>\n<dd><p class=\"first last\">Use Streamline-based Linear Registration (SLR) locally\n(default True)</p>\n</dd>\n<dt><strong>slr_metric</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">BundleMinDistanceMetric</span></dt>\n<dd></dd>\n<dt><strong>slr_x0</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array</span></dt>\n<dd><p class=\"first last\">(default None)</p>\n</dd>\n<dt><strong>slr_bounds</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array</span></dt>\n<dd><p class=\"first last\">(default None)</p>\n</dd>\n<dt><strong>slr_select</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">tuple</span></dt>\n<dd><p class=\"first last\">Select the number of streamlines from model to neirborhood of\nmodel to perform the local SLR.</p>\n</dd>\n<dt><strong>slr_method</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">Optimization method (default \u2018L-BFGS-B\u2019)</p>\n</dd>\n<dt><strong>pruning_thr</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float</span></dt>\n<dd></dd>\n<dt><strong>pruning_distance</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">MDF (\u2018mdf\u2019) and MAM (\u2018mam\u2019)</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>recognized_transf</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">Streamlines</span></dt>\n<dd><p class=\"first last\">Recognized bundle in the space of the model tractogram</p>\n</dd>\n<dt><strong>recognized_labels</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array</span></dt>\n<dd><p class=\"first last\">Indices of recognized bundle in the original tractogram</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">References</p>\n<table class=\"docutils citation\" frame=\"void\" id=\"r2ea201a40830-garyfallidis17\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\"><a class=\"fn-backref\" href=\"#id104\">[Garyfallidis17]</a></td><td>Garyfallidis et al. Recognition of white matter\nbundles using local and global streamline-based registration and\nclustering, Neuroimage, 2017.</td></tr>\n</tbody>\n</table>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"recobundlesflow\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.segment.RecoBundlesFlow\" title=\"dipy.workflows.segment.RecoBundlesFlow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">RecoBundlesFlow</span></code></a><a class=\"headerlink\" href=\"#recobundlesflow\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.segment.RecoBundlesFlow\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.segment.</code><code class=\"descname\">RecoBundlesFlow</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.RecoBundlesFlow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow\" title=\"dipy.workflows.workflow.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.workflows.workflow.Workflow</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code>()</td>\n<td>Create an iterator for IO.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.segment.RecoBundlesFlow.get_short_name\" title=\"dipy.workflows.segment.RecoBundlesFlow.get_short_name\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code></a>()</td>\n<td>Return A short name for the workflow used to subdivide.</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code>()</td>\n<td>Return No sub runs since this is a simple workflow.</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code>()</td>\n<td>Check if a file will be overwritten upon processing the inputs.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.segment.RecoBundlesFlow.run\" title=\"dipy.workflows.segment.RecoBundlesFlow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(streamline_files,&nbsp;model_bundle_files[,&nbsp;\u2026])</td>\n<td>Recognize bundles</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.segment.RecoBundlesFlow.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.RecoBundlesFlow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"classmethod\">\n<dt id=\"dipy.workflows.segment.RecoBundlesFlow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.RecoBundlesFlow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return A short name for the workflow used to subdivide.</p>\n<p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name.</p>\n<p>For example, a combined workflow with dti reconstruction and csd\nreconstruction might en up with the b0_threshold parameter. Using short\nnames, we will have dti.b0_threshold and csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.segment.RecoBundlesFlow.run\">\n<code class=\"descname\">run</code><span class=\"sig-paren\">(</span><em>streamline_files</em>, <em>model_bundle_files</em>, <em>greater_than=50</em>, <em>less_than=1000000</em>, <em>no_slr=False</em>, <em>clust_thr=15.0</em>, <em>reduction_thr=15.0</em>, <em>reduction_distance='mdf'</em>, <em>model_clust_thr=2.5</em>, <em>pruning_thr=8.0</em>, <em>pruning_distance='mdf'</em>, <em>slr_metric='symmetric'</em>, <em>slr_transform='similarity'</em>, <em>slr_matrix='small'</em>, <em>refine=False</em>, <em>r_reduction_thr=12.0</em>, <em>r_pruning_thr=6.0</em>, <em>no_r_slr=False</em>, <em>out_dir=''</em>, <em>out_recognized_transf='recognized.trk'</em>, <em>out_recognized_labels='labels.npy'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.RecoBundlesFlow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Recognize bundles</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>streamline_files</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">The path of streamline files where you want to recognize bundles</p>\n</dd>\n<dt><strong>model_bundle_files</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">The path of model bundle files</p>\n</dd>\n<dt><strong>greater_than</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int, optional</span></dt>\n<dd><p class=\"first last\">Keep streamlines that have length greater than\nthis value (default 50) in mm.</p>\n</dd>\n<dt><strong>less_than</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int, optional</span></dt>\n<dd><p class=\"first last\">Keep streamlines have length less than this value\n(default 1000000) in mm.</p>\n</dd>\n<dt><strong>no_slr</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool, optional</span></dt>\n<dd><p class=\"first last\">Don\u2019t enable local Streamline-based Linear\nRegistration (default False).</p>\n</dd>\n<dt><strong>clust_thr</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float, optional</span></dt>\n<dd><p class=\"first last\">MDF distance threshold for all streamlines (default 15)</p>\n</dd>\n<dt><strong>reduction_thr</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float, optional</span></dt>\n<dd><p class=\"first last\">Reduce search space by (mm) (default 15)</p>\n</dd>\n<dt><strong>reduction_distance</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Reduction distance type can be mdf or mam (default mdf)</p>\n</dd>\n<dt><strong>model_clust_thr</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float, optional</span></dt>\n<dd><p class=\"first last\">MDF distance threshold for the model bundles (default 2.5)</p>\n</dd>\n<dt><strong>pruning_thr</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float, optional</span></dt>\n<dd><p class=\"first last\">Pruning after matching (default 8).</p>\n</dd>\n<dt><strong>pruning_distance</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Pruning distance type can be mdf or mam (default mdf)</p>\n</dd>\n<dt><strong>slr_metric</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Options are None, symmetric, asymmetric or diagonal\n(default symmetric).</p>\n</dd>\n<dt><strong>slr_transform</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Transformation allowed. translation, rigid, similarity or scaling\n(Default \u2018similarity\u2019).</p>\n</dd>\n<dt><strong>slr_matrix</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Options are \u2018nano\u2019, \u2018tiny\u2019, \u2018small\u2019, \u2018medium\u2019, \u2018large\u2019, \u2018huge\u2019\n(default \u2018small\u2019)</p>\n</dd>\n<dt><strong>refine</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool, optional</span></dt>\n<dd><p class=\"first last\">Enable refine recognized bunle (default False)</p>\n</dd>\n<dt><strong>r_reduction_thr</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float, optional</span></dt>\n<dd><p class=\"first last\">Refine reduce search space by (mm) (default 12)</p>\n</dd>\n<dt><strong>r_pruning_thr</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float, optional</span></dt>\n<dd><p class=\"first last\">Refine pruning after matching (default 6).</p>\n</dd>\n<dt><strong>no_r_slr</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool, optional</span></dt>\n<dd><p class=\"first last\">Don\u2019t enable Refine local Streamline-based Linear\nRegistration (default False).</p>\n</dd>\n<dt><strong>out_dir</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Output directory (default input file directory)</p>\n</dd>\n<dt><strong>out_recognized_transf</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Recognized bundle in the space of the model bundle\n(default \u2018recognized.trk\u2019)</p>\n</dd>\n<dt><strong>out_recognized_labels</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Indices of recognized bundle in the original tractogram\n(default \u2018labels.npy\u2019)</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">References</p>\n<table class=\"docutils citation\" frame=\"void\" id=\"rbfdf3a404c62-garyfallidis17\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\"><a class=\"fn-backref\" href=\"#id105\">[Garyfallidis17]</a></td><td>Garyfallidis et al. Recognition of white matter\nbundles using local and global streamline-based registration and\nclustering, Neuroimage, 2017.</td></tr>\n</tbody>\n</table>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id106\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.segment.Workflow\" title=\"dipy.workflows.segment.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a><a class=\"headerlink\" href=\"#id106\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.segment.Workflow\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.segment.</code><code class=\"descname\">Workflow</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.Workflow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.7)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.segment.Workflow.get_io_iterator\" title=\"dipy.workflows.segment.Workflow.get_io_iterator\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code></a>()</td>\n<td>Create an iterator for IO.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.segment.Workflow.get_short_name\" title=\"dipy.workflows.segment.Workflow.get_short_name\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code></a>()</td>\n<td>Return A short name for the workflow used to subdivide.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.segment.Workflow.get_sub_runs\" title=\"dipy.workflows.segment.Workflow.get_sub_runs\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code></a>()</td>\n<td>Return No sub runs since this is a simple workflow.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.segment.Workflow.manage_output_overwrite\" title=\"dipy.workflows.segment.Workflow.manage_output_overwrite\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code></a>()</td>\n<td>Check if a file will be overwritten upon processing the inputs.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.segment.Workflow.run\" title=\"dipy.workflows.segment.Workflow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(*args,&nbsp;**kwargs)</td>\n<td>Execute the workflow.</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.segment.Workflow.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.Workflow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.segment.Workflow.get_io_iterator\">\n<code class=\"descname\">get_io_iterator</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.Workflow.get_io_iterator\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Create an iterator for IO.</p>\n<p>Use a couple of inspection tricks to build an IOIterator using the\nprevious frame (values of local variables and other contextuals) and\nthe run method\u2019s docstring.</p>\n</dd></dl>\n\n<dl class=\"classmethod\">\n<dt id=\"dipy.workflows.segment.Workflow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.Workflow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return A short name for the workflow used to subdivide.</p>\n<p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name.</p>\n<p>For example, a combined workflow with dti reconstruction and csd\nreconstruction might en up with the b0_threshold parameter. Using short\nnames, we will have dti.b0_threshold and csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.segment.Workflow.get_sub_runs\">\n<code class=\"descname\">get_sub_runs</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.Workflow.get_sub_runs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return No sub runs since this is a simple workflow.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.segment.Workflow.manage_output_overwrite\">\n<code class=\"descname\">manage_output_overwrite</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.Workflow.manage_output_overwrite\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Check if a file will be overwritten upon processing the inputs.</p>\n<p>If it is bound to happen, an action is taken depending on\nself._force_overwrite (or \u2013force via command line). A log message is\noutput independently of the outcome to tell the user something\nhappened.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.segment.Workflow.run\">\n<code class=\"descname\">run</code><span class=\"sig-paren\">(</span><em>*args</em>, <em>**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.Workflow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Execute the workflow.</p>\n<p>Since this is an abstract class, raise exception if this code is\nreached (not impletemented in child class or literally called on this\nclass)</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id107\">\n<h3>load_nifti<a class=\"headerlink\" href=\"#id107\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.segment.load_nifti\">\n<code class=\"descclassname\">dipy.workflows.segment.</code><code class=\"descname\">load_nifti</code><span class=\"sig-paren\">(</span><em>fname</em>, <em>return_img=False</em>, <em>return_voxsize=False</em>, <em>return_coords=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.load_nifti\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</div>\n<div class=\"section\" id=\"id108\">\n<h3>load_trk<a class=\"headerlink\" href=\"#id108\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.segment.load_trk\">\n<code class=\"descclassname\">dipy.workflows.segment.</code><code class=\"descname\">load_trk</code><span class=\"sig-paren\">(</span><em>filename</em>, <em>lazy_load=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.load_trk\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Loads tractogram files (<a href=\"#id109\"><span class=\"problematic\" id=\"id110\">*</span></a>.tck)</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>filename</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">str</span></dt>\n<dd><p class=\"first last\">input trk filename</p>\n</dd>\n<dt><strong>lazy_load</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">{False, True}, optional</span></dt>\n<dd><p class=\"first last\">If True, load streamlines in a lazy manner i.e. they will not be kept\nin memory and only be loaded when needed.\nOtherwise, load all streamlines in memory.</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>streamlines</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">list of 2D arrays</span></dt>\n<dd><p class=\"first last\">Each 2D array represents a sequence of 3D points (points, 3).</p>\n</dd>\n<dt><strong>hdr</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">dict</span></dt>\n<dd><p class=\"first last\">header from a trk file</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"median-otsu\">\n<h3>median_otsu<a class=\"headerlink\" href=\"#median-otsu\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.segment.median_otsu\">\n<code class=\"descclassname\">dipy.workflows.segment.</code><code class=\"descname\">median_otsu</code><span class=\"sig-paren\">(</span><em>input_volume</em>, <em>median_radius=4</em>, <em>numpass=4</em>, <em>autocrop=False</em>, <em>vol_idx=None</em>, <em>dilate=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.median_otsu\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Simple brain extraction tool method for images from DWI data.</p>\n<p>It uses a median filter smoothing of the input_volumes <cite>vol_idx</cite> and an\nautomatic histogram Otsu thresholding technique, hence the name\n<em>median_otsu</em>.</p>\n<p>This function is inspired from Mrtrix\u2019s bet which has default values\n<code class=\"docutils literal notranslate\"><span class=\"pre\">median_radius=3</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">numpass=2</span></code>. However, from tests on multiple 1.5T\nand 3T data     from GE, Philips, Siemens, the most robust choice is\n<code class=\"docutils literal notranslate\"><span class=\"pre\">median_radius=4</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">numpass=4</span></code>.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>input_volume</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">ndarray</span></dt>\n<dd><p class=\"first last\">ndarray of the brain volume</p>\n</dd>\n<dt><strong>median_radius</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int</span></dt>\n<dd><p class=\"first last\">Radius (in voxels) of the applied median filter (default: 4).</p>\n</dd>\n<dt><strong>numpass: int</strong></dt>\n<dd><p class=\"first last\">Number of pass of the median filter (default: 4).</p>\n</dd>\n<dt><strong>autocrop: bool, optional</strong></dt>\n<dd><p class=\"first last\">if True, the masked input_volume will also be cropped using the\nbounding box defined by the masked data. Should be on if DWI is\nupsampled to 1x1x1 resolution. (default: False).</p>\n</dd>\n<dt><strong>vol_idx</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">None or array, optional</span></dt>\n<dd><p class=\"first last\">1D array representing indices of <code class=\"docutils literal notranslate\"><span class=\"pre\">axis=3</span></code> of a 4D <cite>input_volume</cite> None\n(the default) corresponds to <code class=\"docutils literal notranslate\"><span class=\"pre\">(0,)</span></code> (assumes first volume in\n4D array).</p>\n</dd>\n<dt><strong>dilate</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">None or int, optional</span></dt>\n<dd><p class=\"first last\">number of iterations for binary dilation</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>maskedvolume</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">ndarray</span></dt>\n<dd><p class=\"first last\">Masked input_volume</p>\n</dd>\n<dt><strong>mask</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">3D ndarray</span></dt>\n<dd><p class=\"first last\">The binary brain mask</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Notes</p>\n<p>Copyright (C) 2011, the scikit-image team\nAll rights reserved.</p>\n<p>Redistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:</p>\n<blockquote>\n<div><ol class=\"arabic simple\">\n<li>Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.</li>\n<li>Redistributions in binary form must reproduce the above copyright\nnotice, this list of conditions and the following disclaimer in\nthe documentation and/or other materials provided with the\ndistribution.</li>\n<li>Neither the name of skimage nor the names of its contributors may be\nused to endorse or promote products derived from this software without\nspecific prior written permission.</li>\n</ol>\n</div></blockquote>\n<p>THIS SOFTWARE IS PROVIDED BY THE AUTHOR <a href=\"#id111\"><span class=\"problematic\" id=\"id112\">``</span></a>AS IS\u2019\u2019 AND ANY EXPRESS OR\nIMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,\nINDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\nHOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\nSTRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\nIN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGE.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id113\">\n<h3>save_nifti<a class=\"headerlink\" href=\"#id113\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.segment.save_nifti\">\n<code class=\"descclassname\">dipy.workflows.segment.</code><code class=\"descname\">save_nifti</code><span class=\"sig-paren\">(</span><em>fname</em>, <em>data</em>, <em>affine</em>, <em>hdr=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.save_nifti\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</div>\n<div class=\"section\" id=\"time\">\n<h3>time<a class=\"headerlink\" href=\"#time\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.segment.time\">\n<code class=\"descclassname\">dipy.workflows.segment.</code><code class=\"descname\">time</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span> &#x2192; floating point number<a class=\"headerlink\" href=\"#dipy.workflows.segment.time\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return the current time in seconds since the Epoch.\nFractions of a second may be present if the system clock provides them.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"bundleanalysispopulationflow\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.stats.BundleAnalysisPopulationFlow\" title=\"dipy.workflows.stats.BundleAnalysisPopulationFlow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">BundleAnalysisPopulationFlow</span></code></a><a class=\"headerlink\" href=\"#bundleanalysispopulationflow\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.stats.BundleAnalysisPopulationFlow\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.stats.</code><code class=\"descname\">BundleAnalysisPopulationFlow</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.stats.BundleAnalysisPopulationFlow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow\" title=\"dipy.workflows.workflow.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.workflows.workflow.Workflow</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code>()</td>\n<td>Create an iterator for IO.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.stats.BundleAnalysisPopulationFlow.get_short_name\" title=\"dipy.workflows.stats.BundleAnalysisPopulationFlow.get_short_name\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code></a>()</td>\n<td>Return A short name for the workflow used to subdivide.</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code>()</td>\n<td>Return No sub runs since this is a simple workflow.</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code>()</td>\n<td>Check if a file will be overwritten upon processing the inputs.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.stats.BundleAnalysisPopulationFlow.run\" title=\"dipy.workflows.stats.BundleAnalysisPopulationFlow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(model_bundle_folder,&nbsp;subject_folder[,&nbsp;\u2026])</td>\n<td>Workflow of bundle analytics.</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.stats.BundleAnalysisPopulationFlow.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.stats.BundleAnalysisPopulationFlow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"classmethod\">\n<dt id=\"dipy.workflows.stats.BundleAnalysisPopulationFlow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.stats.BundleAnalysisPopulationFlow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return A short name for the workflow used to subdivide.</p>\n<p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name.</p>\n<p>For example, a combined workflow with dti reconstruction and csd\nreconstruction might en up with the b0_threshold parameter. Using short\nnames, we will have dti.b0_threshold and csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.stats.BundleAnalysisPopulationFlow.run\">\n<code class=\"descname\">run</code><span class=\"sig-paren\">(</span><em>model_bundle_folder</em>, <em>subject_folder</em>, <em>no_disks=100</em>, <em>out_dir=''</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.stats.BundleAnalysisPopulationFlow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Workflow of bundle analytics.</p>\n<p>Applies statistical analysis on bundles of subjects and saves the\nresults in a directory specified by <code class=\"docutils literal notranslate\"><span class=\"pre\">out_dir</span></code>.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>model_bundle_folder</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">Path to the input model bundle files. This path may\ncontain wildcards to process multiple inputs at once.</p>\n</dd>\n<dt><strong>subject_folder</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">Path to the input subject folder. This path may contain\nwildcards to process multiple inputs at once.</p>\n</dd>\n<dt><strong>no_disks</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">integer, optional</span></dt>\n<dd><p class=\"first last\">Number of disks used for dividing bundle into disks. (Default 100)</p>\n</dd>\n<dt><strong>out_dir</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Output directory (default input file directory)</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">References</p>\n<table class=\"docutils citation\" frame=\"void\" id=\"r0dbfe1688493-chandio19\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\"><a class=\"fn-backref\" href=\"#id114\">[Chandio19]</a></td><td>Chandio, B.Q., S. Koudoro, D. Reagan, J. Harezlak,</td></tr>\n</tbody>\n</table>\n<p>E. Garyfallidis, Bundle Analytics: a computational and statistical\nanalyses framework for tractometric studies, Proceedings of:\nInternational Society of Magnetic Resonance in Medicine (ISMRM),\nMontreal, Canada, 2019.</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"linearmixedmodelsflow\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.stats.LinearMixedModelsFlow\" title=\"dipy.workflows.stats.LinearMixedModelsFlow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">LinearMixedModelsFlow</span></code></a><a class=\"headerlink\" href=\"#linearmixedmodelsflow\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.stats.LinearMixedModelsFlow\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.stats.</code><code class=\"descname\">LinearMixedModelsFlow</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.stats.LinearMixedModelsFlow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow\" title=\"dipy.workflows.workflow.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.workflows.workflow.Workflow</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code>()</td>\n<td>Create an iterator for IO.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.stats.LinearMixedModelsFlow.get_short_name\" title=\"dipy.workflows.stats.LinearMixedModelsFlow.get_short_name\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code></a>()</td>\n<td>Return A short name for the workflow used to subdivide.</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code>()</td>\n<td>Return No sub runs since this is a simple workflow.</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code>()</td>\n<td>Check if a file will be overwritten upon processing the inputs.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.stats.LinearMixedModelsFlow.run\" title=\"dipy.workflows.stats.LinearMixedModelsFlow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(h5_files[,&nbsp;no_disks,&nbsp;out_dir])</td>\n<td>Workflow of linear Mixed Models.</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.stats.LinearMixedModelsFlow.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.stats.LinearMixedModelsFlow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"classmethod\">\n<dt id=\"dipy.workflows.stats.LinearMixedModelsFlow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.stats.LinearMixedModelsFlow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return A short name for the workflow used to subdivide.</p>\n<p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name.</p>\n<p>For example, a combined workflow with dti reconstruction and csd\nreconstruction might en up with the b0_threshold parameter. Using short\nnames, we will have dti.b0_threshold and csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.stats.LinearMixedModelsFlow.run\">\n<code class=\"descname\">run</code><span class=\"sig-paren\">(</span><em>h5_files</em>, <em>no_disks=100</em>, <em>out_dir=''</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.stats.LinearMixedModelsFlow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Workflow of linear Mixed Models.</p>\n<p>Applies linear Mixed Models on bundles of subjects and saves the\nresults in a directory specified by <code class=\"docutils literal notranslate\"><span class=\"pre\">out_dir</span></code>.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>h5_files</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">Path to the input metric files. This path may\ncontain wildcards to process multiple inputs at once.</p>\n</dd>\n<dt><strong>no_disks</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">integer, optional</span></dt>\n<dd><p class=\"first last\">Number of disks used for dividing bundle into disks. (Default 100)</p>\n</dd>\n<dt><strong>out_dir</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Output directory (default input file directory)</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"snrinccflow\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.stats.SNRinCCFlow\" title=\"dipy.workflows.stats.SNRinCCFlow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SNRinCCFlow</span></code></a><a class=\"headerlink\" href=\"#snrinccflow\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.stats.SNRinCCFlow\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.stats.</code><code class=\"descname\">SNRinCCFlow</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.stats.SNRinCCFlow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow\" title=\"dipy.workflows.workflow.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.workflows.workflow.Workflow</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code>()</td>\n<td>Create an iterator for IO.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.stats.SNRinCCFlow.get_short_name\" title=\"dipy.workflows.stats.SNRinCCFlow.get_short_name\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code></a>()</td>\n<td>Return A short name for the workflow used to subdivide.</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code>()</td>\n<td>Return No sub runs since this is a simple workflow.</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code>()</td>\n<td>Check if a file will be overwritten upon processing the inputs.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.stats.SNRinCCFlow.run\" title=\"dipy.workflows.stats.SNRinCCFlow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(data_files,&nbsp;bvals_files,&nbsp;bvecs_files,&nbsp;\u2026)</td>\n<td>Compute the signal-to-noise ratio in the corpus callosum.</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.stats.SNRinCCFlow.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.stats.SNRinCCFlow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"classmethod\">\n<dt id=\"dipy.workflows.stats.SNRinCCFlow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.stats.SNRinCCFlow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return A short name for the workflow used to subdivide.</p>\n<p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name.</p>\n<p>For example, a combined workflow with dti reconstruction and csd\nreconstruction might en up with the b0_threshold parameter. Using short\nnames, we will have dti.b0_threshold and csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.stats.SNRinCCFlow.run\">\n<code class=\"descname\">run</code><span class=\"sig-paren\">(</span><em>data_files, bvals_files, bvecs_files, mask_files, bbox_threshold=[0.6, 1, 0, 0.1, 0, 0.1], out_dir='', out_file='product.json', out_mask_cc='cc.nii.gz', out_mask_noise='mask_noise.nii.gz'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.stats.SNRinCCFlow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Compute the signal-to-noise ratio in the corpus callosum.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>data_files</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">Path to the dwi.nii.gz file. This path may contain wildcards to\nprocess multiple inputs at once.</p>\n</dd>\n<dt><strong>bvals_files</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">Path of bvals.</p>\n</dd>\n<dt><strong>bvecs_files</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">Path of bvecs.</p>\n</dd>\n<dt><strong>mask_files</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">Path of brain mask</p>\n</dd>\n<dt><strong>bbox_threshold</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">variable float, optional</span></dt>\n<dd><p class=\"first last\">Threshold for bounding box, values separated with commas for ex.\n[0.6,1,0,0.1,0,0.1]. (default (0.6, 1, 0, 0.1, 0, 0.1))</p>\n</dd>\n<dt><strong>out_dir</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Where the resulting file will be saved. (default \u2018\u2019)</p>\n</dd>\n<dt><strong>out_file</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the result file to be saved. (default \u2018product.json\u2019)</p>\n</dd>\n<dt><strong>out_mask_cc</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the CC mask volume to be saved (default \u2018cc.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_mask_noise</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the mask noise volume to be saved\n(default \u2018mask_noise.nii.gz\u2019)</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id115\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.stats.TensorModel\" title=\"dipy.workflows.stats.TensorModel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TensorModel</span></code></a><a class=\"headerlink\" href=\"#id115\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.stats.TensorModel\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.stats.</code><code class=\"descname\">TensorModel</code><span class=\"sig-paren\">(</span><em>gtab</em>, <em>fit_method='WLS'</em>, <em>return_S0_hat=False</em>, <em>*args</em>, <em>**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.stats.TensorModel\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"../dipy.reconst/#dipy.reconst.base.ReconstModel\" title=\"dipy.reconst.base.ReconstModel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.reconst.base.ReconstModel</span></code></a></p>\n<p>Diffusion Tensor</p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.stats.TensorModel.fit\" title=\"dipy.workflows.stats.TensorModel.fit\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">fit</span></code></a>(data[,&nbsp;mask])</td>\n<td>Fit method of the DTI model class</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.stats.TensorModel.predict\" title=\"dipy.workflows.stats.TensorModel.predict\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">predict</span></code></a>(dti_params[,&nbsp;S0])</td>\n<td>Predict a signal for this TensorModel class instance given parameters.</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.stats.TensorModel.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>gtab</em>, <em>fit_method='WLS'</em>, <em>return_S0_hat=False</em>, <em>*args</em>, <em>**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.stats.TensorModel.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A Diffusion Tensor Model <a class=\"reference internal\" href=\"#r6966379adcdc-1\" id=\"id116\">[1]</a>, <a class=\"reference internal\" href=\"#r6966379adcdc-2\" id=\"id117\">[2]</a>.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>gtab</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">GradientTable class instance</span></dt>\n<dd></dd>\n<dt><strong>fit_method</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">str or callable</span></dt>\n<dd><p class=\"first\">str can be one of the following:</p>\n<dl class=\"last docutils\">\n<dt>\u2018WLS\u2019 for weighted least squares</dt>\n<dd><p class=\"first last\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">dti.wls_fit_tensor()</span></code></p>\n</dd>\n<dt>\u2018LS\u2019 or \u2018OLS\u2019 for ordinary least squares</dt>\n<dd><p class=\"first last\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">dti.ols_fit_tensor()</span></code></p>\n</dd>\n<dt>\u2018NLLS\u2019 for non-linear least-squares</dt>\n<dd><p class=\"first last\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">dti.nlls_fit_tensor()</span></code></p>\n</dd>\n<dt>\u2018RT\u2019 or \u2018restore\u2019 or \u2018RESTORE\u2019 for RESTORE robust tensor</dt>\n<dd><p class=\"first last\">fitting <a class=\"reference internal\" href=\"#r6966379adcdc-3\" id=\"id118\">[3]</a>\n<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">dti.restore_fit_tensor()</span></code></p>\n</dd>\n<dt>callable has to have the signature:</dt>\n<dd><p class=\"first last\">fit_method(design_matrix, data, <a href=\"#id119\"><span class=\"problematic\" id=\"id120\">*</span></a>args, <a href=\"#id121\"><span class=\"problematic\" id=\"id122\">**</span></a>kwargs)</p>\n</dd>\n</dl>\n</dd>\n<dt><strong>return_S0_hat</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool</span></dt>\n<dd><p class=\"first last\">Boolean to return (True) or not (False) the S0 values for the fit.</p>\n</dd>\n<dt><strong>args, kwargs</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">arguments and key-word arguments passed to the</span></dt>\n<dd><p class=\"first last\">fit_method. See dti.wls_fit_tensor, dti.ols_fit_tensor for details</p>\n</dd>\n<dt><strong>min_signal</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float</span></dt>\n<dd><p class=\"first last\">The minimum signal value. Needs to be a strictly positive\nnumber. Default: minimal signal in the data provided to <cite>fit</cite>.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Notes</p>\n<p>In order to increase speed of processing, tensor fitting is done\nsimultaneously over many voxels. Many fit_methods use the \u2018step\u2019\nparameter to set the number of voxels that will be fit at once in each\niteration. This is the chunk size as a number of voxels. A larger step\nvalue should speed things up, but it will also take up more memory. It\nis advisable to keep an eye on memory consumption as this value is\nincreased.</p>\n<p>Example : In <code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">iter_fit_tensor()</span></code> we have a default step value of\n1e4</p>\n<p class=\"rubric\">References</p>\n<table class=\"docutils citation\" frame=\"void\" id=\"r6966379adcdc-1\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\">[1]</td><td><em>(<a class=\"fn-backref\" href=\"#id116\">1</a>, <a class=\"fn-backref\" href=\"#id123\">2</a>)</em> Basser, P.J., Mattiello, J., LeBihan, D., 1994. Estimation of\nthe effective self-diffusion tensor from the NMR spin echo. J Magn\nReson B 103, 247-254.</td></tr>\n</tbody>\n</table>\n<table class=\"docutils citation\" frame=\"void\" id=\"r6966379adcdc-2\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\">[2]</td><td><em>(<a class=\"fn-backref\" href=\"#id117\">1</a>, <a class=\"fn-backref\" href=\"#id124\">2</a>)</em> Basser, P., Pierpaoli, C., 1996. Microstructural and\nphysiological features of tissues elucidated by quantitative\ndiffusion-tensor MRI.  Journal of Magnetic Resonance 111, 209-219.</td></tr>\n</tbody>\n</table>\n<table class=\"docutils citation\" frame=\"void\" id=\"r6966379adcdc-3\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\">[3]</td><td><em>(<a class=\"fn-backref\" href=\"#id118\">1</a>, <a class=\"fn-backref\" href=\"#id125\">2</a>)</em> Lin-Ching C., Jones D.K., Pierpaoli, C. 2005. RESTORE: Robust\nestimation of tensors by outlier rejection. MRM 53: 1088-1095</td></tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.stats.TensorModel.fit\">\n<code class=\"descname\">fit</code><span class=\"sig-paren\">(</span><em>data</em>, <em>mask=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.stats.TensorModel.fit\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Fit method of the DTI model class</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>data</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array</span></dt>\n<dd><p class=\"first last\">The measured signal from one voxel.</p>\n</dd>\n<dt><strong>mask</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array</span></dt>\n<dd><p class=\"first last\">A boolean array used to mark the coordinates in the data that\nshould be analyzed that has the shape data.shape[:-1]</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.stats.TensorModel.predict\">\n<code class=\"descname\">predict</code><span class=\"sig-paren\">(</span><em>dti_params</em>, <em>S0=1.0</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.stats.TensorModel.predict\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Predict a signal for this TensorModel class instance given parameters.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>dti_params</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">ndarray</span></dt>\n<dd><p class=\"first last\">The last dimension should have 12 tensor parameters: 3\neigenvalues, followed by the 3 eigenvectors</p>\n</dd>\n<dt><strong>S0</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float or ndarray</span></dt>\n<dd><p class=\"first last\">The non diffusion-weighted signal in every voxel, or across all\nvoxels. Default: 1</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id126\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.stats.Workflow\" title=\"dipy.workflows.stats.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a><a class=\"headerlink\" href=\"#id126\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.stats.Workflow\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.stats.</code><code class=\"descname\">Workflow</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.stats.Workflow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.7)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.stats.Workflow.get_io_iterator\" title=\"dipy.workflows.stats.Workflow.get_io_iterator\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code></a>()</td>\n<td>Create an iterator for IO.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.stats.Workflow.get_short_name\" title=\"dipy.workflows.stats.Workflow.get_short_name\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code></a>()</td>\n<td>Return A short name for the workflow used to subdivide.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.stats.Workflow.get_sub_runs\" title=\"dipy.workflows.stats.Workflow.get_sub_runs\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code></a>()</td>\n<td>Return No sub runs since this is a simple workflow.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.stats.Workflow.manage_output_overwrite\" title=\"dipy.workflows.stats.Workflow.manage_output_overwrite\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code></a>()</td>\n<td>Check if a file will be overwritten upon processing the inputs.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.stats.Workflow.run\" title=\"dipy.workflows.stats.Workflow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(*args,&nbsp;**kwargs)</td>\n<td>Execute the workflow.</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.stats.Workflow.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.stats.Workflow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.stats.Workflow.get_io_iterator\">\n<code class=\"descname\">get_io_iterator</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.stats.Workflow.get_io_iterator\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Create an iterator for IO.</p>\n<p>Use a couple of inspection tricks to build an IOIterator using the\nprevious frame (values of local variables and other contextuals) and\nthe run method\u2019s docstring.</p>\n</dd></dl>\n\n<dl class=\"classmethod\">\n<dt id=\"dipy.workflows.stats.Workflow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.stats.Workflow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return A short name for the workflow used to subdivide.</p>\n<p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name.</p>\n<p>For example, a combined workflow with dti reconstruction and csd\nreconstruction might en up with the b0_threshold parameter. Using short\nnames, we will have dti.b0_threshold and csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.stats.Workflow.get_sub_runs\">\n<code class=\"descname\">get_sub_runs</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.stats.Workflow.get_sub_runs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return No sub runs since this is a simple workflow.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.stats.Workflow.manage_output_overwrite\">\n<code class=\"descname\">manage_output_overwrite</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.stats.Workflow.manage_output_overwrite\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Check if a file will be overwritten upon processing the inputs.</p>\n<p>If it is bound to happen, an action is taken depending on\nself._force_overwrite (or \u2013force via command line). A log message is\noutput independently of the outcome to tell the user something\nhappened.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.stats.Workflow.run\">\n<code class=\"descname\">run</code><span class=\"sig-paren\">(</span><em>*args</em>, <em>**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.stats.Workflow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Execute the workflow.</p>\n<p>Since this is an abstract class, raise exception if this code is\nreached (not impletemented in child class or literally called on this\nclass)</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"binary-dilation\">\n<h3>binary_dilation<a class=\"headerlink\" href=\"#binary-dilation\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.stats.binary_dilation\">\n<code class=\"descclassname\">dipy.workflows.stats.</code><code class=\"descname\">binary_dilation</code><span class=\"sig-paren\">(</span><em>input</em>, <em>structure=None</em>, <em>iterations=1</em>, <em>mask=None</em>, <em>output=None</em>, <em>border_value=0</em>, <em>origin=0</em>, <em>brute_force=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.stats.binary_dilation\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Multi-dimensional binary dilation with the given structuring element.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>input</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array_like</span></dt>\n<dd><p class=\"first last\">Binary array_like to be dilated. Non-zero (True) elements form\nthe subset to be dilated.</p>\n</dd>\n<dt><strong>structure</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array_like, optional</span></dt>\n<dd><p class=\"first last\">Structuring element used for the dilation. Non-zero elements are\nconsidered True. If no structuring element is provided an element\nis generated with a square connectivity equal to one.</p>\n</dd>\n<dt><strong>iterations</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">{int, float}, optional</span></dt>\n<dd><p class=\"first last\">The dilation is repeated <cite>iterations</cite> times (one, by default).\nIf iterations is less than 1, the dilation is repeated until the\nresult does not change anymore.</p>\n</dd>\n<dt><strong>mask</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array_like, optional</span></dt>\n<dd><p class=\"first last\">If a mask is given, only those elements with a True value at\nthe corresponding mask element are modified at each iteration.</p>\n</dd>\n<dt><strong>output</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">ndarray, optional</span></dt>\n<dd><p class=\"first last\">Array of the same shape as input, into which the output is placed.\nBy default, a new array is created.</p>\n</dd>\n<dt><strong>border_value</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int (cast to 0 or 1), optional</span></dt>\n<dd><p class=\"first last\">Value at the border in the output array.</p>\n</dd>\n<dt><strong>origin</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int or tuple of ints, optional</span></dt>\n<dd><p class=\"first last\">Placement of the filter, by default 0.</p>\n</dd>\n<dt><strong>brute_force</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">boolean, optional</span></dt>\n<dd><p class=\"first last\">Memory condition: if False, only the pixels whose value was changed in\nthe last iteration are tracked as candidates to be updated (dilated)\nin the current iteration; if True all pixels are considered as\ncandidates for dilation, regardless of what happened in the previous\niteration. False by default.</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>binary_dilation</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">ndarray of bools</span></dt>\n<dd><p class=\"first last\">Dilation of the input by the structuring element.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<div class=\"admonition seealso\">\n<p class=\"first admonition-title\">See also</p>\n<p class=\"last\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">grey_dilation</span></code>, <code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">binary_erosion</span></code>, <code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">binary_closing</span></code>, <code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">binary_opening</span></code>, <code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">generate_binary_structure</span></code></p>\n</div>\n<p class=\"rubric\">Notes</p>\n<p>Dilation <a class=\"reference internal\" href=\"#rf074e351565f-1\" id=\"id127\">[1]</a> is a mathematical morphology operation <a class=\"reference internal\" href=\"#rf074e351565f-2\" id=\"id128\">[2]</a> that uses a\nstructuring element for expanding the shapes in an image. The binary\ndilation of an image by a structuring element is the locus of the points\ncovered by the structuring element, when its center lies within the\nnon-zero points of the image.</p>\n<p class=\"rubric\">References</p>\n<table class=\"docutils citation\" frame=\"void\" id=\"rf074e351565f-1\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\">[1]</td><td><em>(<a class=\"fn-backref\" href=\"#id127\">1</a>, <a class=\"fn-backref\" href=\"#id129\">2</a>)</em> <a class=\"reference external\" href=\"http://en.wikipedia.org/wiki/Dilation_%28morphology%29\">http://en.wikipedia.org/wiki/Dilation_%28morphology%29</a></td></tr>\n</tbody>\n</table>\n<table class=\"docutils citation\" frame=\"void\" id=\"rf074e351565f-2\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\">[2]</td><td><em>(<a class=\"fn-backref\" href=\"#id128\">1</a>, <a class=\"fn-backref\" href=\"#id130\">2</a>)</em> <a class=\"reference external\" href=\"http://en.wikipedia.org/wiki/Mathematical_morphology\">http://en.wikipedia.org/wiki/Mathematical_morphology</a></td></tr>\n</tbody>\n</table>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">scipy</span> <span class=\"k\">import</span> <span class=\"n\">ndimage</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">((</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span>\n<span class=\"go\">array([[ 0.,  0.,  0.,  0.,  0.],</span>\n<span class=\"go\">       [ 0.,  0.,  0.,  0.,  0.],</span>\n<span class=\"go\">       [ 0.,  0.,  1.,  0.,  0.],</span>\n<span class=\"go\">       [ 0.,  0.,  0.,  0.,  0.],</span>\n<span class=\"go\">       [ 0.,  0.,  0.,  0.,  0.]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ndimage</span><span class=\"o\">.</span><span class=\"n\">binary_dilation</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>\n<span class=\"go\">array([[False, False, False, False, False],</span>\n<span class=\"go\">       [False, False,  True, False, False],</span>\n<span class=\"go\">       [False,  True,  True,  True, False],</span>\n<span class=\"go\">       [False, False,  True, False, False],</span>\n<span class=\"go\">       [False, False, False, False, False]], dtype=bool)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ndimage</span><span class=\"o\">.</span><span class=\"n\">binary_dilation</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">)</span>\n<span class=\"go\">array([[ 0.,  0.,  0.,  0.,  0.],</span>\n<span class=\"go\">       [ 0.,  0.,  1.,  0.,  0.],</span>\n<span class=\"go\">       [ 0.,  1.,  1.,  1.,  0.],</span>\n<span class=\"go\">       [ 0.,  0.,  1.,  0.,  0.],</span>\n<span class=\"go\">       [ 0.,  0.,  0.,  0.,  0.]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># 3x3 structuring element with connectivity 1, used by default</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">struct1</span> <span class=\"o\">=</span> <span class=\"n\">ndimage</span><span class=\"o\">.</span><span class=\"n\">generate_binary_structure</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">struct1</span>\n<span class=\"go\">array([[False,  True, False],</span>\n<span class=\"go\">       [ True,  True,  True],</span>\n<span class=\"go\">       [False,  True, False]], dtype=bool)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># 3x3 structuring element with connectivity 2</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">struct2</span> <span class=\"o\">=</span> <span class=\"n\">ndimage</span><span class=\"o\">.</span><span class=\"n\">generate_binary_structure</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">struct2</span>\n<span class=\"go\">array([[ True,  True,  True],</span>\n<span class=\"go\">       [ True,  True,  True],</span>\n<span class=\"go\">       [ True,  True,  True]], dtype=bool)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ndimage</span><span class=\"o\">.</span><span class=\"n\">binary_dilation</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">structure</span><span class=\"o\">=</span><span class=\"n\">struct1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">)</span>\n<span class=\"go\">array([[ 0.,  0.,  0.,  0.,  0.],</span>\n<span class=\"go\">       [ 0.,  0.,  1.,  0.,  0.],</span>\n<span class=\"go\">       [ 0.,  1.,  1.,  1.,  0.],</span>\n<span class=\"go\">       [ 0.,  0.,  1.,  0.,  0.],</span>\n<span class=\"go\">       [ 0.,  0.,  0.,  0.,  0.]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ndimage</span><span class=\"o\">.</span><span class=\"n\">binary_dilation</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">structure</span><span class=\"o\">=</span><span class=\"n\">struct2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">)</span>\n<span class=\"go\">array([[ 0.,  0.,  0.,  0.,  0.],</span>\n<span class=\"go\">       [ 0.,  1.,  1.,  1.,  0.],</span>\n<span class=\"go\">       [ 0.,  1.,  1.,  1.,  0.],</span>\n<span class=\"go\">       [ 0.,  1.,  1.,  1.,  0.],</span>\n<span class=\"go\">       [ 0.,  0.,  0.,  0.,  0.]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ndimage</span><span class=\"o\">.</span><span class=\"n\">binary_dilation</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">structure</span><span class=\"o\">=</span><span class=\"n\">struct1</span><span class=\"p\">,</span>\\\n<span class=\"gp\">... </span><span class=\"n\">iterations</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">)</span>\n<span class=\"go\">array([[ 0.,  0.,  1.,  0.,  0.],</span>\n<span class=\"go\">       [ 0.,  1.,  1.,  1.,  0.],</span>\n<span class=\"go\">       [ 1.,  1.,  1.,  1.,  1.],</span>\n<span class=\"go\">       [ 0.,  1.,  1.,  1.,  0.],</span>\n<span class=\"go\">       [ 0.,  0.,  1.,  0.,  0.]])</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"bounding-box\">\n<h3>bounding_box<a class=\"headerlink\" href=\"#bounding-box\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.stats.bounding_box\">\n<code class=\"descclassname\">dipy.workflows.stats.</code><code class=\"descname\">bounding_box</code><span class=\"sig-paren\">(</span><em>vol</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.stats.bounding_box\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Compute the bounding box of nonzero intensity voxels in the volume.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>vol</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">ndarray</span></dt>\n<dd><p class=\"first last\">Volume to compute bounding box on.</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>npmins</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">list</span></dt>\n<dd><p class=\"first last\">Array containg minimum index of each dimension</p>\n</dd>\n<dt><strong>npmaxs</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">list</span></dt>\n<dd><p class=\"first last\">Array containg maximum index of each dimension</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"bundle-analysis\">\n<h3>bundle_analysis<a class=\"headerlink\" href=\"#bundle-analysis\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.stats.bundle_analysis\">\n<code class=\"descclassname\">dipy.workflows.stats.</code><code class=\"descname\">bundle_analysis</code><span class=\"sig-paren\">(</span><em>model_bundle_folder</em>, <em>bundle_folder</em>, <em>orig_bundle_folder</em>, <em>metric_folder</em>, <em>group</em>, <em>subject</em>, <em>no_disks=100</em>, <em>out_dir=''</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.stats.bundle_analysis\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Applies statistical analysis on bundles and saves the results\nin a directory specified by <code class=\"docutils literal notranslate\"><span class=\"pre\">out_dir</span></code>.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>model_bundle_folder</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">Path to the input model bundle files. This path may contain\nwildcards to process multiple inputs at once.</p>\n</dd>\n<dt><strong>bundle_folder</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">Path to the input bundle files in common space. This path may\ncontain wildcards to process multiple inputs at once.</p>\n</dd>\n<dt><strong>orig_folder</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">Path to the input bundle files in native space. This path may\ncontain wildcards to process multiple inputs at once.</p>\n</dd>\n<dt><strong>metric_folder</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">Path to the input dti metric or/and peak files. It will be used as\nmetric for statistical analysis of bundles.</p>\n</dd>\n<dt><strong>group</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">what group subject belongs to e.g. control or patient</p>\n</dd>\n<dt><strong>subject</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">subject id e.g. 10001</p>\n</dd>\n<dt><strong>no_disks</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">integer, optional</span></dt>\n<dd><p class=\"first last\">Number of disks used for dividing bundle into disks. (Default 100)</p>\n</dd>\n<dt><strong>out_dir</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Output directory (default input file directory)</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">References</p>\n<table class=\"docutils citation\" frame=\"void\" id=\"rb50b70434d87-chandio19\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\"><a class=\"fn-backref\" href=\"#id131\">[Chandio19]</a></td><td>Chandio, B.Q., S. Koudoro, D. Reagan, J. Harezlak,</td></tr>\n</tbody>\n</table>\n<p>E. Garyfallidis, Bundle Analytics: a computational and statistical\nanalyses framework for tractometric studies, Proceedings of:\nInternational Society of Magnetic Resonance in Medicine (ISMRM),\nMontreal, Canada, 2019.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id132\">\n<h3>gradient_table<a class=\"headerlink\" href=\"#id132\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.stats.gradient_table\">\n<code class=\"descclassname\">dipy.workflows.stats.</code><code class=\"descname\">gradient_table</code><span class=\"sig-paren\">(</span><em>bvals</em>, <em>bvecs=None</em>, <em>big_delta=None</em>, <em>small_delta=None</em>, <em>b0_threshold=50</em>, <em>atol=0.01</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.stats.gradient_table\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A general function for creating diffusion MR gradients.</p>\n<p>It reads, loads and prepares scanner parameters like the b-values and\nb-vectors so that they can be useful during the reconstruction process.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>bvals</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">can be any of the four options</span></dt>\n<dd><ol class=\"first last arabic simple\">\n<li>an array of shape (N,) or (1, N) or (N, 1) with the b-values.</li>\n<li>a path for the file which contains an array like the above (1).</li>\n<li>an array of shape (N, 4) or (4, N). Then this parameter is\nconsidered to be a b-table which contains both bvals and bvecs. In\nthis case the next parameter is skipped.</li>\n<li>a path for the file which contains an array like the one at (3).</li>\n</ol>\n</dd>\n<dt><strong>bvecs</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">can be any of two options</span></dt>\n<dd><ol class=\"first last arabic simple\">\n<li>an array of shape (N, 3) or (3, N) with the b-vectors.</li>\n<li>a path for the file which contains an array like the previous.</li>\n</ol>\n</dd>\n<dt><strong>big_delta</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float</span></dt>\n<dd><p class=\"first last\">acquisition pulse separation time in seconds (default None)</p>\n</dd>\n<dt><strong>small_delta</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float</span></dt>\n<dd><p class=\"first last\">acquisition pulse duration time in seconds (default None)</p>\n</dd>\n<dt><strong>b0_threshold</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float</span></dt>\n<dd><p class=\"first last\">All b-values with values less than or equal to <cite>bo_threshold</cite> are\nconsidered as b0s i.e. without diffusion weighting.</p>\n</dd>\n<dt><strong>atol</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float</span></dt>\n<dd><p class=\"first last\">All b-vectors need to be unit vectors up to a tolerance.</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>gradients</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">GradientTable</span></dt>\n<dd><p class=\"first last\">A GradientTable with all the gradient information.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Notes</p>\n<ol class=\"arabic simple\">\n<li>Often b0s (b-values which correspond to images without diffusion\nweighting) have 0 values however in some cases the scanner cannot\nprovide b0s of an exact 0 value and it gives a bit higher values\ne.g. 6 or 12. This is the purpose of the b0_threshold in the __init__.</li>\n<li>We assume that the minimum number of b-values is 7.</li>\n<li>B-vectors should be unit vectors.</li>\n</ol>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">dipy.core.gradients</span> <span class=\"k\">import</span> <span class=\"n\">gradient_table</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">bvals</span> <span class=\"o\">=</span> <span class=\"mi\">1500</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">bvals</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sq2</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">bvecs</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                  <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                  <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                  <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                  <span class=\"p\">[</span><span class=\"n\">sq2</span><span class=\"p\">,</span> <span class=\"n\">sq2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                  <span class=\"p\">[</span><span class=\"n\">sq2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">sq2</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                  <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">sq2</span><span class=\"p\">,</span> <span class=\"n\">sq2</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">gt</span> <span class=\"o\">=</span> <span class=\"n\">gradient_table</span><span class=\"p\">(</span><span class=\"n\">bvals</span><span class=\"p\">,</span> <span class=\"n\">bvecs</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">gt</span><span class=\"o\">.</span><span class=\"n\">bvecs</span><span class=\"o\">.</span><span class=\"n\">shape</span> <span class=\"o\">==</span> <span class=\"n\">bvecs</span><span class=\"o\">.</span><span class=\"n\">shape</span>\n<span class=\"go\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">gt</span> <span class=\"o\">=</span> <span class=\"n\">gradient_table</span><span class=\"p\">(</span><span class=\"n\">bvals</span><span class=\"p\">,</span> <span class=\"n\">bvecs</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">gt</span><span class=\"o\">.</span><span class=\"n\">bvecs</span><span class=\"o\">.</span><span class=\"n\">shape</span> <span class=\"o\">==</span> <span class=\"n\">bvecs</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"o\">.</span><span class=\"n\">shape</span>\n<span class=\"go\">False</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id133\">\n<h3>load_nifti<a class=\"headerlink\" href=\"#id133\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.stats.load_nifti\">\n<code class=\"descclassname\">dipy.workflows.stats.</code><code class=\"descname\">load_nifti</code><span class=\"sig-paren\">(</span><em>fname</em>, <em>return_img=False</em>, <em>return_voxsize=False</em>, <em>return_coords=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.stats.load_nifti\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</div>\n<div class=\"section\" id=\"id134\">\n<h3>median_otsu<a class=\"headerlink\" href=\"#id134\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.stats.median_otsu\">\n<code class=\"descclassname\">dipy.workflows.stats.</code><code class=\"descname\">median_otsu</code><span class=\"sig-paren\">(</span><em>input_volume</em>, <em>median_radius=4</em>, <em>numpass=4</em>, <em>autocrop=False</em>, <em>vol_idx=None</em>, <em>dilate=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.stats.median_otsu\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Simple brain extraction tool method for images from DWI data.</p>\n<p>It uses a median filter smoothing of the input_volumes <cite>vol_idx</cite> and an\nautomatic histogram Otsu thresholding technique, hence the name\n<em>median_otsu</em>.</p>\n<p>This function is inspired from Mrtrix\u2019s bet which has default values\n<code class=\"docutils literal notranslate\"><span class=\"pre\">median_radius=3</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">numpass=2</span></code>. However, from tests on multiple 1.5T\nand 3T data     from GE, Philips, Siemens, the most robust choice is\n<code class=\"docutils literal notranslate\"><span class=\"pre\">median_radius=4</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">numpass=4</span></code>.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>input_volume</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">ndarray</span></dt>\n<dd><p class=\"first last\">ndarray of the brain volume</p>\n</dd>\n<dt><strong>median_radius</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int</span></dt>\n<dd><p class=\"first last\">Radius (in voxels) of the applied median filter (default: 4).</p>\n</dd>\n<dt><strong>numpass: int</strong></dt>\n<dd><p class=\"first last\">Number of pass of the median filter (default: 4).</p>\n</dd>\n<dt><strong>autocrop: bool, optional</strong></dt>\n<dd><p class=\"first last\">if True, the masked input_volume will also be cropped using the\nbounding box defined by the masked data. Should be on if DWI is\nupsampled to 1x1x1 resolution. (default: False).</p>\n</dd>\n<dt><strong>vol_idx</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">None or array, optional</span></dt>\n<dd><p class=\"first last\">1D array representing indices of <code class=\"docutils literal notranslate\"><span class=\"pre\">axis=3</span></code> of a 4D <cite>input_volume</cite> None\n(the default) corresponds to <code class=\"docutils literal notranslate\"><span class=\"pre\">(0,)</span></code> (assumes first volume in\n4D array).</p>\n</dd>\n<dt><strong>dilate</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">None or int, optional</span></dt>\n<dd><p class=\"first last\">number of iterations for binary dilation</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>maskedvolume</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">ndarray</span></dt>\n<dd><p class=\"first last\">Masked input_volume</p>\n</dd>\n<dt><strong>mask</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">3D ndarray</span></dt>\n<dd><p class=\"first last\">The binary brain mask</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Notes</p>\n<p>Copyright (C) 2011, the scikit-image team\nAll rights reserved.</p>\n<p>Redistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:</p>\n<blockquote>\n<div><ol class=\"arabic simple\">\n<li>Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.</li>\n<li>Redistributions in binary form must reproduce the above copyright\nnotice, this list of conditions and the following disclaimer in\nthe documentation and/or other materials provided with the\ndistribution.</li>\n<li>Neither the name of skimage nor the names of its contributors may be\nused to endorse or promote products derived from this software without\nspecific prior written permission.</li>\n</ol>\n</div></blockquote>\n<p>THIS SOFTWARE IS PROVIDED BY THE AUTHOR <a href=\"#id135\"><span class=\"problematic\" id=\"id136\">``</span></a>AS IS\u2019\u2019 AND ANY EXPRESS OR\nIMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,\nINDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\nHOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\nSTRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\nIN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGE.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"optional-package\">\n<h3>optional_package<a class=\"headerlink\" href=\"#optional-package\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.stats.optional_package\">\n<code class=\"descclassname\">dipy.workflows.stats.</code><code class=\"descname\">optional_package</code><span class=\"sig-paren\">(</span><em>name</em>, <em>trip_msg=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.stats.optional_package\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return package-like thing and module setup for package <cite>name</cite></p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>name</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">str</span></dt>\n<dd><p class=\"first last\">package name</p>\n</dd>\n<dt><strong>trip_msg</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">None or str</span></dt>\n<dd><p class=\"first last\">message to give when someone tries to use the return package, but we\ncould not import it, and have returned a TripWire object instead.\nDefault message if None.</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>pkg_like</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">module or <code class=\"docutils literal notranslate\"><span class=\"pre\">TripWire</span></code> instance</span></dt>\n<dd><p class=\"first last\">If we can import the package, return it.  Otherwise return an object\nraising an error when accessed</p>\n</dd>\n<dt><strong>have_pkg</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool</span></dt>\n<dd><p class=\"first last\">True if import for package was successful, false otherwise</p>\n</dd>\n<dt><strong>module_setup</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">function</span></dt>\n<dd><p class=\"first last\">callable usually set as <code class=\"docutils literal notranslate\"><span class=\"pre\">setup_module</span></code> in calling namespace, to allow\nskipping tests.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id137\">\n<h3>read_bvals_bvecs<a class=\"headerlink\" href=\"#id137\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.stats.read_bvals_bvecs\">\n<code class=\"descclassname\">dipy.workflows.stats.</code><code class=\"descname\">read_bvals_bvecs</code><span class=\"sig-paren\">(</span><em>fbvals</em>, <em>fbvecs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.stats.read_bvals_bvecs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Read b-values and b-vectors from disk</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>fbvals</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">str</span></dt>\n<dd><p class=\"first last\">Full path to file with b-values. None to not read bvals.</p>\n</dd>\n<dt><strong>fbvecs</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">str</span></dt>\n<dd><p class=\"first last\">Full path of file with b-vectors. None to not read bvecs.</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>bvals</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, (N,) or None</span></dt>\n<dd></dd>\n<dt><strong>bvecs</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array, (N, 3) or None</span></dt>\n<dd></dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Notes</p>\n<p>Files can be either \u2018.bvals\u2019/\u2019.bvecs\u2019 or \u2018.txt\u2019 or \u2018.npy\u2019 (containing\narrays stored with the appropriate values).</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id138\">\n<h3>save_nifti<a class=\"headerlink\" href=\"#id138\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.stats.save_nifti\">\n<code class=\"descclassname\">dipy.workflows.stats.</code><code class=\"descname\">save_nifti</code><span class=\"sig-paren\">(</span><em>fname</em>, <em>data</em>, <em>affine</em>, <em>hdr=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.stats.save_nifti\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</div>\n<div class=\"section\" id=\"segment-from-cfa\">\n<h3>segment_from_cfa<a class=\"headerlink\" href=\"#segment-from-cfa\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.stats.segment_from_cfa\">\n<code class=\"descclassname\">dipy.workflows.stats.</code><code class=\"descname\">segment_from_cfa</code><span class=\"sig-paren\">(</span><em>tensor_fit</em>, <em>roi</em>, <em>threshold</em>, <em>return_cfa=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.stats.segment_from_cfa\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Segment the cfa inside roi using the values from threshold as bounds.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>tensor_fit</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">TensorFit object</span></dt>\n<dd><p class=\"first last\">TensorFit object</p>\n</dd>\n<dt><strong>roi</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">ndarray</span></dt>\n<dd><p class=\"first last\">A binary mask, which contains the bounding box for the segmentation.</p>\n</dd>\n<dt><strong>threshold</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array-like</span></dt>\n<dd><p class=\"first last\">An iterable that defines the min and max values to use for the\nthresholding.\nThe values are specified as (R_min, R_max, G_min, G_max, B_min, B_max)</p>\n</dd>\n<dt><strong>return_cfa</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool, optional</span></dt>\n<dd><p class=\"first last\">If True, the cfa is also returned.</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>mask</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">ndarray</span></dt>\n<dd><p class=\"first last\">Binary mask of the segmentation.</p>\n</dd>\n<dt><strong>cfa</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">ndarray, optional</span></dt>\n<dd><p class=\"first last\">Array with shape = (\u2026, 3), where \u2026 is the shape of tensor_fit.\nThe color fractional anisotropy, ordered as a nd array with the last\ndimension of size 3 for the R, G and B channels.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"simple-plot\">\n<h3>simple_plot<a class=\"headerlink\" href=\"#simple-plot\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.stats.simple_plot\">\n<code class=\"descclassname\">dipy.workflows.stats.</code><code class=\"descname\">simple_plot</code><span class=\"sig-paren\">(</span><em>file_name</em>, <em>title</em>, <em>x</em>, <em>y</em>, <em>xlabel</em>, <em>ylabel</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.stats.simple_plot\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Saves the simple plot with given x and y values</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>file_name</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">file name for saving the plot</p>\n</dd>\n<dt><strong>title</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">title of the plot</p>\n</dd>\n<dt><strong>x</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">integer list</span></dt>\n<dd><p class=\"first last\">x-axis values to be ploted</p>\n</dd>\n<dt><strong>y</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">integer list</span></dt>\n<dd><p class=\"first last\">y-axis values to be ploted</p>\n</dd>\n<dt><strong>xlabel</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">label for x-axis</p>\n</dd>\n<dt><strong>ylable</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">label for y-axis</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"closestpeakdirectiongetter\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.tracking.ClosestPeakDirectionGetter\" title=\"dipy.workflows.tracking.ClosestPeakDirectionGetter\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ClosestPeakDirectionGetter</span></code></a><a class=\"headerlink\" href=\"#closestpeakdirectiongetter\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.tracking.ClosestPeakDirectionGetter\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.tracking.</code><code class=\"descname\">ClosestPeakDirectionGetter</code><a class=\"headerlink\" href=\"#dipy.workflows.tracking.ClosestPeakDirectionGetter\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.direction.closest_peak_direction_getter.PmfGenDirectionGetter</span></code></p>\n<p>A direction getter that returns the closest odf peak to previous tracking\ndirection.</p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">from_pmf</span></code></td>\n<td>Constructor for making a DirectionGetter from an array of Pmfs</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">from_shcoeff</span></code></td>\n<td>Probabilistic direction getter from a distribution of directions on the sphere</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">initial_direction</span></code></td>\n<td>Returns best directions at seed location to start tracking.</td>\n</tr>\n</tbody>\n</table>\n<table border=\"1\" class=\"docutils\">\n<colgroup>\n<col width=\"63%\" />\n<col width=\"37%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><strong>get_direction</strong></td>\n<td>&#160;</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.tracking.ClosestPeakDirectionGetter.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>$self</em>, <em>/</em>, <em>*args</em>, <em>**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.ClosestPeakDirectionGetter.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize self.  See help(type(self)) for accurate signature.</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"cmctissueclassifier\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.tracking.CmcTissueClassifier\" title=\"dipy.workflows.tracking.CmcTissueClassifier\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">CmcTissueClassifier</span></code></a><a class=\"headerlink\" href=\"#cmctissueclassifier\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.tracking.CmcTissueClassifier\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.tracking.</code><code class=\"descname\">CmcTissueClassifier</code><a class=\"headerlink\" href=\"#dipy.workflows.tracking.CmcTissueClassifier\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.tracking.local.tissue_classifier.ConstrainedTissueClassifier</span></code></p>\n<p>Continuous map criterion (CMC) stopping criteria from <a class=\"reference internal\" href=\"#r80c64a47e37c-1\" id=\"id139\">[1]</a>.\nThis implements the use of partial volume fraction (PVE) maps to\ndetermine when the tracking stops.</p>\n<dl class=\"docutils\">\n<dt>cdef:</dt>\n<dd>double interp_out_double[1]\ndouble[:]  interp_out_view = interp_out_view\ndouble[:, :, :] include_map, exclude_map\ndouble step_size\ndouble average_voxel_size\ndouble correction_factor</dd>\n</dl>\n<p class=\"rubric\">References</p>\n<table class=\"docutils citation\" frame=\"void\" id=\"r80c64a47e37c-1\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\">[1]</td><td><em>(<a class=\"fn-backref\" href=\"#id8\">1</a>, <a class=\"fn-backref\" href=\"#id139\">2</a>, <a class=\"fn-backref\" href=\"#id140\">3</a>)</em> Girard, G., Whittingstall, K., Deriche, R., &amp; Descoteaux, M.</td></tr>\n</tbody>\n</table>\n<p>\u201cTowards quantitative connectivity analysis: reducing tractography biases.\u201d\nNeuroImage, 98, 266-278, 2014.</p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">from_pve</span></code></td>\n<td>ConstrainedTissueClassifier from partial volume fraction (PVE) maps.</td>\n</tr>\n</tbody>\n</table>\n<table border=\"1\" class=\"docutils\">\n<colgroup>\n<col width=\"60%\" />\n<col width=\"40%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><strong>check_point</strong></td>\n<td>&#160;</td>\n</tr>\n<tr class=\"row-even\"><td><strong>get_exclude</strong></td>\n<td>&#160;</td>\n</tr>\n<tr class=\"row-odd\"><td><strong>get_include</strong></td>\n<td>&#160;</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.tracking.CmcTissueClassifier.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>$self</em>, <em>/</em>, <em>*args</em>, <em>**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.CmcTissueClassifier.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize self.  See help(type(self)) for accurate signature.</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"deterministicmaximumdirectiongetter\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.tracking.DeterministicMaximumDirectionGetter\" title=\"dipy.workflows.tracking.DeterministicMaximumDirectionGetter\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DeterministicMaximumDirectionGetter</span></code></a><a class=\"headerlink\" href=\"#deterministicmaximumdirectiongetter\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.tracking.DeterministicMaximumDirectionGetter\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.tracking.</code><code class=\"descname\">DeterministicMaximumDirectionGetter</code><a class=\"headerlink\" href=\"#dipy.workflows.tracking.DeterministicMaximumDirectionGetter\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.direction.probabilistic_direction_getter.ProbabilisticDirectionGetter</span></code></p>\n<p>Return direction of a sphere with the highest probability mass\nfunction (pmf).</p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">from_pmf</span></code></td>\n<td>Constructor for making a DirectionGetter from an array of Pmfs</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">from_shcoeff</span></code></td>\n<td>Probabilistic direction getter from a distribution of directions on the sphere</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">initial_direction</span></code></td>\n<td>Returns best directions at seed location to start tracking.</td>\n</tr>\n</tbody>\n</table>\n<table border=\"1\" class=\"docutils\">\n<colgroup>\n<col width=\"63%\" />\n<col width=\"37%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><strong>get_direction</strong></td>\n<td>&#160;</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.tracking.DeterministicMaximumDirectionGetter.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>$self</em>, <em>/</em>, <em>*args</em>, <em>**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.DeterministicMaximumDirectionGetter.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize self.  See help(type(self)) for accurate signature.</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"localfibertrackingpamflow\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.tracking.LocalFiberTrackingPAMFlow\" title=\"dipy.workflows.tracking.LocalFiberTrackingPAMFlow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">LocalFiberTrackingPAMFlow</span></code></a><a class=\"headerlink\" href=\"#localfibertrackingpamflow\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.tracking.LocalFiberTrackingPAMFlow\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.tracking.</code><code class=\"descname\">LocalFiberTrackingPAMFlow</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.LocalFiberTrackingPAMFlow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow\" title=\"dipy.workflows.workflow.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.workflows.workflow.Workflow</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code>()</td>\n<td>Create an iterator for IO.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.tracking.LocalFiberTrackingPAMFlow.get_short_name\" title=\"dipy.workflows.tracking.LocalFiberTrackingPAMFlow.get_short_name\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code></a>()</td>\n<td>Return A short name for the workflow used to subdivide.</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code>()</td>\n<td>Return No sub runs since this is a simple workflow.</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code>()</td>\n<td>Check if a file will be overwritten upon processing the inputs.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.tracking.LocalFiberTrackingPAMFlow.run\" title=\"dipy.workflows.tracking.LocalFiberTrackingPAMFlow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(pam_files,&nbsp;stopping_files,&nbsp;seeding_files)</td>\n<td>Workflow for Local Fiber Tracking.</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.tracking.LocalFiberTrackingPAMFlow.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.LocalFiberTrackingPAMFlow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"classmethod\">\n<dt id=\"dipy.workflows.tracking.LocalFiberTrackingPAMFlow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.LocalFiberTrackingPAMFlow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return A short name for the workflow used to subdivide.</p>\n<p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name.</p>\n<p>For example, a combined workflow with dti reconstruction and csd\nreconstruction might en up with the b0_threshold parameter. Using short\nnames, we will have dti.b0_threshold and csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.tracking.LocalFiberTrackingPAMFlow.run\">\n<code class=\"descname\">run</code><span class=\"sig-paren\">(</span><em>pam_files</em>, <em>stopping_files</em>, <em>seeding_files</em>, <em>stopping_thr=0.2</em>, <em>seed_density=1</em>, <em>tracking_method='deterministic'</em>, <em>pmf_threshold=0.1</em>, <em>max_angle=30.0</em>, <em>out_dir=''</em>, <em>out_tractogram='tractogram.trk'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.LocalFiberTrackingPAMFlow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Workflow for Local Fiber Tracking.</p>\n<p>This workflow use a saved peaks and metrics (PAM) file as input.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>pam_files</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><dl class=\"first last docutils\">\n<dt>Path to the peaks and metrics files. This path may contain</dt>\n<dd><p class=\"first last\">wildcards to use multiple masks at once.</p>\n</dd>\n</dl>\n</dd>\n<dt><strong>stopping_files</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">Path of FA or other images used for stopping criteria for tracking.</p>\n</dd>\n<dt><strong>seeding_files</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">A binary image showing where we need to seed for tracking.</p>\n</dd>\n<dt><strong>stopping_thr</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float, optional</span></dt>\n<dd><dl class=\"first last docutils\">\n<dt>Threshold applied to stopping volume\u2019s data to identify where</dt>\n<dd><p class=\"first last\">tracking has to stop (default 0.25).</p>\n</dd>\n</dl>\n</dd>\n<dt><strong>seed_density</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int, optional</span></dt>\n<dd><dl class=\"first last docutils\">\n<dt>Number of seeds per dimension inside voxel (default 1).</dt>\n<dd><p class=\"first last\">For example, seed_density of 2 means 8 regularly distributed\npoints in the voxel. And seed density of 1 means 1 point at the\ncenter of the voxel.</p>\n</dd>\n</dl>\n</dd>\n<dt><strong>tracking_method</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><dl class=\"first last docutils\">\n<dt>Select direction getter strategy:</dt>\n<dd><ul class=\"first last simple\">\n<li>\u201ceudx\u201d (Uses the peaks saved in the pam_files)</li>\n<li>\u201cdeterministic\u201d or \u201cdet\u201d for a deterministic tracking\n(Uses the sh saved in the pam_files, default)</li>\n<li>\u201cprobabilistic\u201d or \u201cprob\u201d for a Probabilistic tracking\n(Uses the sh saved in the pam_files)</li>\n<li>\u201cclosestpeaks\u201d or \u201ccp\u201d for a ClosestPeaks tracking\n(Uses the sh saved in the pam_files)</li>\n</ul>\n</dd>\n</dl>\n</dd>\n<dt><strong>pmf_threshold</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float, optional</span></dt>\n<dd><p class=\"first last\">Threshold for ODF functions. (default 0.1)</p>\n</dd>\n<dt><strong>max_angle</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float, optional</span></dt>\n<dd><p class=\"first last\">Maximum angle between tract segments. This angle can be more\ngenerous (larger) than values typically used with probabilistic\ndirection getters. The angle range is (0, 90)</p>\n</dd>\n<dt><strong>out_dir</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Output directory (default input file directory)</p>\n</dd>\n<dt><strong>out_tractogram</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the tractogram file to be saved (default \u2018tractogram.trk\u2019)</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">References</p>\n<p>Garyfallidis, University of Cambridge, PhD thesis 2012.\nAmirbekian, University of California San Francisco, PhD thesis 2017.</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"localtracking\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.tracking.LocalTracking\" title=\"dipy.workflows.tracking.LocalTracking\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">LocalTracking</span></code></a><a class=\"headerlink\" href=\"#localtracking\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.tracking.LocalTracking\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.tracking.</code><code class=\"descname\">LocalTracking</code><span class=\"sig-paren\">(</span><em>direction_getter</em>, <em>tissue_classifier</em>, <em>seeds</em>, <em>affine</em>, <em>step_size</em>, <em>max_cross=None</em>, <em>maxlen=500</em>, <em>fixedstep=True</em>, <em>return_all=True</em>, <em>random_seed=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.LocalTracking\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.7)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.tracking.LocalTracking.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>direction_getter</em>, <em>tissue_classifier</em>, <em>seeds</em>, <em>affine</em>, <em>step_size</em>, <em>max_cross=None</em>, <em>maxlen=500</em>, <em>fixedstep=True</em>, <em>return_all=True</em>, <em>random_seed=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.LocalTracking.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Creates streamlines by using local fiber-tracking.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>direction_getter</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">instance of DirectionGetter</span></dt>\n<dd><p class=\"first last\">Used to get directions for fiber tracking.</p>\n</dd>\n<dt><strong>tissue_classifier</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">instance of TissueClassifier</span></dt>\n<dd><p class=\"first last\">Identifies endpoints and invalid points to inform tracking.</p>\n</dd>\n<dt><strong>seeds</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array (N, 3)</span></dt>\n<dd><p class=\"first last\">Points to seed the tracking. Seed points should be given in point\nspace of the track (see <code class=\"docutils literal notranslate\"><span class=\"pre\">affine</span></code>).</p>\n</dd>\n<dt><strong>affine</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array (4, 4)</span></dt>\n<dd><p class=\"first last\">Coordinate space for the streamline point with respect to voxel\nindices of input data. This affine can contain scaling, rotational,\nand translational components but should not contain any shearing.\nAn identity matrix can be used to generate streamlines in \u201cvoxel\ncoordinates\u201d as long as isotropic voxels were used to acquire the\ndata.</p>\n</dd>\n<dt><strong>step_size</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float</span></dt>\n<dd><p class=\"first last\">Step size used for tracking.</p>\n</dd>\n<dt><strong>max_cross</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int or None</span></dt>\n<dd><p class=\"first last\">The maximum number of direction to track from each seed in crossing\nvoxels. By default all initial directions are tracked.</p>\n</dd>\n<dt><strong>maxlen</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int</span></dt>\n<dd><p class=\"first last\">Maximum number of steps to track from seed. Used to prevent\ninfinite loops.</p>\n</dd>\n<dt><strong>fixedstep</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool</span></dt>\n<dd><p class=\"first last\">If true, a fixed stepsize is used, otherwise a variable step size\nis used.</p>\n</dd>\n<dt><strong>return_all</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool</span></dt>\n<dd><p class=\"first last\">If true, return all generated streamlines, otherwise only\nstreamlines reaching end points or exiting the image.</p>\n</dd>\n<dt><strong>random_seed</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int</span></dt>\n<dd><p class=\"first last\">The seed for the random seed generator (numpy.random.seed and\nrandom.seed).</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"pftrackingpamflow\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.tracking.PFTrackingPAMFlow\" title=\"dipy.workflows.tracking.PFTrackingPAMFlow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">PFTrackingPAMFlow</span></code></a><a class=\"headerlink\" href=\"#pftrackingpamflow\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.tracking.PFTrackingPAMFlow\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.tracking.</code><code class=\"descname\">PFTrackingPAMFlow</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.PFTrackingPAMFlow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow\" title=\"dipy.workflows.workflow.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.workflows.workflow.Workflow</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code>()</td>\n<td>Create an iterator for IO.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.tracking.PFTrackingPAMFlow.get_short_name\" title=\"dipy.workflows.tracking.PFTrackingPAMFlow.get_short_name\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code></a>()</td>\n<td>Return A short name for the workflow used to subdivide.</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code>()</td>\n<td>Return No sub runs since this is a simple workflow.</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code>()</td>\n<td>Check if a file will be overwritten upon processing the inputs.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.tracking.PFTrackingPAMFlow.run\" title=\"dipy.workflows.tracking.PFTrackingPAMFlow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(pam_files,&nbsp;wm_files,&nbsp;gm_files,&nbsp;\u2026[,&nbsp;\u2026])</td>\n<td>Workflow for Particle Filtering Tracking.</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.tracking.PFTrackingPAMFlow.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.PFTrackingPAMFlow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"classmethod\">\n<dt id=\"dipy.workflows.tracking.PFTrackingPAMFlow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.PFTrackingPAMFlow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return A short name for the workflow used to subdivide.</p>\n<p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name.</p>\n<p>For example, a combined workflow with dti reconstruction and csd\nreconstruction might en up with the b0_threshold parameter. Using short\nnames, we will have dti.b0_threshold and csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.tracking.PFTrackingPAMFlow.run\">\n<code class=\"descname\">run</code><span class=\"sig-paren\">(</span><em>pam_files</em>, <em>wm_files</em>, <em>gm_files</em>, <em>csf_files</em>, <em>seeding_files</em>, <em>step_size=0.2</em>, <em>back_tracking_dist=2</em>, <em>front_tracking_dist=1</em>, <em>max_trial=20</em>, <em>particle_count=15</em>, <em>seed_density=1</em>, <em>pmf_threshold=0.1</em>, <em>max_angle=30.0</em>, <em>out_dir=''</em>, <em>out_tractogram='tractogram.trk'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.PFTrackingPAMFlow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Workflow for Particle Filtering Tracking.</p>\n<p>This workflow use a saved peaks and metrics (PAM) file as input.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>pam_files</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><dl class=\"first last docutils\">\n<dt>Path to the peaks and metrics files. This path may contain</dt>\n<dd><p class=\"first last\">wildcards to use multiple masks at once.</p>\n</dd>\n</dl>\n</dd>\n<dt><strong>wm_files</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">Path of White matter for stopping criteria for tracking.</p>\n</dd>\n<dt><strong>gm_files</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">Path of grey matter for stopping criteria for tracking.</p>\n</dd>\n<dt><strong>csf_files</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">Path of cerebrospinal fluid for stopping criteria for tracking.</p>\n</dd>\n<dt><strong>seeding_files</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">A binary image showing where we need to seed for tracking.</p>\n</dd>\n<dt><strong>step_size</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float, optional</span></dt>\n<dd><p class=\"first last\">Step size used for tracking.</p>\n</dd>\n<dt><strong>back_tracking_dist</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float, optional</span></dt>\n<dd><p class=\"first last\">Distance in mm to back track before starting the particle filtering\ntractography. The total particle filtering tractography distance is\nequal to back_tracking_dist + front_tracking_dist.\nBy default this is set to 2 mm.</p>\n</dd>\n<dt><strong>front_tracking_dist</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float, optional</span></dt>\n<dd><p class=\"first last\">Distance in mm to run the particle filtering tractography after the\nthe back track distance. The total particle filtering tractography\ndistance is equal to back_tracking_dist + front_tracking_dist. By\ndefault this is set to 1 mm.</p>\n</dd>\n<dt><strong>max_trial</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int, optional</span></dt>\n<dd><p class=\"first last\">Maximum number of trial for the particle filtering tractography\n(Prevents infinite loops, default=20).</p>\n</dd>\n<dt><strong>particle_count</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int, optional</span></dt>\n<dd><p class=\"first last\">Number of particles to use in the particle filter. (default 15)</p>\n</dd>\n<dt><strong>seed_density</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int, optional</span></dt>\n<dd><dl class=\"first last docutils\">\n<dt>Number of seeds per dimension inside voxel (default 1).</dt>\n<dd><p class=\"first last\">For example, seed_density of 2 means 8 regularly distributed\npoints in the voxel. And seed density of 1 means 1 point at the\ncenter of the voxel.</p>\n</dd>\n</dl>\n</dd>\n<dt><strong>pmf_threshold</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float, optional</span></dt>\n<dd><p class=\"first last\">Threshold for ODF functions. (default 0.1)</p>\n</dd>\n<dt><strong>max_angle</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float, optional</span></dt>\n<dd><p class=\"first last\">Maximum angle between tract segments. This angle can be more\ngenerous (larger) than values typically used with probabilistic\ndirection getters. The angle range is (0, 90)</p>\n</dd>\n<dt><strong>out_dir</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Output directory (default input file directory)</p>\n</dd>\n<dt><strong>out_tractogram</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string, optional</span></dt>\n<dd><p class=\"first last\">Name of the tractogram file to be saved (default \u2018tractogram.trk\u2019)</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">References</p>\n<dl class=\"docutils\">\n<dt>Girard, G., Whittingstall, K., Deriche, R., &amp; Descoteaux, M.</dt>\n<dd>Towards quantitative connectivity analysis: reducing\ntractography biases. NeuroImage, 98, 266-278, 2014..</dd>\n</dl>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"particlefilteringtracking\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.tracking.ParticleFilteringTracking\" title=\"dipy.workflows.tracking.ParticleFilteringTracking\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ParticleFilteringTracking</span></code></a><a class=\"headerlink\" href=\"#particlefilteringtracking\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.tracking.ParticleFilteringTracking\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.tracking.</code><code class=\"descname\">ParticleFilteringTracking</code><span class=\"sig-paren\">(</span><em>direction_getter</em>, <em>tissue_classifier</em>, <em>seeds</em>, <em>affine</em>, <em>step_size</em>, <em>max_cross=None</em>, <em>maxlen=500</em>, <em>pft_back_tracking_dist=2</em>, <em>pft_front_tracking_dist=1</em>, <em>pft_max_trial=20</em>, <em>particle_count=15</em>, <em>return_all=True</em>, <em>random_seed=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.ParticleFilteringTracking\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"../dipy.tracking/#dipy.tracking.local.localtracking.LocalTracking\" title=\"dipy.tracking.local.localtracking.LocalTracking\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.tracking.local.localtracking.LocalTracking</span></code></a></p>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.tracking.ParticleFilteringTracking.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>direction_getter</em>, <em>tissue_classifier</em>, <em>seeds</em>, <em>affine</em>, <em>step_size</em>, <em>max_cross=None</em>, <em>maxlen=500</em>, <em>pft_back_tracking_dist=2</em>, <em>pft_front_tracking_dist=1</em>, <em>pft_max_trial=20</em>, <em>particle_count=15</em>, <em>return_all=True</em>, <em>random_seed=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.ParticleFilteringTracking.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A streamline generator using the particle filtering tractography\nmethod <a class=\"reference internal\" href=\"#rc5e8c566eb0a-1\" id=\"id141\">[1]</a>.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>direction_getter</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">instance of ProbabilisticDirectionGetter</span></dt>\n<dd><p class=\"first last\">Used to get directions for fiber tracking.</p>\n</dd>\n<dt><strong>tissue_classifier</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">instance of ConstrainedTissueClassifier</span></dt>\n<dd><p class=\"first last\">Identifies endpoints and invalid points to inform tracking.</p>\n</dd>\n<dt><strong>seeds</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array (N, 3)</span></dt>\n<dd><p class=\"first last\">Points to seed the tracking. Seed points should be given in point\nspace of the track (see <code class=\"docutils literal notranslate\"><span class=\"pre\">affine</span></code>).</p>\n</dd>\n<dt><strong>affine</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">array (4, 4)</span></dt>\n<dd><p class=\"first last\">Coordinate space for the streamline point with respect to voxel\nindices of input data. This affine can contain scaling, rotational,\nand translational components but should not contain any shearing.\nAn identity matrix can be used to generate streamlines in \u201cvoxel\ncoordinates\u201d as long as isotropic voxels were used to acquire the\ndata.</p>\n</dd>\n<dt><strong>step_size</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float</span></dt>\n<dd><p class=\"first last\">Step size used for tracking.</p>\n</dd>\n<dt><strong>max_cross</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int or None</span></dt>\n<dd><p class=\"first last\">The maximum number of direction to track from each seed in crossing\nvoxels. By default all initial directions are tracked.</p>\n</dd>\n<dt><strong>maxlen</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int</span></dt>\n<dd><p class=\"first last\">Maximum number of steps to track from seed. Used to prevent\ninfinite loops.</p>\n</dd>\n<dt><strong>pft_back_tracking_dist</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float</span></dt>\n<dd><p class=\"first last\">Distance in mm to back track before starting the particle filtering\ntractography. The total particle filtering tractography distance is\nequal to back_tracking_dist + front_tracking_dist.\nBy default this is set to 2 mm.</p>\n</dd>\n<dt><strong>pft_front_tracking_dist</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float</span></dt>\n<dd><p class=\"first last\">Distance in mm to run the particle filtering tractography after the\nthe back track distance. The total particle filtering tractography\ndistance is equal to back_tracking_dist + front_tracking_dist. By\ndefault this is set to 1 mm.</p>\n</dd>\n<dt><strong>pft_max_trial</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int</span></dt>\n<dd><p class=\"first last\">Maximum number of trial for the particle filtering tractography\n(Prevents infinite loops).</p>\n</dd>\n<dt><strong>particle_count</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int</span></dt>\n<dd><p class=\"first last\">Number of particles to use in the particle filter.</p>\n</dd>\n<dt><strong>return_all</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool</span></dt>\n<dd><p class=\"first last\">If true, return all generated streamlines, otherwise only\nstreamlines reaching end points or exiting the image.</p>\n</dd>\n<dt><strong>random_seed</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int</span></dt>\n<dd><p class=\"first last\">The seed for the random seed generator (numpy.random.seed and\nrandom.seed).</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">References</p>\n<table class=\"docutils citation\" frame=\"void\" id=\"rc5e8c566eb0a-1\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\">[1]</td><td><em>(<a class=\"fn-backref\" href=\"#id141\">1</a>, <a class=\"fn-backref\" href=\"#id142\">2</a>)</em> Girard, G., Whittingstall, K., Deriche, R., &amp; Descoteaux, M.\nTowards quantitative connectivity analysis: reducing\ntractography biases. NeuroImage, 98, 266-278, 2014.</td></tr>\n</tbody>\n</table>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"probabilisticdirectiongetter\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.tracking.ProbabilisticDirectionGetter\" title=\"dipy.workflows.tracking.ProbabilisticDirectionGetter\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ProbabilisticDirectionGetter</span></code></a><a class=\"headerlink\" href=\"#probabilisticdirectiongetter\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.tracking.ProbabilisticDirectionGetter\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.tracking.</code><code class=\"descname\">ProbabilisticDirectionGetter</code><a class=\"headerlink\" href=\"#dipy.workflows.tracking.ProbabilisticDirectionGetter\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.direction.closest_peak_direction_getter.PmfGenDirectionGetter</span></code></p>\n<p>Randomly samples direction of a sphere based on probability mass\nfunction (pmf).</p>\n<p>The main constructors for this class are current from_pmf and from_shcoeff.\nThe pmf gives the probability that each direction on the sphere should be\nchosen as the next direction. To get the true pmf from the \u201craw pmf\u201d\ndirections more than <code class=\"docutils literal notranslate\"><span class=\"pre\">max_angle</span></code> degrees from the incoming direction are\nset to 0 and the result is normalized.</p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">from_pmf</span></code></td>\n<td>Constructor for making a DirectionGetter from an array of Pmfs</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">from_shcoeff</span></code></td>\n<td>Probabilistic direction getter from a distribution of directions on the sphere</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">initial_direction</span></code></td>\n<td>Returns best directions at seed location to start tracking.</td>\n</tr>\n</tbody>\n</table>\n<table border=\"1\" class=\"docutils\">\n<colgroup>\n<col width=\"63%\" />\n<col width=\"37%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><strong>get_direction</strong></td>\n<td>&#160;</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.tracking.ProbabilisticDirectionGetter.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.ProbabilisticDirectionGetter.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Direction getter from a pmf generator.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>pmf_gen</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">PmfGen</span></dt>\n<dd><p class=\"first last\">Used to get probability mass function for selecting tracking\ndirections.</p>\n</dd>\n<dt><strong>max_angle</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float, [0, 90]</span></dt>\n<dd><p class=\"first last\">The maximum allowed angle between incoming direction and new\ndirection.</p>\n</dd>\n<dt><strong>sphere</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">Sphere</span></dt>\n<dd><p class=\"first last\">The set of directions to be used for tracking.</p>\n</dd>\n<dt><strong>pmf_threshold</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float [0., 1.]</span></dt>\n<dd><p class=\"first last\">Used to remove direction from the probability mass function for\nselecting the tracking direction.</p>\n</dd>\n<dt><strong>relative_peak_threshold</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float in [0., 1.]</span></dt>\n<dd><p class=\"first last\">Used for extracting initial tracking directions. Passed to\npeak_directions.</p>\n</dd>\n<dt><strong>min_separation_angle</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float in [0, 90]</span></dt>\n<dd><p class=\"first last\">Used for extracting initial tracking directions. Passed to\npeak_directions.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<div class=\"admonition seealso\">\n<p class=\"first admonition-title\">See also</p>\n<p class=\"last\"><a class=\"reference internal\" href=\"../dipy.direction/#dipy.direction.peaks.peak_directions\" title=\"dipy.direction.peaks.peak_directions\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">dipy.direction.peaks.peak_directions</span></code></a></p>\n</div>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"thresholdtissueclassifier\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.tracking.ThresholdTissueClassifier\" title=\"dipy.workflows.tracking.ThresholdTissueClassifier\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ThresholdTissueClassifier</span></code></a><a class=\"headerlink\" href=\"#thresholdtissueclassifier\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.tracking.ThresholdTissueClassifier\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.tracking.</code><code class=\"descname\">ThresholdTissueClassifier</code><a class=\"headerlink\" href=\"#dipy.workflows.tracking.ThresholdTissueClassifier\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.tracking.local.tissue_classifier.TissueClassifier</span></code></p>\n<p># Declarations from tissue_classifier.pxd bellow\ncdef:</p>\n<blockquote>\n<div>double threshold, interp_out_double[1]\ndouble[:]  interp_out_view = interp_out_view\ndouble[:, :, :] metric_map</div></blockquote>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"docutils\">\n<colgroup>\n<col width=\"60%\" />\n<col width=\"40%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><strong>check_point</strong></td>\n<td>&#160;</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.tracking.ThresholdTissueClassifier.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>$self</em>, <em>/</em>, <em>*args</em>, <em>**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.ThresholdTissueClassifier.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize self.  See help(type(self)) for accurate signature.</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"tractogram\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.tracking.Tractogram\" title=\"dipy.workflows.tracking.Tractogram\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Tractogram</span></code></a><a class=\"headerlink\" href=\"#tractogram\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.tracking.Tractogram\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.tracking.</code><code class=\"descname\">Tractogram</code><span class=\"sig-paren\">(</span><em>streamlines=None</em>, <em>data_per_streamline=None</em>, <em>data_per_point=None</em>, <em>affine_to_rasmm=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.Tractogram\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.7)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p>Container for streamlines and their data information.</p>\n<p>Streamlines of a tractogram can be in any coordinate system of your\nchoice as long as you provide the correct <cite>affine_to_rasmm</cite> matrix, at\nconstruction time. When applied to streamlines coordinates, that\ntransformation matrix should bring the streamlines back to world space\n(RAS+ and mm space) <a href=\"#id157\"><span class=\"problematic\" id=\"id143\">[1]_</span></a>.</p>\n<p>Moreover, when streamlines are mapped back to voxel space <a href=\"#id158\"><span class=\"problematic\" id=\"id144\">[2]_</span></a>, a\nstreamline point located at an integer coordinate (i,j,k) is considered\nto be at the center of the corresponding voxel. This is in contrast with\nother conventions where it might have referred to a corner.</p>\n<p class=\"rubric\">References</p>\n<p>[1] <a class=\"reference external\" href=\"http://nipy.org/nibabel/coordinate_systems.html#naming-reference-spaces\">http://nipy.org/nibabel/coordinate_systems.html#naming-reference-spaces</a>\n[2] <a class=\"reference external\" href=\"http://nipy.org/nibabel/coordinate_systems.html#voxel-coordinates-are-in-voxel-space\">http://nipy.org/nibabel/coordinate_systems.html#voxel-coordinates-are-in-voxel-space</a></p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Attributes:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>streamlines</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ArraySequence</span></code> object</span></dt>\n<dd><p class=\"first last\">Sequence of <span class=\"math notranslate nohighlight\">\\(T\\)</span> streamlines. Each streamline is an ndarray of\nshape (<span class=\"math notranslate nohighlight\">\\(N_t\\)</span>, 3) where <span class=\"math notranslate nohighlight\">\\(N_t\\)</span> is the number of points of\nstreamline <span class=\"math notranslate nohighlight\">\\(t\\)</span>.</p>\n</dd>\n<dt><strong>data_per_streamline</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">PerArrayDict</span></code> object</span></dt>\n<dd><p class=\"first last\">Dictionary where the items are (str, 2D array).  Each key represents a\npiece of information <span class=\"math notranslate nohighlight\">\\(i\\)</span> to be kept alongside every streamline, and its\nassociated value is a 2D array of shape (<span class=\"math notranslate nohighlight\">\\(T\\)</span>, <span class=\"math notranslate nohighlight\">\\(P_i\\)</span>) where <span class=\"math notranslate nohighlight\">\\(T\\)</span> is the\nnumber of streamlines and <span class=\"math notranslate nohighlight\">\\(P_i\\)</span> is the number of values to store for\nthat particular piece of information <span class=\"math notranslate nohighlight\">\\(i\\)</span>.</p>\n</dd>\n<dt><strong>data_per_point</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">PerArraySequenceDict</span></code> object</span></dt>\n<dd><p class=\"first last\">Dictionary where the items are (str, <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ArraySequence</span></code>).  Each key\nrepresents a piece of information <span class=\"math notranslate nohighlight\">\\(i\\)</span> to be kept alongside every point\nof every streamline, and its associated value is an iterable of\nndarrays of shape (<span class=\"math notranslate nohighlight\">\\(N_t\\)</span>, <span class=\"math notranslate nohighlight\">\\(M_i\\)</span>) where <span class=\"math notranslate nohighlight\">\\(N_t\\)</span> is the number of points\nfor a particular streamline <span class=\"math notranslate nohighlight\">\\(t\\)</span> and <span class=\"math notranslate nohighlight\">\\(M_i\\)</span> is the number values to store\nfor that particular piece of information <span class=\"math notranslate nohighlight\">\\(i\\)</span>.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.tracking.Tractogram.apply_affine\" title=\"dipy.workflows.tracking.Tractogram.apply_affine\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">apply_affine</span></code></a>(affine[,&nbsp;lazy])</td>\n<td>Applies an affine transformation on the points of each streamline.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.tracking.Tractogram.copy\" title=\"dipy.workflows.tracking.Tractogram.copy\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">copy</span></code></a>()</td>\n<td>Returns a copy of this <a class=\"reference internal\" href=\"#dipy.workflows.tracking.Tractogram\" title=\"dipy.workflows.tracking.Tractogram\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Tractogram</span></code></a> object.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.tracking.Tractogram.extend\" title=\"dipy.workflows.tracking.Tractogram.extend\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">extend</span></code></a>(other)</td>\n<td>Appends the data of another <a class=\"reference internal\" href=\"#dipy.workflows.tracking.Tractogram\" title=\"dipy.workflows.tracking.Tractogram\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Tractogram</span></code></a>.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.tracking.Tractogram.to_world\" title=\"dipy.workflows.tracking.Tractogram.to_world\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">to_world</span></code></a>([lazy])</td>\n<td>Brings the streamlines to world space (i.e.</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.tracking.Tractogram.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>streamlines=None</em>, <em>data_per_streamline=None</em>, <em>data_per_point=None</em>, <em>affine_to_rasmm=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.Tractogram.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>streamlines</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">iterable of ndarrays or <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ArraySequence</span></code>, optional</span></dt>\n<dd><p class=\"first last\">Sequence of <span class=\"math notranslate nohighlight\">\\(T\\)</span> streamlines. Each streamline is an ndarray of\nshape (<span class=\"math notranslate nohighlight\">\\(N_t\\)</span>, 3) where <span class=\"math notranslate nohighlight\">\\(N_t\\)</span> is the number of points of\nstreamline <span class=\"math notranslate nohighlight\">\\(t\\)</span>.</p>\n</dd>\n<dt><strong>data_per_streamline</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">dict of iterable of ndarrays, optional</span></dt>\n<dd><p class=\"first last\">Dictionary where the items are (str, iterable).\nEach key represents an information <span class=\"math notranslate nohighlight\">\\(i\\)</span> to be kept alongside every\nstreamline, and its associated value is an iterable of ndarrays of\nshape (<span class=\"math notranslate nohighlight\">\\(P_i\\)</span>,) where <span class=\"math notranslate nohighlight\">\\(P_i\\)</span> is the number of scalar values to store\nfor that particular information <span class=\"math notranslate nohighlight\">\\(i\\)</span>.</p>\n</dd>\n<dt><strong>data_per_point</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">dict of iterable of ndarrays, optional</span></dt>\n<dd><p class=\"first last\">Dictionary where the items are (str, iterable).\nEach key represents an information <span class=\"math notranslate nohighlight\">\\(i\\)</span> to be kept alongside every\npoint of every streamline, and its associated value is an iterable\nof ndarrays of shape (<span class=\"math notranslate nohighlight\">\\(N_t\\)</span>, <span class=\"math notranslate nohighlight\">\\(M_i\\)</span>) where <span class=\"math notranslate nohighlight\">\\(N_t\\)</span> is the number of\npoints for a particular streamline <span class=\"math notranslate nohighlight\">\\(t\\)</span> and <span class=\"math notranslate nohighlight\">\\(M_i\\)</span> is the number\nscalar values to store for that particular information <span class=\"math notranslate nohighlight\">\\(i\\)</span>.</p>\n</dd>\n<dt><strong>affine_to_rasmm</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">ndarray of shape (4, 4) or None, optional</span></dt>\n<dd><p class=\"first last\">Transformation matrix that brings the streamlines contained in\nthis tractogram to <em>RAS+</em> and <em>mm</em> space where coordinate (0,0,0)\nrefers to the center of the voxel. By default, the streamlines\nare in an unknown space, i.e. affine_to_rasmm is None.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.workflows.tracking.Tractogram.affine_to_rasmm\">\n<code class=\"descname\">affine_to_rasmm</code><a class=\"headerlink\" href=\"#dipy.workflows.tracking.Tractogram.affine_to_rasmm\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Affine bringing streamlines in this tractogram to RAS+mm.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.tracking.Tractogram.apply_affine\">\n<code class=\"descname\">apply_affine</code><span class=\"sig-paren\">(</span><em>affine</em>, <em>lazy=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.Tractogram.apply_affine\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Applies an affine transformation on the points of each streamline.</p>\n<p>If <cite>lazy</cite> is not specified, this is performed <em>in-place</em>.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>affine</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">ndarray of shape (4, 4)</span></dt>\n<dd><p class=\"first last\">Transformation that will be applied to every streamline.</p>\n</dd>\n<dt><strong>lazy</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">{False, True}, optional</span></dt>\n<dd><p class=\"first last\">If True, streamlines are <em>not</em> transformed in-place and a\n<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">LazyTractogram</span></code> object is returned. Otherwise, streamlines\nare modified in-place.</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>tractogram</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\"><a class=\"reference internal\" href=\"#dipy.workflows.tracking.Tractogram\" title=\"dipy.workflows.tracking.Tractogram\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Tractogram</span></code></a> or <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">LazyTractogram</span></code> object</span></dt>\n<dd><p class=\"first last\">Tractogram where the streamlines have been transformed according\nto the given affine transformation. If the <cite>lazy</cite> option is true,\nit returns a <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">LazyTractogram</span></code> object, otherwise it returns a\nreference to this <a class=\"reference internal\" href=\"#dipy.workflows.tracking.Tractogram\" title=\"dipy.workflows.tracking.Tractogram\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Tractogram</span></code></a> object with updated\nstreamlines.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.tracking.Tractogram.copy\">\n<code class=\"descname\">copy</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.Tractogram.copy\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns a copy of this <a class=\"reference internal\" href=\"#dipy.workflows.tracking.Tractogram\" title=\"dipy.workflows.tracking.Tractogram\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Tractogram</span></code></a> object.</p>\n</dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.workflows.tracking.Tractogram.data_per_point\">\n<code class=\"descname\">data_per_point</code><a class=\"headerlink\" href=\"#dipy.workflows.tracking.Tractogram.data_per_point\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.workflows.tracking.Tractogram.data_per_streamline\">\n<code class=\"descname\">data_per_streamline</code><a class=\"headerlink\" href=\"#dipy.workflows.tracking.Tractogram.data_per_streamline\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.tracking.Tractogram.extend\">\n<code class=\"descname\">extend</code><span class=\"sig-paren\">(</span><em>other</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.Tractogram.extend\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Appends the data of another <a class=\"reference internal\" href=\"#dipy.workflows.tracking.Tractogram\" title=\"dipy.workflows.tracking.Tractogram\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Tractogram</span></code></a>.</p>\n<p>Data that will be appended includes the streamlines and the content\nof both dictionaries <cite>data_per_streamline</cite> and <cite>data_per_point</cite>.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>other</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\"><a class=\"reference internal\" href=\"#dipy.workflows.tracking.Tractogram\" title=\"dipy.workflows.tracking.Tractogram\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Tractogram</span></code></a> object</span></dt>\n<dd><p class=\"first last\">Its data will be appended to the data of this tractogram.</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>None</strong></dt>\n<dd></dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">Notes</p>\n<p>The entries in both dictionaries <cite>self.data_per_streamline</cite> and\n<cite>self.data_per_point</cite> must match respectively those contained in\nthe other tractogram.</p>\n</dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.workflows.tracking.Tractogram.streamlines\">\n<code class=\"descname\">streamlines</code><a class=\"headerlink\" href=\"#dipy.workflows.tracking.Tractogram.streamlines\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.tracking.Tractogram.to_world\">\n<code class=\"descname\">to_world</code><span class=\"sig-paren\">(</span><em>lazy=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.Tractogram.to_world\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Brings the streamlines to world space (i.e. RAS+ and mm).</p>\n<p>If <cite>lazy</cite> is not specified, this is performed <em>in-place</em>.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>lazy</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">{False, True}, optional</span></dt>\n<dd><p class=\"first last\">If True, streamlines are <em>not</em> transformed in-place and a\n<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">LazyTractogram</span></code> object is returned. Otherwise, streamlines\nare modified in-place.</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>tractogram</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\"><a class=\"reference internal\" href=\"#dipy.workflows.tracking.Tractogram\" title=\"dipy.workflows.tracking.Tractogram\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Tractogram</span></code></a> or <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">LazyTractogram</span></code> object</span></dt>\n<dd><p class=\"first last\">Tractogram where the streamlines have been sent to world space.\nIf the <cite>lazy</cite> option is true, it returns a <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">LazyTractogram</span></code>\nobject, otherwise it returns a reference to this\n<a class=\"reference internal\" href=\"#dipy.workflows.tracking.Tractogram\" title=\"dipy.workflows.tracking.Tractogram\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Tractogram</span></code></a> object with updated streamlines.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id145\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.tracking.Workflow\" title=\"dipy.workflows.tracking.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a><a class=\"headerlink\" href=\"#id145\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.tracking.Workflow\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.tracking.</code><code class=\"descname\">Workflow</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.Workflow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.7)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.tracking.Workflow.get_io_iterator\" title=\"dipy.workflows.tracking.Workflow.get_io_iterator\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code></a>()</td>\n<td>Create an iterator for IO.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.tracking.Workflow.get_short_name\" title=\"dipy.workflows.tracking.Workflow.get_short_name\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code></a>()</td>\n<td>Return A short name for the workflow used to subdivide.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.tracking.Workflow.get_sub_runs\" title=\"dipy.workflows.tracking.Workflow.get_sub_runs\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code></a>()</td>\n<td>Return No sub runs since this is a simple workflow.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.tracking.Workflow.manage_output_overwrite\" title=\"dipy.workflows.tracking.Workflow.manage_output_overwrite\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code></a>()</td>\n<td>Check if a file will be overwritten upon processing the inputs.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.tracking.Workflow.run\" title=\"dipy.workflows.tracking.Workflow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(*args,&nbsp;**kwargs)</td>\n<td>Execute the workflow.</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.tracking.Workflow.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.Workflow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.tracking.Workflow.get_io_iterator\">\n<code class=\"descname\">get_io_iterator</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.Workflow.get_io_iterator\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Create an iterator for IO.</p>\n<p>Use a couple of inspection tricks to build an IOIterator using the\nprevious frame (values of local variables and other contextuals) and\nthe run method\u2019s docstring.</p>\n</dd></dl>\n\n<dl class=\"classmethod\">\n<dt id=\"dipy.workflows.tracking.Workflow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.Workflow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return A short name for the workflow used to subdivide.</p>\n<p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name.</p>\n<p>For example, a combined workflow with dti reconstruction and csd\nreconstruction might en up with the b0_threshold parameter. Using short\nnames, we will have dti.b0_threshold and csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.tracking.Workflow.get_sub_runs\">\n<code class=\"descname\">get_sub_runs</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.Workflow.get_sub_runs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return No sub runs since this is a simple workflow.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.tracking.Workflow.manage_output_overwrite\">\n<code class=\"descname\">manage_output_overwrite</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.Workflow.manage_output_overwrite\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Check if a file will be overwritten upon processing the inputs.</p>\n<p>If it is bound to happen, an action is taken depending on\nself._force_overwrite (or \u2013force via command line). A log message is\noutput independently of the outcome to tell the user something\nhappened.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.tracking.Workflow.run\">\n<code class=\"descname\">run</code><span class=\"sig-paren\">(</span><em>*args</em>, <em>**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.Workflow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Execute the workflow.</p>\n<p>Since this is an abstract class, raise exception if this code is\nreached (not impletemented in child class or literally called on this\nclass)</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id146\">\n<h3>load_nifti<a class=\"headerlink\" href=\"#id146\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.tracking.load_nifti\">\n<code class=\"descclassname\">dipy.workflows.tracking.</code><code class=\"descname\">load_nifti</code><span class=\"sig-paren\">(</span><em>fname</em>, <em>return_img=False</em>, <em>return_voxsize=False</em>, <em>return_coords=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.load_nifti\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</div>\n<div class=\"section\" id=\"load-peaks\">\n<h3>load_peaks<a class=\"headerlink\" href=\"#load-peaks\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.tracking.load_peaks\">\n<code class=\"descclassname\">dipy.workflows.tracking.</code><code class=\"descname\">load_peaks</code><span class=\"sig-paren\">(</span><em>fname</em>, <em>verbose=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.load_peaks\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Load a PeaksAndMetrics HDF5 file (PAM5)</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>fname</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">Filename of PAM5 file.</p>\n</dd>\n<dt><strong>verbose</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool</span></dt>\n<dd><p class=\"first last\">Print summary information about the loaded file.</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>pam</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">PeaksAndMetrics object</span></dt>\n<dd></dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"save\">\n<h3>save<a class=\"headerlink\" href=\"#save\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.tracking.save\">\n<code class=\"descclassname\">dipy.workflows.tracking.</code><code class=\"descname\">save</code><span class=\"sig-paren\">(</span><em>tractogram</em>, <em>filename</em>, <em>**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.save\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Saves a tractogram to a file.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>tractogram</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\"><a class=\"reference internal\" href=\"#dipy.workflows.tracking.Tractogram\" title=\"dipy.workflows.tracking.Tractogram\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Tractogram</span></code></a> object or <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TractogramFile</span></code> object</span></dt>\n<dd><p class=\"first last\">If <a class=\"reference internal\" href=\"#dipy.workflows.tracking.Tractogram\" title=\"dipy.workflows.tracking.Tractogram\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Tractogram</span></code></a> object, the file format will be guessed from\n<cite>filename</cite> and a <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TractogramFile</span></code> object will be created using\nprovided keyword arguments.\nIf <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TractogramFile</span></code> object, the file format is known and will\nbe used to save its content to <cite>filename</cite>.</p>\n</dd>\n<dt><strong>filename</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">str</span></dt>\n<dd><p class=\"first last\">Name of the file where the tractogram will be saved.</p>\n</dd>\n<dt><strong>**kwargs</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">keyword arguments</span></dt>\n<dd><p class=\"first last\">Keyword arguments passed to <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TractogramFile</span></code> constructor.\nShould not be specified if <cite>tractogram</cite> is already an instance of\n<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TractogramFile</span></code>.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"horizonflow\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.viz.HorizonFlow\" title=\"dipy.workflows.viz.HorizonFlow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HorizonFlow</span></code></a><a class=\"headerlink\" href=\"#horizonflow\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.viz.HorizonFlow\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.viz.</code><code class=\"descname\">HorizonFlow</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.viz.HorizonFlow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow\" title=\"dipy.workflows.workflow.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.workflows.workflow.Workflow</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code>()</td>\n<td>Create an iterator for IO.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.viz.HorizonFlow.get_short_name\" title=\"dipy.workflows.viz.HorizonFlow.get_short_name\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code></a>()</td>\n<td>Return A short name for the workflow used to subdivide.</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code>()</td>\n<td>Return No sub runs since this is a simple workflow.</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code>()</td>\n<td>Check if a file will be overwritten upon processing the inputs.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.viz.HorizonFlow.run\" title=\"dipy.workflows.viz.HorizonFlow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(input_files[,&nbsp;cluster,&nbsp;cluster_thr,&nbsp;\u2026])</td>\n<td>Highly interactive visualization - invert the Horizon!</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.viz.HorizonFlow.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.viz.HorizonFlow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"classmethod\">\n<dt id=\"dipy.workflows.viz.HorizonFlow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.viz.HorizonFlow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return A short name for the workflow used to subdivide.</p>\n<p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name.</p>\n<p>For example, a combined workflow with dti reconstruction and csd\nreconstruction might en up with the b0_threshold parameter. Using short\nnames, we will have dti.b0_threshold and csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.viz.HorizonFlow.run\">\n<code class=\"descname\">run</code><span class=\"sig-paren\">(</span><em>input_files</em>, <em>cluster=False</em>, <em>cluster_thr=15.0</em>, <em>random_colors=False</em>, <em>length_lt=1000</em>, <em>length_gt=0</em>, <em>clusters_lt=100000000</em>, <em>clusters_gt=0</em>, <em>native_coords=False</em>, <em>stealth=False</em>, <em>out_dir=''</em>, <em>out_stealth_png='tmp.png'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.viz.HorizonFlow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Highly interactive visualization - invert the Horizon!</p>\n<p>Interact with any number of .trk, .tck or .dpy tractograms and anatomy\nfiles .nii or .nii.gz. Cluster streamlines on loading.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>input_files</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">variable string</span></dt>\n<dd></dd>\n<dt><strong>cluster</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool</span></dt>\n<dd></dd>\n<dt><strong>cluster_thr</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float</span></dt>\n<dd></dd>\n<dt><strong>random_colors</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool</span></dt>\n<dd></dd>\n<dt><strong>length_lt</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float</span></dt>\n<dd></dd>\n<dt><strong>length_gt</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float</span></dt>\n<dd></dd>\n<dt><strong>clusters_lt</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int</span></dt>\n<dd></dd>\n<dt><strong>clusters_gt</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int</span></dt>\n<dd></dd>\n<dt><strong>native_coords</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool</span></dt>\n<dd></dd>\n<dt><strong>stealth</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool</span></dt>\n<dd></dd>\n<dt><strong>out_dir</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd></dd>\n<dt><strong>out_stealth_png</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd></dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">References</p>\n<table class=\"docutils citation\" frame=\"void\" id=\"r1c3f2df048ff-horizon-ismrm19\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\"><a class=\"fn-backref\" href=\"#id147\">[Horizon_ISMRM19]</a></td><td>Garyfallidis E., M-A. Cote, B.Q. Chandio,\nS. Fadnavis, J. Guaje, R. Aggarwal, E. St-Onge, K.S. Juneja,\nS. Koudoro, D. Reagan, DIPY Horizon: fast, modular, unified and\nadaptive visualization, Proceedings of: International Society of\nMagnetic Resonance in Medicine (ISMRM), Montreal, Canada, 2019.</td></tr>\n</tbody>\n</table>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id148\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.viz.Workflow\" title=\"dipy.workflows.viz.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a><a class=\"headerlink\" href=\"#id148\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.viz.Workflow\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.viz.</code><code class=\"descname\">Workflow</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.viz.Workflow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.7)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.viz.Workflow.get_io_iterator\" title=\"dipy.workflows.viz.Workflow.get_io_iterator\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code></a>()</td>\n<td>Create an iterator for IO.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.viz.Workflow.get_short_name\" title=\"dipy.workflows.viz.Workflow.get_short_name\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code></a>()</td>\n<td>Return A short name for the workflow used to subdivide.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.viz.Workflow.get_sub_runs\" title=\"dipy.workflows.viz.Workflow.get_sub_runs\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code></a>()</td>\n<td>Return No sub runs since this is a simple workflow.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.viz.Workflow.manage_output_overwrite\" title=\"dipy.workflows.viz.Workflow.manage_output_overwrite\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code></a>()</td>\n<td>Check if a file will be overwritten upon processing the inputs.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.viz.Workflow.run\" title=\"dipy.workflows.viz.Workflow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(*args,&nbsp;**kwargs)</td>\n<td>Execute the workflow.</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.viz.Workflow.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.viz.Workflow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.viz.Workflow.get_io_iterator\">\n<code class=\"descname\">get_io_iterator</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.viz.Workflow.get_io_iterator\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Create an iterator for IO.</p>\n<p>Use a couple of inspection tricks to build an IOIterator using the\nprevious frame (values of local variables and other contextuals) and\nthe run method\u2019s docstring.</p>\n</dd></dl>\n\n<dl class=\"classmethod\">\n<dt id=\"dipy.workflows.viz.Workflow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.viz.Workflow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return A short name for the workflow used to subdivide.</p>\n<p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name.</p>\n<p>For example, a combined workflow with dti reconstruction and csd\nreconstruction might en up with the b0_threshold parameter. Using short\nnames, we will have dti.b0_threshold and csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.viz.Workflow.get_sub_runs\">\n<code class=\"descname\">get_sub_runs</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.viz.Workflow.get_sub_runs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return No sub runs since this is a simple workflow.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.viz.Workflow.manage_output_overwrite\">\n<code class=\"descname\">manage_output_overwrite</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.viz.Workflow.manage_output_overwrite\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Check if a file will be overwritten upon processing the inputs.</p>\n<p>If it is bound to happen, an action is taken depending on\nself._force_overwrite (or \u2013force via command line). A log message is\noutput independently of the outcome to tell the user something\nhappened.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.viz.Workflow.run\">\n<code class=\"descname\">run</code><span class=\"sig-paren\">(</span><em>*args</em>, <em>**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.viz.Workflow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Execute the workflow.</p>\n<p>Since this is an abstract class, raise exception if this code is\nreached (not impletemented in child class or literally called on this\nclass)</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"horizon\">\n<h3>horizon<a class=\"headerlink\" href=\"#horizon\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.viz.horizon\">\n<code class=\"descclassname\">dipy.workflows.viz.</code><code class=\"descname\">horizon</code><span class=\"sig-paren\">(</span><em>tractograms</em>, <em>images</em>, <em>cluster</em>, <em>cluster_thr</em>, <em>random_colors</em>, <em>length_lt</em>, <em>length_gt</em>, <em>clusters_lt</em>, <em>clusters_gt</em>, <em>world_coords=True</em>, <em>interactive=True</em>, <em>out_png='tmp.png'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.viz.horizon\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Highly interactive visualization - invert the Horizon!</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>tractograms</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">sequence</span></dt>\n<dd><p class=\"first last\">Sequence of Streamlines objects</p>\n</dd>\n<dt><strong>images</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">sequence of tuples</span></dt>\n<dd><p class=\"first last\">Each tuple contains data and affine</p>\n</dd>\n<dt><strong>cluster</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool</span></dt>\n<dd><p class=\"first last\">Enable QuickBundlesX clustering</p>\n</dd>\n<dt><strong>cluster_thr</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float</span></dt>\n<dd><p class=\"first last\">Distance threshold used for clustering</p>\n</dd>\n<dt><strong>random_colors</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool</span></dt>\n<dd></dd>\n<dt><strong>length_lt</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float</span></dt>\n<dd></dd>\n<dt><strong>length_gt</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">float</span></dt>\n<dd></dd>\n<dt><strong>clusters_lt</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int</span></dt>\n<dd></dd>\n<dt><strong>clusters_gt</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">int</span></dt>\n<dd></dd>\n<dt><strong>world_coords</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool</span></dt>\n<dd></dd>\n<dt><strong>interactive</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool</span></dt>\n<dd></dd>\n<dt><strong>out_png</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd></dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n<p class=\"rubric\">References</p>\n<table class=\"docutils citation\" frame=\"void\" id=\"re42ff0d3eae3-horizon-ismrm19\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\"><a class=\"fn-backref\" href=\"#id149\">[Horizon_ISMRM19]</a></td><td>Garyfallidis E., M-A. Cote, B.Q. Chandio,\nS. Fadnavis, J. Guaje, R. Aggarwal, E. St-Onge, K.S. Juneja,\nS. Koudoro, D. Reagan, DIPY Horizon: fast, modular, unified and\nadaptive visualization, Proceedings of: International Society of\nMagnetic Resonance in Medicine (ISMRM), Montreal, Canada, 2019.</td></tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id150\">\n<h3>load_nifti<a class=\"headerlink\" href=\"#id150\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.viz.load_nifti\">\n<code class=\"descclassname\">dipy.workflows.viz.</code><code class=\"descname\">load_nifti</code><span class=\"sig-paren\">(</span><em>fname</em>, <em>return_img=False</em>, <em>return_voxsize=False</em>, <em>return_coords=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.viz.load_nifti\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</div>\n<div class=\"section\" id=\"load-tractogram\">\n<h3>load_tractogram<a class=\"headerlink\" href=\"#load-tractogram\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.viz.load_tractogram\">\n<code class=\"descclassname\">dipy.workflows.viz.</code><code class=\"descname\">load_tractogram</code><span class=\"sig-paren\">(</span><em>filename</em>, <em>lazy_load=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.viz.load_tractogram\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Loads tractogram files (<a href=\"#id151\"><span class=\"problematic\" id=\"id152\">*</span></a>.tck)</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first docutils\">\n<dt><strong>filename</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">str</span></dt>\n<dd><p class=\"first last\">input trk filename</p>\n</dd>\n<dt><strong>lazy_load</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">{False, True}, optional</span></dt>\n<dd><p class=\"first last\">If True, load streamlines in a lazy manner i.e. they will not be kept\nin memory and only be loaded when needed.\nOtherwise, load all streamlines in memory.</p>\n</dd>\n</dl>\n</td>\n</tr>\n<tr class=\"field-even field\"><th class=\"field-name\">Returns:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>streamlines</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">list of 2D arrays</span></dt>\n<dd><p class=\"first last\">Each 2D array represents a sequence of 3D points (points, 3).</p>\n</dd>\n<dt><strong>hdr</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">dict</span></dt>\n<dd><p class=\"first last\">header from a trk file</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"pjoin\">\n<h3>pjoin<a class=\"headerlink\" href=\"#pjoin\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.viz.pjoin\">\n<code class=\"descclassname\">dipy.workflows.viz.</code><code class=\"descname\">pjoin</code><span class=\"sig-paren\">(</span><em>a</em>, <em>*p</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.viz.pjoin\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Join two or more pathname components, inserting \u2018/\u2019 as needed.\nIf any component is an absolute path, all previous path components\nwill be discarded.  An empty last part will result in a path that\nends with a separator.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id153\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow\" title=\"dipy.workflows.workflow.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a><a class=\"headerlink\" href=\"#id153\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.workflow.Workflow\">\n<em class=\"property\">class </em><code class=\"descclassname\">dipy.workflows.workflow.</code><code class=\"descname\">Workflow</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.workflow.Workflow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.7)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table border=\"1\" class=\"longtable docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<tbody valign=\"top\">\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow.get_io_iterator\" title=\"dipy.workflows.workflow.Workflow.get_io_iterator\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code></a>()</td>\n<td>Create an iterator for IO.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow.get_short_name\" title=\"dipy.workflows.workflow.Workflow.get_short_name\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code></a>()</td>\n<td>Return A short name for the workflow used to subdivide.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow.get_sub_runs\" title=\"dipy.workflows.workflow.Workflow.get_sub_runs\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code></a>()</td>\n<td>Return No sub runs since this is a simple workflow.</td>\n</tr>\n<tr class=\"row-even\"><td><a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow.manage_output_overwrite\" title=\"dipy.workflows.workflow.Workflow.manage_output_overwrite\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code></a>()</td>\n<td>Check if a file will be overwritten upon processing the inputs.</td>\n</tr>\n<tr class=\"row-odd\"><td><a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow.run\" title=\"dipy.workflows.workflow.Workflow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(*args,&nbsp;**kwargs)</td>\n<td>Execute the workflow.</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.workflow.Workflow.__init__\">\n<code class=\"descname\">__init__</code><span class=\"sig-paren\">(</span><em>output_strategy='absolute'</em>, <em>mix_names=False</em>, <em>force=False</em>, <em>skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.workflow.Workflow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.workflow.Workflow.get_io_iterator\">\n<code class=\"descname\">get_io_iterator</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.workflow.Workflow.get_io_iterator\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Create an iterator for IO.</p>\n<p>Use a couple of inspection tricks to build an IOIterator using the\nprevious frame (values of local variables and other contextuals) and\nthe run method\u2019s docstring.</p>\n</dd></dl>\n\n<dl class=\"classmethod\">\n<dt id=\"dipy.workflows.workflow.Workflow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.workflow.Workflow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return A short name for the workflow used to subdivide.</p>\n<p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name.</p>\n<p>For example, a combined workflow with dti reconstruction and csd\nreconstruction might en up with the b0_threshold parameter. Using short\nnames, we will have dti.b0_threshold and csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.workflow.Workflow.get_sub_runs\">\n<code class=\"descname\">get_sub_runs</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.workflow.Workflow.get_sub_runs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return No sub runs since this is a simple workflow.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.workflow.Workflow.manage_output_overwrite\">\n<code class=\"descname\">manage_output_overwrite</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.workflow.Workflow.manage_output_overwrite\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Check if a file will be overwritten upon processing the inputs.</p>\n<p>If it is bound to happen, an action is taken depending on\nself._force_overwrite (or \u2013force via command line). A log message is\noutput independently of the outcome to tell the user something\nhappened.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.workflow.Workflow.run\">\n<code class=\"descname\">run</code><span class=\"sig-paren\">(</span><em>*args</em>, <em>**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.workflow.Workflow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Execute the workflow.</p>\n<p>Since this is an abstract class, raise exception if this code is\nreached (not impletemented in child class or literally called on this\nclass)</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id154\">\n<h3><a href=\"#id159\"><span class=\"problematic\" id=\"id160\">io_iterator_</span></a><a class=\"headerlink\" href=\"#id154\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.workflow.io_iterator_\">\n<code class=\"descclassname\">dipy.workflows.workflow.</code><code class=\"descname\">io_iterator_</code><span class=\"sig-paren\">(</span><em>frame</em>, <em>fnc</em>, <em>output_strategy='absolute'</em>, <em>mix_names=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.workflow.io_iterator_\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Creates an IOIterator using introspection.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><dl class=\"first last docutils\">\n<dt><strong>frame</strong> <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">frameobject</span></dt>\n<dd><blockquote class=\"first\">\n<div><p>Contains the info about the current local variables values.</p>\n</div></blockquote>\n<dl class=\"last docutils\">\n<dt>fnc <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">function</span></dt>\n<dd><p class=\"first last\">The function to inspect</p>\n</dd>\n<dt>output_strategy <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">string</span></dt>\n<dd><p class=\"first last\">Controls the behavior of the IOIterator for output paths.</p>\n</dd>\n<dt>mix_names <span class=\"classifier-delimiter\">:</span> <span class=\"classifier\">bool</span></dt>\n<dd><p class=\"first last\">Whether or not to append a mix of input names at the beginning.</p>\n</dd>\n</dl>\n</dd>\n<dt><strong>Returns</strong></dt>\n<dd></dd>\n<dt><strong>\u2014\u2014-</strong></dt>\n<dd><p class=\"first last\">Properly instantiated IOIterator object.</p>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</dd></dl>\n\n</div>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["reference/dipy.viz", "<code class=\"docutils literal notranslate\"><span class=\"pre\">viz</span></code>", "P", "previous"]], "sourcename": "reference/dipy.workflows.rst.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\"><code class=\"docutils literal notranslate\"><span class=\"pre\">workflows</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#module-dipy.workflows.align\">Module: <code class=\"docutils literal notranslate\"><span class=\"pre\">workflows.align</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.workflows.base\">Module: <code class=\"docutils literal notranslate\"><span class=\"pre\">workflows.base</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.workflows.combined_workflow\">Module: <code class=\"docutils literal notranslate\"><span class=\"pre\">workflows.combined_workflow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.workflows.denoise\">Module: <code class=\"docutils literal notranslate\"><span class=\"pre\">workflows.denoise</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.workflows.docstring_parser\">Module: <code class=\"docutils literal notranslate\"><span class=\"pre\">workflows.docstring_parser</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.workflows.flow_runner\">Module: <code class=\"docutils literal notranslate\"><span class=\"pre\">workflows.flow_runner</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.workflows.io\">Module: <code class=\"docutils literal notranslate\"><span class=\"pre\">workflows.io</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.workflows.mask\">Module: <code class=\"docutils literal notranslate\"><span class=\"pre\">workflows.mask</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.workflows.multi_io\">Module: <code class=\"docutils literal notranslate\"><span class=\"pre\">workflows.multi_io</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.workflows.reconst\">Module: <code class=\"docutils literal notranslate\"><span class=\"pre\">workflows.reconst</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.workflows.segment\">Module: <code class=\"docutils literal notranslate\"><span class=\"pre\">workflows.segment</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.workflows.stats\">Module: <code class=\"docutils literal notranslate\"><span class=\"pre\">workflows.stats</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.workflows.tracking\">Module: <code class=\"docutils literal notranslate\"><span class=\"pre\">workflows.tracking</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.workflows.viz\">Module: <code class=\"docutils literal notranslate\"><span class=\"pre\">workflows.viz</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.workflows.workflow\">Module: <code class=\"docutils literal notranslate\"><span class=\"pre\">workflows.workflow</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#affinemap\"><code class=\"docutils literal notranslate\"><span class=\"pre\">AffineMap</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#affineregistration\"><code class=\"docutils literal notranslate\"><span class=\"pre\">AffineRegistration</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#affinetransform3d\"><code class=\"docutils literal notranslate\"><span class=\"pre\">AffineTransform3D</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#applytransformflow\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ApplyTransformFlow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#ccmetric\"><code class=\"docutils literal notranslate\"><span class=\"pre\">CCMetric</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#diffeomorphicmap\"><code class=\"docutils literal notranslate\"><span class=\"pre\">DiffeomorphicMap</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#emmetric\"><code class=\"docutils literal notranslate\"><span class=\"pre\">EMMetric</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#imageregistrationflow\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ImageRegistrationFlow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#mutualinformationmetric\"><code class=\"docutils literal notranslate\"><span class=\"pre\">MutualInformationMetric</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#resliceflow\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ResliceFlow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#rigidtransform3d\"><code class=\"docutils literal notranslate\"><span class=\"pre\">RigidTransform3D</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#ssdmetric\"><code class=\"docutils literal notranslate\"><span class=\"pre\">SSDMetric</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#slrwithqbxflow\"><code class=\"docutils literal notranslate\"><span class=\"pre\">SlrWithQbxFlow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#symmetricdiffeomorphicregistration\"><code class=\"docutils literal notranslate\"><span class=\"pre\">SymmetricDiffeomorphicRegistration</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#synregistrationflow\"><code class=\"docutils literal notranslate\"><span class=\"pre\">SynRegistrationFlow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#translationtransform3d\"><code class=\"docutils literal notranslate\"><span class=\"pre\">TranslationTransform3D</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#workflow\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#check-dimensions\">check_dimensions</a></li>\n<li><a class=\"reference internal\" href=\"#load-nifti\">load_nifti</a></li>\n<li><a class=\"reference internal\" href=\"#load-trk\">load_trk</a></li>\n<li><a class=\"reference internal\" href=\"#reslice\">reslice</a></li>\n<li><a class=\"reference internal\" href=\"#save-nifti\">save_nifti</a></li>\n<li><a class=\"reference internal\" href=\"#save-qa-metric\">save_qa_metric</a></li>\n<li><a class=\"reference internal\" href=\"#slr-with-qbx\">slr_with_qbx</a></li>\n<li><a class=\"reference internal\" href=\"#transform-centers-of-mass\">transform_centers_of_mass</a></li>\n<li><a class=\"reference internal\" href=\"#transform-streamlines\">transform_streamlines</a></li>\n<li><a class=\"reference internal\" href=\"#introspectiveargumentparser\"><code class=\"docutils literal notranslate\"><span class=\"pre\">IntrospectiveArgumentParser</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#numpydocstring\"><code class=\"docutils literal notranslate\"><span class=\"pre\">NumpyDocString</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#get-args-default\">get_args_default</a></li>\n<li><a class=\"reference internal\" href=\"#combinedworkflow\"><code class=\"docutils literal notranslate\"><span class=\"pre\">CombinedWorkflow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#id23\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#iteritems\">iteritems</a></li>\n<li><a class=\"reference internal\" href=\"#nlmeansflow\"><code class=\"docutils literal notranslate\"><span class=\"pre\">NLMeansFlow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#id24\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#estimate-sigma\">estimate_sigma</a></li>\n<li><a class=\"reference internal\" href=\"#id25\">load_nifti</a></li>\n<li><a class=\"reference internal\" href=\"#nlmeans\">nlmeans</a></li>\n<li><a class=\"reference internal\" href=\"#id27\">save_nifti</a></li>\n<li><a class=\"reference internal\" href=\"#id28\"><code class=\"docutils literal notranslate\"><span class=\"pre\">NumpyDocString</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#reader\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Reader</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dedent-lines\">dedent_lines</a></li>\n<li><a class=\"reference internal\" href=\"#warn\">warn</a></li>\n<li><a class=\"reference internal\" href=\"#id29\"><code class=\"docutils literal notranslate\"><span class=\"pre\">IntrospectiveArgumentParser</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#get-level\">get_level</a></li>\n<li><a class=\"reference internal\" href=\"#id30\">iteritems</a></li>\n<li><a class=\"reference internal\" href=\"#run-flow\">run_flow</a></li>\n<li><a class=\"reference internal\" href=\"#ioinfoflow\"><code class=\"docutils literal notranslate\"><span class=\"pre\">IoInfoFlow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#id31\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#id32\">load_nifti</a></li>\n<li><a class=\"reference internal\" href=\"#maskflow\"><code class=\"docutils literal notranslate\"><span class=\"pre\">MaskFlow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#id33\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#id34\">load_nifti</a></li>\n<li><a class=\"reference internal\" href=\"#id35\">save_nifti</a></li>\n<li><a class=\"reference internal\" href=\"#ioiterator\"><code class=\"docutils literal notranslate\"><span class=\"pre\">IOIterator</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#basename-without-extension\">basename_without_extension</a></li>\n<li><a class=\"reference internal\" href=\"#common-start\">common_start</a></li>\n<li><a class=\"reference internal\" href=\"#concatenate-inputs\">concatenate_inputs</a></li>\n<li><a class=\"reference internal\" href=\"#connect-output-paths\">connect_output_paths</a></li>\n<li><a class=\"reference internal\" href=\"#id36\">get_args_default</a></li>\n<li><a class=\"reference internal\" href=\"#glob\">glob</a></li>\n<li><a class=\"reference internal\" href=\"#io-iterator\">io_iterator</a></li>\n<li><a class=\"reference internal\" href=\"#id37\">io_iterator_</a></li>\n<li><a class=\"reference internal\" href=\"#slash-to-under\">slash_to_under</a></li>\n<li><a class=\"reference internal\" href=\"#constrainedsphericaldeconvmodel\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ConstrainedSphericalDeconvModel</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#csaodfmodel\"><code class=\"docutils literal notranslate\"><span class=\"pre\">CsaOdfModel</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#diffusionkurtosismodel\"><code class=\"docutils literal notranslate\"><span class=\"pre\">DiffusionKurtosisModel</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#reconstcsaflow\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ReconstCSAFlow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#reconstcsdflow\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ReconstCSDFlow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#reconstdkiflow\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ReconstDkiFlow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#reconstdtiflow\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ReconstDtiFlow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#reconstivimflow\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ReconstIvimFlow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#reconstmapmriflow\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ReconstMAPMRIFlow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#tensormodel\"><code class=\"docutils literal notranslate\"><span class=\"pre\">TensorModel</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#id75\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#ivimmodel\">IvimModel</a></li>\n<li><a class=\"reference internal\" href=\"#auto-response\">auto_response</a></li>\n<li><a class=\"reference internal\" href=\"#axial-diffusivity\">axial_diffusivity</a></li>\n<li><a class=\"reference internal\" href=\"#color-fa\">color_fa</a></li>\n<li><a class=\"reference internal\" href=\"#fractional-anisotropy\">fractional_anisotropy</a></li>\n<li><a class=\"reference internal\" href=\"#geodesic-anisotropy\">geodesic_anisotropy</a></li>\n<li><a class=\"reference internal\" href=\"#get-mode\">get_mode</a></li>\n<li><a class=\"reference internal\" href=\"#get-sphere\">get_sphere</a></li>\n<li><a class=\"reference internal\" href=\"#gradient-table\">gradient_table</a></li>\n<li><a class=\"reference internal\" href=\"#literal-eval\">literal_eval</a></li>\n<li><a class=\"reference internal\" href=\"#id93\">load_nifti</a></li>\n<li><a class=\"reference internal\" href=\"#lower-triangular\">lower_triangular</a></li>\n<li><a class=\"reference internal\" href=\"#mean-diffusivity\">mean_diffusivity</a></li>\n<li><a class=\"reference internal\" href=\"#peaks-from-model\">peaks_from_model</a></li>\n<li><a class=\"reference internal\" href=\"#peaks-to-niftis\">peaks_to_niftis</a></li>\n<li><a class=\"reference internal\" href=\"#radial-diffusivity\">radial_diffusivity</a></li>\n<li><a class=\"reference internal\" href=\"#read-bvals-bvecs\">read_bvals_bvecs</a></li>\n<li><a class=\"reference internal\" href=\"#id98\">save_nifti</a></li>\n<li><a class=\"reference internal\" href=\"#save-peaks\">save_peaks</a></li>\n<li><a class=\"reference internal\" href=\"#split-dki-param\">split_dki_param</a></li>\n<li><a class=\"reference internal\" href=\"#id99\">warn</a></li>\n<li><a class=\"reference internal\" href=\"#labelsbundlesflow\"><code class=\"docutils literal notranslate\"><span class=\"pre\">LabelsBundlesFlow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#medianotsuflow\"><code class=\"docutils literal notranslate\"><span class=\"pre\">MedianOtsuFlow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#recobundles\"><code class=\"docutils literal notranslate\"><span class=\"pre\">RecoBundles</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#recobundlesflow\"><code class=\"docutils literal notranslate\"><span class=\"pre\">RecoBundlesFlow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#id106\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#id107\">load_nifti</a></li>\n<li><a class=\"reference internal\" href=\"#id108\">load_trk</a></li>\n<li><a class=\"reference internal\" href=\"#median-otsu\">median_otsu</a></li>\n<li><a class=\"reference internal\" href=\"#id113\">save_nifti</a></li>\n<li><a class=\"reference internal\" href=\"#time\">time</a></li>\n<li><a class=\"reference internal\" href=\"#bundleanalysispopulationflow\"><code class=\"docutils literal notranslate\"><span class=\"pre\">BundleAnalysisPopulationFlow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#linearmixedmodelsflow\"><code class=\"docutils literal notranslate\"><span class=\"pre\">LinearMixedModelsFlow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#snrinccflow\"><code class=\"docutils literal notranslate\"><span class=\"pre\">SNRinCCFlow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#id115\"><code class=\"docutils literal notranslate\"><span class=\"pre\">TensorModel</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#id126\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#binary-dilation\">binary_dilation</a></li>\n<li><a class=\"reference internal\" href=\"#bounding-box\">bounding_box</a></li>\n<li><a class=\"reference internal\" href=\"#bundle-analysis\">bundle_analysis</a></li>\n<li><a class=\"reference internal\" href=\"#id132\">gradient_table</a></li>\n<li><a class=\"reference internal\" href=\"#id133\">load_nifti</a></li>\n<li><a class=\"reference internal\" href=\"#id134\">median_otsu</a></li>\n<li><a class=\"reference internal\" href=\"#optional-package\">optional_package</a></li>\n<li><a class=\"reference internal\" href=\"#id137\">read_bvals_bvecs</a></li>\n<li><a class=\"reference internal\" href=\"#id138\">save_nifti</a></li>\n<li><a class=\"reference internal\" href=\"#segment-from-cfa\">segment_from_cfa</a></li>\n<li><a class=\"reference internal\" href=\"#simple-plot\">simple_plot</a></li>\n<li><a class=\"reference internal\" href=\"#closestpeakdirectiongetter\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ClosestPeakDirectionGetter</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#cmctissueclassifier\"><code class=\"docutils literal notranslate\"><span class=\"pre\">CmcTissueClassifier</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#deterministicmaximumdirectiongetter\"><code class=\"docutils literal notranslate\"><span class=\"pre\">DeterministicMaximumDirectionGetter</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#localfibertrackingpamflow\"><code class=\"docutils literal notranslate\"><span class=\"pre\">LocalFiberTrackingPAMFlow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#localtracking\"><code class=\"docutils literal notranslate\"><span class=\"pre\">LocalTracking</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#pftrackingpamflow\"><code class=\"docutils literal notranslate\"><span class=\"pre\">PFTrackingPAMFlow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#particlefilteringtracking\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ParticleFilteringTracking</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#probabilisticdirectiongetter\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ProbabilisticDirectionGetter</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#thresholdtissueclassifier\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ThresholdTissueClassifier</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#tractogram\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Tractogram</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#id145\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#id146\">load_nifti</a></li>\n<li><a class=\"reference internal\" href=\"#load-peaks\">load_peaks</a></li>\n<li><a class=\"reference internal\" href=\"#save\">save</a></li>\n<li><a class=\"reference internal\" href=\"#horizonflow\"><code class=\"docutils literal notranslate\"><span class=\"pre\">HorizonFlow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#id148\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#horizon\">horizon</a></li>\n<li><a class=\"reference internal\" href=\"#id150\">load_nifti</a></li>\n<li><a class=\"reference internal\" href=\"#load-tractogram\">load_tractogram</a></li>\n<li><a class=\"reference internal\" href=\"#pjoin\">pjoin</a></li>\n<li><a class=\"reference internal\" href=\"#id153\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#id154\">io_iterator_</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".rst", "current_page_name": "reference/dipy.workflows", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.11"}