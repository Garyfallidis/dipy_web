{"parents": [], "prev": null, "next": null, "title": "Bootstrap and Closest Peak Direction Getters Example", "meta": {}, "body": "<div class=\"section\" id=\"bootstrap-and-closest-peak-direction-getters-example\">\n<span id=\"example-tracking-bootstrap-peaks\"></span><h1>Bootstrap and Closest Peak Direction Getters Example<a class=\"headerlink\" href=\"#bootstrap-and-closest-peak-direction-getters-example\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>This example shows how choices in direction-getter impact fiber\ntracking results by demonstrating the bootstrap direction getter (a type of\nprobabilistic tracking, as described in <a class=\"reference internal\" href=\"#berman2008\" id=\"id1\">[Berman2008]</a>) and the closest peak\ndirection getter (a type of deterministic tracking).\n(Amirbekian, PhD thesis, 2016)</p>\n<p>Let\u2019s load the necessary modules for executing this tutorial.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">dipy.data</span> <span class=\"k\">import</span> <span class=\"n\">read_stanford_labels</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.tracking</span> <span class=\"k\">import</span> <span class=\"n\">utils</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.tracking.local</span> <span class=\"k\">import</span> <span class=\"p\">(</span><span class=\"n\">ThresholdTissueClassifier</span><span class=\"p\">,</span> <span class=\"n\">LocalTracking</span><span class=\"p\">)</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.io.streamline</span> <span class=\"k\">import</span> <span class=\"n\">save_trk</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.viz</span> <span class=\"k\">import</span> <span class=\"n\">window</span><span class=\"p\">,</span> <span class=\"n\">actor</span><span class=\"p\">,</span> <span class=\"n\">colormap</span> <span class=\"k\">as</span> <span class=\"n\">cmap</span>\n\n<span class=\"n\">renderer</span> <span class=\"o\">=</span> <span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">Renderer</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>Now we import the CSD model</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">dipy.reconst.csdeconv</span> <span class=\"k\">import</span> <span class=\"n\">ConstrainedSphericalDeconvModel</span>\n</pre></div>\n</div>\n<p>First we load our images and establish seeds. See the Introduction to Basic\nTracking tutorial for more background on these steps.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">hardi_img</span><span class=\"p\">,</span> <span class=\"n\">gtab</span><span class=\"p\">,</span> <span class=\"n\">labels_img</span> <span class=\"o\">=</span> <span class=\"n\">read_stanford_labels</span><span class=\"p\">()</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">hardi_img</span><span class=\"o\">.</span><span class=\"n\">get_data</span><span class=\"p\">()</span>\n<span class=\"n\">labels</span> <span class=\"o\">=</span> <span class=\"n\">labels_img</span><span class=\"o\">.</span><span class=\"n\">get_data</span><span class=\"p\">()</span>\n<span class=\"n\">affine</span> <span class=\"o\">=</span> <span class=\"n\">hardi_img</span><span class=\"o\">.</span><span class=\"n\">affine</span>\n\n<span class=\"n\">seed_mask</span> <span class=\"o\">=</span> <span class=\"n\">labels</span> <span class=\"o\">==</span> <span class=\"mi\">2</span>\n<span class=\"n\">white_matter</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">labels</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"p\">(</span><span class=\"n\">labels</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">seeds</span> <span class=\"o\">=</span> <span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">seeds_from_mask</span><span class=\"p\">(</span><span class=\"n\">seed_mask</span><span class=\"p\">,</span> <span class=\"n\">density</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"o\">=</span><span class=\"n\">affine</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Next, we fit the CSD model</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">csd_model</span> <span class=\"o\">=</span> <span class=\"n\">ConstrainedSphericalDeconvModel</span><span class=\"p\">(</span><span class=\"n\">gtab</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">sh_order</span><span class=\"o\">=</span><span class=\"mi\">6</span><span class=\"p\">)</span>\n<span class=\"n\">csd_fit</span> <span class=\"o\">=</span> <span class=\"n\">csd_model</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">mask</span><span class=\"o\">=</span><span class=\"n\">white_matter</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>we use the CSA fit to calculate GFA, which will serve as our tissue\nclassifier</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">dipy.reconst.shm</span> <span class=\"k\">import</span> <span class=\"n\">CsaOdfModel</span>\n<span class=\"n\">csa_model</span> <span class=\"o\">=</span> <span class=\"n\">CsaOdfModel</span><span class=\"p\">(</span><span class=\"n\">gtab</span><span class=\"p\">,</span> <span class=\"n\">sh_order</span><span class=\"o\">=</span><span class=\"mi\">6</span><span class=\"p\">)</span>\n<span class=\"n\">gfa</span> <span class=\"o\">=</span> <span class=\"n\">csa_model</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">mask</span><span class=\"o\">=</span><span class=\"n\">white_matter</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">gfa</span>\n<span class=\"n\">classifier</span> <span class=\"o\">=</span> <span class=\"n\">ThresholdTissueClassifier</span><span class=\"p\">(</span><span class=\"n\">gfa</span><span class=\"p\">,</span> <span class=\"o\">.</span><span class=\"mi\">25</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Next, we need to set up our two direction getters</p>\n<p>Example #1: Bootstrap direction getter with CSD Model</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">dipy.direction</span> <span class=\"k\">import</span> <span class=\"n\">BootDirectionGetter</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.tracking.streamline</span> <span class=\"k\">import</span> <span class=\"n\">Streamlines</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.data</span> <span class=\"k\">import</span> <span class=\"n\">small_sphere</span>\n\n<span class=\"n\">boot_dg_csd</span> <span class=\"o\">=</span> <span class=\"n\">BootDirectionGetter</span><span class=\"o\">.</span><span class=\"n\">from_data</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">csd_model</span><span class=\"p\">,</span> <span class=\"n\">max_angle</span><span class=\"o\">=</span><span class=\"mf\">30.</span><span class=\"p\">,</span>\n                                            <span class=\"n\">sphere</span><span class=\"o\">=</span><span class=\"n\">small_sphere</span><span class=\"p\">)</span>\n<span class=\"n\">boot_streamline_generator</span> <span class=\"o\">=</span> <span class=\"n\">LocalTracking</span><span class=\"p\">(</span><span class=\"n\">boot_dg_csd</span><span class=\"p\">,</span> <span class=\"n\">classifier</span><span class=\"p\">,</span> <span class=\"n\">seeds</span><span class=\"p\">,</span>\n                                          <span class=\"n\">affine</span><span class=\"p\">,</span> <span class=\"n\">step_size</span><span class=\"o\">=.</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"n\">streamlines</span> <span class=\"o\">=</span> <span class=\"n\">Streamlines</span><span class=\"p\">(</span><span class=\"n\">boot_streamline_generator</span><span class=\"p\">)</span>\n\n<span class=\"n\">renderer</span><span class=\"o\">.</span><span class=\"n\">clear</span><span class=\"p\">()</span>\n<span class=\"n\">renderer</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">actor</span><span class=\"o\">.</span><span class=\"n\">line</span><span class=\"p\">(</span><span class=\"n\">streamlines</span><span class=\"p\">,</span> <span class=\"n\">cmap</span><span class=\"o\">.</span><span class=\"n\">line_colors</span><span class=\"p\">(</span><span class=\"n\">streamlines</span><span class=\"p\">)))</span>\n<span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">record</span><span class=\"p\">(</span><span class=\"n\">renderer</span><span class=\"p\">,</span> <span class=\"n\">out_path</span><span class=\"o\">=</span><span class=\"s1\">&#39;bootstrap_dg_CSD.png&#39;</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">600</span><span class=\"p\">,</span> <span class=\"mi\">600</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n<div class=\"figure align-center\" id=\"id3\">\n<img alt=\"../../_images/bootstrap_dg_CSD.png\" src=\"../../_images/bootstrap_dg_CSD.png\" />\n<p class=\"caption\"><span class=\"caption-text\"><strong>Corpus Callosum Bootstrap Probabilistic Direction Getter</strong></span></p>\n</div>\n<p>We have created a bootstrapped probabilistic set of streamlines. If you repeat\nthe fiber tracking (keeping all inputs the same) you will NOT get exactly the\nsame set of streamlines. We can save the streamlines as a Trackvis file so it\ncan be loaded into other software for visualization or further analysis.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">save_trk</span><span class=\"p\">(</span><span class=\"s2\">&quot;bootstrap_dg_CSD.trk&quot;</span><span class=\"p\">,</span> <span class=\"n\">streamlines</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"p\">,</span> <span class=\"n\">labels</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Example #2: Closest peak direction getter with CSD Model</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">dipy.direction</span> <span class=\"k\">import</span> <span class=\"n\">ClosestPeakDirectionGetter</span>\n\n<span class=\"n\">pmf</span> <span class=\"o\">=</span> <span class=\"n\">csd_fit</span><span class=\"o\">.</span><span class=\"n\">odf</span><span class=\"p\">(</span><span class=\"n\">small_sphere</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">clip</span><span class=\"p\">(</span><span class=\"nb\">min</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">peak_dg</span> <span class=\"o\">=</span> <span class=\"n\">ClosestPeakDirectionGetter</span><span class=\"o\">.</span><span class=\"n\">from_pmf</span><span class=\"p\">(</span><span class=\"n\">pmf</span><span class=\"p\">,</span> <span class=\"n\">max_angle</span><span class=\"o\">=</span><span class=\"mf\">30.</span><span class=\"p\">,</span>\n                                              <span class=\"n\">sphere</span><span class=\"o\">=</span><span class=\"n\">small_sphere</span><span class=\"p\">)</span>\n<span class=\"n\">peak_streamline_generator</span> <span class=\"o\">=</span> <span class=\"n\">LocalTracking</span><span class=\"p\">(</span><span class=\"n\">peak_dg</span><span class=\"p\">,</span> <span class=\"n\">classifier</span><span class=\"p\">,</span> <span class=\"n\">seeds</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"p\">,</span>\n                                          <span class=\"n\">step_size</span><span class=\"o\">=.</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"n\">streamlines</span> <span class=\"o\">=</span> <span class=\"n\">Streamlines</span><span class=\"p\">(</span><span class=\"n\">peak_streamline_generator</span><span class=\"p\">)</span>\n\n<span class=\"n\">renderer</span><span class=\"o\">.</span><span class=\"n\">clear</span><span class=\"p\">()</span>\n<span class=\"n\">renderer</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">actor</span><span class=\"o\">.</span><span class=\"n\">line</span><span class=\"p\">(</span><span class=\"n\">streamlines</span><span class=\"p\">,</span> <span class=\"n\">cmap</span><span class=\"o\">.</span><span class=\"n\">line_colors</span><span class=\"p\">(</span><span class=\"n\">streamlines</span><span class=\"p\">)))</span>\n<span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">record</span><span class=\"p\">(</span><span class=\"n\">renderer</span><span class=\"p\">,</span> <span class=\"n\">out_path</span><span class=\"o\">=</span><span class=\"s1\">&#39;closest_peak_dg_CSD.png&#39;</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">600</span><span class=\"p\">,</span> <span class=\"mi\">600</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n<div class=\"figure align-center\" id=\"id4\">\n<img alt=\"../../_images/closest_peak_dg_CSD.png\" src=\"../../_images/closest_peak_dg_CSD.png\" />\n<p class=\"caption\"><span class=\"caption-text\"><strong>Corpus Callosum Closest Peak Deterministic Direction Getter</strong></span></p>\n</div>\n<p>We have created a set of streamlines using the closest peak direction getter,\nwhich is a type of deterministic tracking. If you repeat the fiber tracking\n(keeping all inputs the same) you will get exactly the same set of streamlines.\nWe can save the streamlines as a Trackvis file so it can be loaded into other\nsoftware for visualization or further analysis.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">save_trk</span><span class=\"p\">(</span><span class=\"s2\">&quot;closest_peak_dg_CSD.trk&quot;</span><span class=\"p\">,</span> <span class=\"n\">streamlines</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"p\">,</span> <span class=\"n\">labels</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<table class=\"docutils citation\" frame=\"void\" id=\"berman2008\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\"><a class=\"fn-backref\" href=\"#id1\">[Berman2008]</a></td><td>Berman, J. et al., Probabilistic streamline q-ball</td></tr>\n</tbody>\n</table>\n<p>tractography using the residual bootstrap, NeuroImage, vol 39, no 1, 2008</p>\n<div class=\"admonition-example-source-code admonition\">\n<p class=\"first admonition-title\">Example source code</p>\n<p class=\"last\">You can download <a class=\"reference download internal\" href=\"../../_downloads/tracking_bootstrap_peaks.py\" download=\"\"><code class=\"xref download docutils literal notranslate\"><span class=\"pre\">the</span> <span class=\"pre\">full</span> <span class=\"pre\">source</span> <span class=\"pre\">code</span> <span class=\"pre\">of</span> <span class=\"pre\">this</span> <span class=\"pre\">example</span></code></a>. This same script is also included in the dipy source distribution under the <code class=\"file docutils literal notranslate\"><span class=\"pre\">doc/examples/</span></code> directory.</p>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"]], "sourcename": "examples_built/tracking_bootstrap_peaks.rst.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Bootstrap and Closest Peak Direction Getters Example</a></li>\n</ul>\n", "display_toc": false, "page_source_suffix": ".rst", "current_page_name": "examples_built/tracking_bootstrap_peaks", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.11"}