{"parents": [], "prev": null, "next": null, "title": "Denoise images using Local PCA", "meta": {}, "body": "<div class=\"section\" id=\"denoise-images-using-local-pca\">\n<span id=\"example-denoise-localpca\"></span><h1>Denoise images using Local PCA<a class=\"headerlink\" href=\"#denoise-images-using-local-pca\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>The local PCA based denoising algorithm <a class=\"reference internal\" href=\"#manjon2013\" id=\"id1\">[Manjon2013]</a> is an effective denoising\nmethod because it takes into account the directional information in diffusion\ndata.</p>\n<p>The basic idea behind local PCA based diffusion denoising can be explained in\nthe following three basic steps:</p>\n<ul class=\"simple\">\n<li>First, we estimate the local noise variance at each voxel.</li>\n<li>Then, we apply PCA in local patches around each voxel over the gradient\ndirections.</li>\n<li>Finally, we threshold the eigenvalues based on the local estimate of sigma\nand then do a PCA reconstruction</li>\n</ul>\n<p>Let\u2019s load the necessary modules</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">nibabel</span> <span class=\"k\">as</span> <span class=\"nn\">nib</span>\n<span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n<span class=\"kn\">from</span> <span class=\"nn\">time</span> <span class=\"k\">import</span> <span class=\"n\">time</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.denoise.localpca</span> <span class=\"k\">import</span> <span class=\"n\">localpca</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.denoise.pca_noise_estimate</span> <span class=\"k\">import</span> <span class=\"n\">pca_noise_estimate</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.data</span> <span class=\"k\">import</span> <span class=\"n\">read_isbi2013_2shell</span>\n</pre></div>\n</div>\n<p>Load one of the datasets. These data were acquired with 63 gradients and 1\nnon-diffusion (b=0) image.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">img</span><span class=\"p\">,</span> <span class=\"n\">gtab</span> <span class=\"o\">=</span> <span class=\"n\">read_isbi2013_2shell</span><span class=\"p\">()</span>\n\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">get_data</span><span class=\"p\">()</span>\n<span class=\"n\">affine</span> <span class=\"o\">=</span> <span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">affine</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Input Volume&quot;</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>We use the <code class=\"docutils literal notranslate\"><span class=\"pre\">pca_noise_estimate</span></code> method to estimate the value of sigma to be\nused in local PCA algorithm. It takes both data and the gradient table object\nas input and returns an estimate of local noise standard deviation as a 3D\narray. We return a smoothed version, where a Gaussian filter with radius\n3 voxels has been applied to the estimate of the noise before returning it.</p>\n<p>We correct for the bias due to Rician noise, based on an equation developed by\nKoay and Basser <a class=\"reference internal\" href=\"#koay2006\" id=\"id2\">[Koay2006]</a>.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"p\">()</span>\n<span class=\"n\">sigma</span> <span class=\"o\">=</span> <span class=\"n\">pca_noise_estimate</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">gtab</span><span class=\"p\">,</span> <span class=\"n\">correct_bias</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">smooth</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Sigma estimation time&quot;</span><span class=\"p\">,</span> <span class=\"n\">time</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">t</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Perform the localPCA using the function localpca.</p>\n<p>The localpca algorithm takes into account for the directional\ninformation in the diffusion MR data. It performs PCA on local 4D patch and\nthen thresholds it using the local variance estimate done by noise estimation\nfunction, then performing PCA reconstruction on it gives us the deniosed\nestimate.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"p\">()</span>\n\n<span class=\"n\">denoised_arr</span> <span class=\"o\">=</span> <span class=\"n\">localpca</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">sigma</span><span class=\"o\">=</span><span class=\"n\">sigma</span><span class=\"p\">,</span> <span class=\"n\">patch_radius</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Time taken for local PCA (slow)&quot;</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"n\">t</span> <span class=\"o\">+</span> <span class=\"n\">time</span><span class=\"p\">())</span>\n</pre></div>\n</div>\n<p>Let us plot the axial slice of the original and denoised data.\nWe visualize all the slices (22 in total)</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">sli</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">//</span> <span class=\"mi\">2</span>\n<span class=\"n\">gra</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">//</span> <span class=\"mi\">2</span>\n<span class=\"n\">orig</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">[:,</span> <span class=\"p\">:,</span> <span class=\"n\">sli</span><span class=\"p\">,</span> <span class=\"n\">gra</span><span class=\"p\">]</span>\n<span class=\"n\">den</span> <span class=\"o\">=</span> <span class=\"n\">denoised_arr</span><span class=\"p\">[:,</span> <span class=\"p\">:,</span> <span class=\"n\">sli</span><span class=\"p\">,</span> <span class=\"n\">gra</span><span class=\"p\">]</span>\n<span class=\"n\">rms_diff</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">((</span><span class=\"n\">orig</span> <span class=\"o\">-</span> <span class=\"n\">den</span><span class=\"p\">)</span> <span class=\"o\">**</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"n\">fig</span><span class=\"p\">,</span> <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">subplots</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"n\">orig</span><span class=\"p\">,</span> <span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"s1\">&#39;gray&#39;</span><span class=\"p\">,</span> <span class=\"n\">origin</span><span class=\"o\">=</span><span class=\"s1\">&#39;lower&#39;</span><span class=\"p\">,</span> <span class=\"n\">interpolation</span><span class=\"o\">=</span><span class=\"s1\">&#39;none&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">set_title</span><span class=\"p\">(</span><span class=\"s1\">&#39;Original&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">set_axis_off</span><span class=\"p\">()</span>\n<span class=\"n\">ax</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"n\">den</span><span class=\"p\">,</span> <span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"s1\">&#39;gray&#39;</span><span class=\"p\">,</span> <span class=\"n\">origin</span><span class=\"o\">=</span><span class=\"s1\">&#39;lower&#39;</span><span class=\"p\">,</span> <span class=\"n\">interpolation</span><span class=\"o\">=</span><span class=\"s1\">&#39;none&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">set_title</span><span class=\"p\">(</span><span class=\"s1\">&#39;Denoised Output&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">set_axis_off</span><span class=\"p\">()</span>\n<span class=\"n\">ax</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"n\">rms_diff</span><span class=\"p\">,</span> <span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"s1\">&#39;gray&#39;</span><span class=\"p\">,</span> <span class=\"n\">origin</span><span class=\"o\">=</span><span class=\"s1\">&#39;lower&#39;</span><span class=\"p\">,</span> <span class=\"n\">interpolation</span><span class=\"o\">=</span><span class=\"s1\">&#39;none&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">set_title</span><span class=\"p\">(</span><span class=\"s1\">&#39;Residual&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">ax</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">set_axis_off</span><span class=\"p\">()</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">savefig</span><span class=\"p\">(</span><span class=\"s1\">&#39;denoised_localpca.png&#39;</span><span class=\"p\">,</span> <span class=\"n\">bbox_inches</span><span class=\"o\">=</span><span class=\"s1\">&#39;tight&#39;</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;The result saved in denoised_localpca.png&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"figure align-center\" id=\"id4\">\n<img alt=\"../../_images/denoised_localpca.png\" src=\"../../_images/denoised_localpca.png\" />\n<p class=\"caption\"><span class=\"caption-text\">Showing the middle axial slice of the local PCA denoised output.</span></p>\n</div>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">nib</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"n\">nib</span><span class=\"o\">.</span><span class=\"n\">Nifti1Image</span><span class=\"p\">(</span><span class=\"n\">denoised_arr</span><span class=\"p\">,</span>\n                         <span class=\"n\">affine</span><span class=\"p\">),</span> <span class=\"s1\">&#39;denoised_localpca.nii.gz&#39;</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Entire denoised data saved in denoised_localpca.nii.gz&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<table class=\"docutils citation\" frame=\"void\" id=\"manjon2013\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\"><a class=\"fn-backref\" href=\"#id1\">[Manjon2013]</a></td><td>Manjon JV, Coupe P, Concha L, Buades A, Collins DL \u201cDiffusion\nWeighted Image Denoising Using Overcomplete Local PCA\u201d (2013).\nPLoS ONE 8(9): e73021. doi:10.1371/journal.pone.0073021.</td></tr>\n</tbody>\n</table>\n<table class=\"docutils citation\" frame=\"void\" id=\"koay2006\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\"><a class=\"fn-backref\" href=\"#id2\">[Koay2006]</a></td><td>Koay CG, Basser PJ (2006). \u201cAnalytically exact correction scheme\nfor signal extraction from noisy magnitude MR signals\u201d. JMR 179:\n317-322.</td></tr>\n</tbody>\n</table>\n<div class=\"admonition-example-source-code admonition\">\n<p class=\"first admonition-title\">Example source code</p>\n<p class=\"last\">You can download <a class=\"reference download internal\" href=\"../../_downloads/denoise_localpca.py\" download=\"\"><code class=\"xref download docutils literal notranslate\"><span class=\"pre\">the</span> <span class=\"pre\">full</span> <span class=\"pre\">source</span> <span class=\"pre\">code</span> <span class=\"pre\">of</span> <span class=\"pre\">this</span> <span class=\"pre\">example</span></code></a>. This same script is also included in the dipy source distribution under the <code class=\"file docutils literal notranslate\"><span class=\"pre\">doc/examples/</span></code> directory.</p>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"]], "sourcename": "examples_built/denoise_localpca.rst.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Denoise images using Local PCA</a></li>\n</ul>\n", "display_toc": false, "page_source_suffix": ".rst", "current_page_name": "examples_built/denoise_localpca", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.11"}