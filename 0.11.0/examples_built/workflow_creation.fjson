{"body": "<div class=\"section\" id=\"creating-a-new-workflow\">\n<span id=\"example-workflow-creation\"></span><h1>Creating a new workflow.<a class=\"headerlink\" href=\"#creating-a-new-workflow\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>A workflow is a series of dipy operations with fixed inputs and outputs\nthat is callable via command line or another interface.</p>\n<p>For example, after installing dipy, you can call anywhere from your command line:\n$ dipy_nlmeans t1.nii.gz t1_denoised.nii.gz</p>\n<p>First create your workflow. Usually this would be in its own python file in\nthe ../dipy/workflows directory.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">shutil</span>\n</pre></div>\n</div>\n<p><code class=\"docutils literal\"><span class=\"pre\">shutil</span></code> Will be used for sample file manipulation.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">dipy.workflows.workflow</span> <span class=\"k\">import</span> <span class=\"n\">Workflow</span>\n</pre></div>\n</div>\n<p><code class=\"docutils literal\"><span class=\"pre\">Workflow</span></code> is the base class that will be extended to create our workflow.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">AppendTextFlow</span><span class=\"p\">(</span><span class=\"n\">Workflow</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">input_files</span><span class=\"p\">,</span> <span class=\"n\">text_to_append</span><span class=\"o\">=</span><span class=\"s1\">&#39;dipy&#39;</span><span class=\"p\">,</span> <span class=\"n\">out_dir</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">,</span>\n            <span class=\"n\">out_file</span><span class=\"o\">=</span><span class=\"s1\">&#39;append.txt&#39;</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        input_files : string</span>\n<span class=\"sd\">            Path to the input files. This path may contain wildcards to</span>\n<span class=\"sd\">            process multiple inputs at once.</span>\n\n<span class=\"sd\">        text_to_append : string, optional</span>\n<span class=\"sd\">            Text that will be appended to the file. (default &#39;dipy&#39;)</span>\n\n<span class=\"sd\">        out_dir : string, optional</span>\n<span class=\"sd\">            Where the resulting file will be saved. (default &#39;&#39;)</span>\n\n<span class=\"sd\">        out_file : string, optional</span>\n<span class=\"sd\">            Name of the result file to be saved. (default &#39;append.txt&#39;)</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n</pre></div>\n</div>\n<p><code class=\"docutils literal\"><span class=\"pre\">AppendTextFlow</span></code> is the name of our workflow. Note that it needs\nto extend Workflow for everything to work properly. It will append\ntext to a file.\nIt is mandatory to have out_dir as a parameter. It is also mandatory\nto put &#8216;<a href=\"#id1\"><span class=\"problematic\" id=\"id2\">out_</span></a>&#8216; in front of every parameter that is going to be an\noutput. Lastly, all <a href=\"#id3\"><span class=\"problematic\" id=\"id4\">out_</span></a> params needs to be at the end of the params\nlist.\nThe <code class=\"docutils literal\"><span class=\"pre\">run</span></code> docstring is very important, you need to document every\nparameter as they will be used with inspection to build the command line\nargument parser.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"n\">io_it</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_io_iterator</span><span class=\"p\">()</span>\n\n<span class=\"k\">for</span> <span class=\"n\">in_file</span><span class=\"p\">,</span> <span class=\"n\">out_file</span> <span class=\"ow\">in</span> <span class=\"n\">io_it</span><span class=\"p\">:</span>\n\n    <span class=\"n\">shutil</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">(</span><span class=\"n\">in_file</span><span class=\"p\">,</span> <span class=\"n\">out_file</span><span class=\"p\">)</span>\n\n    <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">out_file</span><span class=\"p\">,</span> <span class=\"s1\">&#39;a&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">myfile</span><span class=\"p\">:</span>\n\n        <span class=\"n\">myfile</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">text_to_append</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Use self.get_io_iterator() in every workflow you create. This creates\nan <code class=\"docutils literal\"><span class=\"pre\">IOIterator</span></code> object that create output file names and directory structure\nbased on the inputs and some other advanced output strategy parameters.</p>\n<p>By iterating on the <code class=\"docutils literal\"><span class=\"pre\">IOIterator</span></code> object you created previously you\nconveniently get all input and output paths for every input file\nfound when globbing the input parameters.</p>\n<p>The code in the loop is the actual workflow processing code. It can be anything.\nFor the example, it just appends text to an input file.</p>\n<p>This is it for the workflow! Now to be able to call it easily via command\nline, you need to add this bit of code. Usually this is in a separate\nexecutable file located in ../dipy/bin/.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">dipy.workflows.flow_runner</span> <span class=\"k\">import</span> <span class=\"n\">run_flow</span>\n</pre></div>\n</div>\n<p>This is the method that will wrap everything that is needed to make a flow\ncommand line ready then run it.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;__main__&quot;</span><span class=\"p\">:</span>\n    <span class=\"n\">run_flow</span><span class=\"p\">(</span><span class=\"n\">AppendTextFlow</span><span class=\"p\">())</span>\n</pre></div>\n</div>\n<p>This is the only thing needed to make your workflow available through command\nline.</p>\n<p>Now just call the script you just made with -h to see the argparser help text.</p>\n<p><cite>python workflow_creation.py &#8211;help</cite></p>\n<p>You should see all your parameters available along with some extra common ones\nlike logging file and force overwrite. Also all the documentation you wrote\nabout each parameter is there.</p>\n<p>Now call it for real with a text file</p>\n<p><cite>python workflow_creation.py ./text_file.txt</cite></p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"o\">..</span> <span class=\"n\">admonition</span><span class=\"p\">::</span> <span class=\"n\">Example</span> <span class=\"n\">source</span> <span class=\"n\">code</span>\n</pre></div>\n</div>\n<blockquote>\n<div>You can download <a class=\"reference download internal\" href=\"../../_downloads/workflow_creation.py\" download=\"\"><code class=\"xref download docutils literal\"><span class=\"pre\">the</span> <span class=\"pre\">full</span> <span class=\"pre\">source</span> <span class=\"pre\">code</span> <span class=\"pre\">of</span> <span class=\"pre\">this</span> <span class=\"pre\">example</span></code></a>.\nThis same script is also included in the dipy source distribution under the\n<code class=\"file docutils literal\"><span class=\"pre\">doc/examples/</span></code> directory.</div></blockquote>\n</div>\n", "alabaster_version": "0.7.7", "display_toc": false, "title": "Creating a new workflow.", "sourcename": "examples_built/workflow_creation.rst.txt", "customsidebar": null, "metatags": "", "current_page_name": "examples_built/workflow_creation", "next": null, "rellinks": [["genindex", "General Index", "I", "index"]], "meta": {}, "parents": [], "sidebars": null, "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Creating a new workflow.</a></li>\n</ul>\n", "prev": null, "page_source_suffix": ".rst"}