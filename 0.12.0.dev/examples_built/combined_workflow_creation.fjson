{"parents": [], "prev": null, "next": null, "title": "Creating a new combined workflow.", "meta": {}, "body": "<div class=\"section\" id=\"creating-a-new-combined-workflow\">\n<span id=\"example-combined-workflow-creation\"></span><h1>Creating a new combined workflow.<a class=\"headerlink\" href=\"#creating-a-new-combined-workflow\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>A combined workflow is a series of dipy workflows organized together in a way\nthat the output of a workflow serves as input for the next one.</p>\n<p>First create your combined workflow class. Your combine workflow class file\nis usually located in the ../dipy/workflows directory.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">dipy.workflows.combined_workflow</span> <span class=\"k\">import</span> <span class=\"n\">CombinedWorkflow</span>\n</pre></div>\n</div>\n<p><code class=\"docutils literal\"><span class=\"pre\">CombinedWorkflow</span></code> is the base class that will be extended to create our\ncombined workflow.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">dipy.workflows.denoise</span> <span class=\"k\">import</span>  <span class=\"n\">NLMeansFlow</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.workflows.segment</span> <span class=\"k\">import</span> <span class=\"n\">MedianOtsuFlow</span>\n</pre></div>\n</div>\n<p><code class=\"docutils literal\"><span class=\"pre\">MedianOtsuFlow</span></code> and <code class=\"docutils literal\"><span class=\"pre\">NLMeansFlow</span></code> will be combined to create our\nprocessing section.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">DenoiseAndSegment</span><span class=\"p\">(</span><span class=\"n\">CombinedWorkflow</span><span class=\"p\">):</span>\n</pre></div>\n</div>\n<p><code class=\"docutils literal\"><span class=\"pre\">DenoiseAndSegment</span></code> is the name of our combined workflow. Note that\nit needs to extend CombinedWorkflow for everything to work properly.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">_get_sub_flows</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"p\">[</span>\n        <span class=\"n\">NLMeansFlow</span><span class=\"p\">,</span>\n        <span class=\"n\">MedianOtsuFlow</span>\n    <span class=\"p\">]</span>\n</pre></div>\n</div>\n<p>It is mandatory to implement this method if you want to make all the sub\nworkflows parameters available in commandline.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">input_files</span><span class=\"p\">,</span> <span class=\"n\">out_dir</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">,</span> <span class=\"n\">out_file</span><span class=\"o\">=</span><span class=\"s1\">&#39;processed.nii.gz&#39;</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ----------</span>\n<span class=\"sd\">    input_files : string</span>\n<span class=\"sd\">        Path to the input files. This path may contain wildcards to</span>\n<span class=\"sd\">        process multiple inputs at once.</span>\n\n<span class=\"sd\">    out_dir : string, optional</span>\n<span class=\"sd\">        Where the resulting file will be saved. (default &#39;&#39;)</span>\n\n<span class=\"sd\">    out_file : string, optional</span>\n<span class=\"sd\">        Name of the result file to be saved. (default &#39;processed.nii.gz&#39;)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n</pre></div>\n</div>\n<p>Just like a normal workflow, it is mandatory to have out_dir as a\nparameter. It is also mandatory to put &#8216;<a href=\"#id1\"><span class=\"problematic\" id=\"id2\">out_</span></a>&#8216; in front of every\nparameter that is going to be an output. Lastly, all <a href=\"#id3\"><span class=\"problematic\" id=\"id4\">out_</span></a> params needs\nto be at the end of the params list.\nThe class docstring part is very important, you need to document\nevery parameter as they will be used with inspection to build the\ncommand line argument parser.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"n\">io_it</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_io_iterator</span><span class=\"p\">()</span>\n\n<span class=\"k\">for</span> <span class=\"n\">in_file</span><span class=\"p\">,</span> <span class=\"n\">out_file</span> <span class=\"ow\">in</span> <span class=\"n\">io_it</span><span class=\"p\">:</span>\n    <span class=\"n\">nl_flow</span> <span class=\"o\">=</span> <span class=\"n\">NLMeansFlow</span><span class=\"p\">()</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">run_sub_flow</span><span class=\"p\">(</span><span class=\"n\">nl_flow</span><span class=\"p\">,</span> <span class=\"n\">in_file</span><span class=\"p\">,</span> <span class=\"n\">out_dir</span><span class=\"o\">=</span><span class=\"n\">out_dir</span><span class=\"p\">)</span>\n    <span class=\"n\">denoised</span> <span class=\"o\">=</span> <span class=\"n\">nl_flow</span><span class=\"o\">.</span><span class=\"n\">last_generated_outputs</span><span class=\"p\">[</span><span class=\"s1\">&#39;out_denoised&#39;</span><span class=\"p\">]</span>\n\n    <span class=\"n\">me_flow</span> <span class=\"o\">=</span> <span class=\"n\">MedianOtsuFlow</span><span class=\"p\">()</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">run_sub_flow</span><span class=\"p\">(</span><span class=\"n\">me_flow</span><span class=\"p\">,</span> <span class=\"n\">denoised</span><span class=\"p\">,</span> <span class=\"n\">out_dir</span><span class=\"o\">=</span><span class=\"n\">out_dir</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Use self.get_io_iterator() in every workflow you create. This creates\nan <code class=\"docutils literal\"><span class=\"pre\">IOIterator</span></code> object that create output file names and directory structure\nbased on the inputs and some other advanced output strategy parameters.</p>\n<p>Iterating on the <code class=\"docutils literal\"><span class=\"pre\">IOIterator</span></code> object you created previously you\nconveniently get all input and output paths for every input file\nfound when globbin the input parameters.</p>\n<p>In the IOIterator loop you can see how we create a new NLMeans workflow then\nrun it using self.run_sub_flow. Running it this way will pass any workflow\nspecific parameter that was retreived from the command line and will append the\nones you specify as optional parameters (out_dir in this case).</p>\n<p>Lastly, the outputs paths are retrived using workflow.last_generated_outputs.\nThis allows to use <code class=\"docutils literal\"><span class=\"pre\">denoise</span></code> as the input for the <code class=\"docutils literal\"><span class=\"pre\">MedianOtsuFlow</span></code></p>\n<p>This is it for the combined workflow class! Now to be able to call it easily via\ncommand line, you need this last bit of code. It is usually in an executable\nfile located in ../dipy/bin/.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">dipy.workflows.flow_runner</span> <span class=\"k\">import</span> <span class=\"n\">run_flow</span>\n</pre></div>\n</div>\n<p>This is the method that will wrap everything that is needed to make a workflow\nready then run it.</p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;__main__&quot;</span><span class=\"p\">:</span>\n    <span class=\"n\">run_flow</span><span class=\"p\">(</span><span class=\"n\">DenoiseAndSegment</span><span class=\"p\">())</span>\n</pre></div>\n</div>\n<p>This is the only thing needed to make your workflow available through command\nline.</p>\n<p>Now just call the script you just made with -h to see the argparser help text.</p>\n<p><cite>python combined_workflow_creation.py &#8211;help</cite></p>\n<p>You should see all your parameters available along with some extra common ones\nlike logging file and force overwrite. Also all the documentation you wrote\nabout each parameter is there. Also note that every sub workflow optional\nparameter is available.</p>\n<p>Now call it for real with a nifti file to see the results. Experiment\nwith the parameters and see the results.</p>\n<p><cite>python combined_workflow_creation.py volume.nii.gz</cite></p>\n<div class=\"highlight-default\"><div class=\"highlight\"><pre><span></span><span class=\"o\">..</span> <span class=\"n\">admonition</span><span class=\"p\">::</span> <span class=\"n\">Example</span> <span class=\"n\">source</span> <span class=\"n\">code</span>\n</pre></div>\n</div>\n<blockquote>\n<div>You can download <a class=\"reference download internal\" href=\"../../_downloads/combined_workflow_creation.py\" download=\"\"><code class=\"xref download docutils literal\"><span class=\"pre\">the</span> <span class=\"pre\">full</span> <span class=\"pre\">source</span> <span class=\"pre\">code</span> <span class=\"pre\">of</span> <span class=\"pre\">this</span> <span class=\"pre\">example</span></code></a>.\nThis same script is also included in the dipy source distribution under the\n<code class=\"file docutils literal\"><span class=\"pre\">doc/examples/</span></code> directory.</div></blockquote>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"]], "sourcename": "examples_built/combined_workflow_creation.rst.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Creating a new combined workflow.</a></li>\n</ul>\n", "display_toc": false, "page_source_suffix": ".rst", "current_page_name": "examples_built/combined_workflow_creation", "sidebars": null, "customsidebar": null, "alabaster_version": "0.7.10"}