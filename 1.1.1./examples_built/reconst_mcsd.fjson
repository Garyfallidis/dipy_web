{"parents": [], "prev": null, "next": null, "title": "Reconstruction with Multi-Shell Multi-Tissue CSD", "meta": {}, "body": "<div class=\"section\" id=\"reconstruction-with-multi-shell-multi-tissue-csd\">\n<span id=\"reconst-mcsd\"></span><span id=\"example-reconst-mcsd\"></span><h1>Reconstruction with Multi-Shell Multi-Tissue CSD<a class=\"headerlink\" href=\"#reconstruction-with-multi-shell-multi-tissue-csd\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>This example shows how to use Multi-Shell Multi-Tissue Constrained Spherical\nDeconvolution (MSMT-CSD) introduced by Tournier et al. <a class=\"reference internal\" href=\"#jeurissen2014\" id=\"id1\"><span>[Jeurissen2014]</span></a>. This\ntutorial goes through the steps involved in implementing the method.</p>\n<p>This method provides improved White Matter(WM), Grey Matter (GM), and\nCerebrospinal fluid (CSF) volume fraction maps, which is otherwise\noverestimated in the standard CSD (SSST-CSD). This is done by using b-value\ndependencies of the different tissue types to estimate ODFs. This method thus\nextends the SSST-CSD introduced in <a class=\"reference internal\" href=\"#tournier2007\" id=\"id2\"><span>[Tournier2007]</span></a>.</p>\n<p>The reconstruction of the fiber orientation distribution function\n(fODF) in MSMT-CSD involves the following steps:</p>\n<blockquote>\n<div><ol class=\"arabic simple\">\n<li><p>Generate a mask using Median Otsu (optional step)</p></li>\n<li><p>Denoise the data using MP-PCA (optional step)</p></li>\n<li><p>Generate  Anisotropic Powermap (if T1 unavailable)</p></li>\n<li><p>Fit DTI model to the data</p></li>\n<li><p>Tissue Classification (needs to be at least two classes of tissues)</p></li>\n<li><p>Estimation of the fiber response function</p></li>\n<li><p>Use the response function to reconstruct the fODF</p></li>\n</ol>\n</div></blockquote>\n<p>First, we import all the modules we need from dipy as follows:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">dipy.reconst.shm</span> <span class=\"k\">as</span> <span class=\"nn\">shm</span>\n<span class=\"kn\">import</span> <span class=\"nn\">dipy.direction.peaks</span> <span class=\"k\">as</span> <span class=\"nn\">dp</span>\n<span class=\"kn\">import</span> <span class=\"nn\">dipy.reconst.dti</span> <span class=\"k\">as</span> <span class=\"nn\">dti</span>\n<span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.denoise.localpca</span> <span class=\"k\">import</span> <span class=\"n\">mppca</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.core.gradients</span> <span class=\"k\">import</span> <span class=\"n\">gradient_table</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.io.gradients</span> <span class=\"k\">import</span> <span class=\"n\">read_bvals_bvecs</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.io.image</span> <span class=\"k\">import</span> <span class=\"n\">load_nifti</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.segment.mask</span> <span class=\"k\">import</span> <span class=\"n\">median_otsu</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.reconst.csdeconv</span> <span class=\"k\">import</span> <span class=\"n\">auto_response</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.segment.tissue</span> <span class=\"k\">import</span> <span class=\"n\">TissueClassifierHMRF</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.sims.voxel</span> <span class=\"k\">import</span> <span class=\"n\">multi_shell_fiber_response</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.reconst.mcsd</span> <span class=\"k\">import</span> <span class=\"n\">MultiShellDeconvModel</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.viz</span> <span class=\"k\">import</span> <span class=\"n\">window</span><span class=\"p\">,</span> <span class=\"n\">actor</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.data</span> <span class=\"k\">import</span> <span class=\"n\">get_sphere</span><span class=\"p\">,</span> <span class=\"n\">get_fnames</span>\n<span class=\"n\">sphere</span> <span class=\"o\">=</span> <span class=\"n\">get_sphere</span><span class=\"p\">(</span><span class=\"s1\">&#39;symmetric724&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>For this example, we use fetch to download a multi-shell dataset which was\nkindly provided by Hansen and Jespersen (more details about the data are\nprovided in their paper <a class=\"reference internal\" href=\"../reconst_msdki/#hansen2016\" id=\"id3\"><span>[Hansen2016]</span></a>). The total size of the downloaded data\nis 192 MBytes, however you only need to fetch it once.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">fraw</span><span class=\"p\">,</span> <span class=\"n\">fbval</span><span class=\"p\">,</span> <span class=\"n\">fbvec</span><span class=\"p\">,</span> <span class=\"n\">t1_fname</span> <span class=\"o\">=</span> <span class=\"n\">get_fnames</span><span class=\"p\">(</span><span class=\"s1\">&#39;cfin_multib&#39;</span><span class=\"p\">)</span>\n\n<span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">affine</span> <span class=\"o\">=</span> <span class=\"n\">load_nifti</span><span class=\"p\">(</span><span class=\"n\">fraw</span><span class=\"p\">)</span>\n<span class=\"n\">bvals</span><span class=\"p\">,</span> <span class=\"n\">bvecs</span> <span class=\"o\">=</span> <span class=\"n\">read_bvals_bvecs</span><span class=\"p\">(</span><span class=\"n\">fbval</span><span class=\"p\">,</span> <span class=\"n\">fbvec</span><span class=\"p\">)</span>\n<span class=\"n\">gtab</span> <span class=\"o\">=</span> <span class=\"n\">gradient_table</span><span class=\"p\">(</span><span class=\"n\">bvals</span><span class=\"p\">,</span> <span class=\"n\">bvecs</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>For the sake of simplicity, we only select two non-zero b-values for this\nexample.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">bvals</span> <span class=\"o\">=</span> <span class=\"n\">gtab</span><span class=\"o\">.</span><span class=\"n\">bvals</span>\n<span class=\"n\">bvecs</span> <span class=\"o\">=</span> <span class=\"n\">gtab</span><span class=\"o\">.</span><span class=\"n\">bvecs</span>\n\n<span class=\"n\">sel_b</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">logical_or</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">logical_or</span><span class=\"p\">(</span><span class=\"n\">bvals</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">bvals</span> <span class=\"o\">==</span> <span class=\"mi\">1000</span><span class=\"p\">),</span> <span class=\"n\">bvals</span> <span class=\"o\">==</span> <span class=\"mi\">2000</span><span class=\"p\">)</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">sel_b</span><span class=\"p\">]</span>\n</pre></div>\n</div>\n<p>The gradient table is also selected to have the selected b-values (0, 1000 and\n2000)</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">gtab</span> <span class=\"o\">=</span> <span class=\"n\">gradient_table</span><span class=\"p\">(</span><span class=\"n\">bvals</span><span class=\"p\">[</span><span class=\"n\">sel_b</span><span class=\"p\">],</span> <span class=\"n\">bvecs</span><span class=\"p\">[</span><span class=\"n\">sel_b</span><span class=\"p\">])</span>\n</pre></div>\n</div>\n<p>We make use of the <code class=\"docutils literal notranslate\"><span class=\"pre\">median_otsu</span></code> method to generate the mask for the data as\nfollows:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">b0_mask</span><span class=\"p\">,</span> <span class=\"n\">mask</span> <span class=\"o\">=</span> <span class=\"n\">median_otsu</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">median_radius</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">numpass</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">vol_idx</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">])</span>\n\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>As one can see from its shape, the selected data contains a total of 67\nvolumes of images corresponding to all the diffusion gradient directions\nof the selected b-values and call the <code class=\"docutils literal notranslate\"><span class=\"pre\">mppca</span></code> as follows:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">denoised_arr</span> <span class=\"o\">=</span> <span class=\"n\">mppca</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">mask</span><span class=\"o\">=</span><span class=\"n\">mask</span><span class=\"p\">,</span> <span class=\"n\">patch_radius</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Now we will use the denoised array (<code class=\"docutils literal notranslate\"><span class=\"pre\">denoised_arr</span></code>) obtained from <code class=\"docutils literal notranslate\"><span class=\"pre\">mppca</span></code>\nin the rest of the steps in the tutorial.</p>\n<p>As for the next step, we generate the anisotropic powermap introduced by\n<a class=\"reference internal\" href=\"#dellacqua2014\" id=\"id4\"><span>[DellAcqua2014]</span></a>. To do so, we make use of the Q-ball Model as follows:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">qball_model</span> <span class=\"o\">=</span> <span class=\"n\">shm</span><span class=\"o\">.</span><span class=\"n\">QballModel</span><span class=\"p\">(</span><span class=\"n\">gtab</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>We generate the peaks from the <code class=\"docutils literal notranslate\"><span class=\"pre\">qball_model</span></code> as follows:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">peaks</span> <span class=\"o\">=</span> <span class=\"n\">dp</span><span class=\"o\">.</span><span class=\"n\">peaks_from_model</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"o\">=</span><span class=\"n\">qball_model</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">denoised_arr</span><span class=\"p\">,</span>\n                            <span class=\"n\">relative_peak_threshold</span><span class=\"o\">=.</span><span class=\"mi\">5</span><span class=\"p\">,</span>\n                            <span class=\"n\">min_separation_angle</span><span class=\"o\">=</span><span class=\"mi\">25</span><span class=\"p\">,</span>\n                            <span class=\"n\">sphere</span><span class=\"o\">=</span><span class=\"n\">sphere</span><span class=\"p\">,</span> <span class=\"n\">mask</span><span class=\"o\">=</span><span class=\"n\">mask</span><span class=\"p\">)</span>\n\n<span class=\"n\">ap</span> <span class=\"o\">=</span> <span class=\"n\">shm</span><span class=\"o\">.</span><span class=\"n\">anisotropic_power</span><span class=\"p\">(</span><span class=\"n\">peaks</span><span class=\"o\">.</span><span class=\"n\">shm_coeff</span><span class=\"p\">)</span>\n\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">matshow</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">rot90</span><span class=\"p\">(</span><span class=\"n\">ap</span><span class=\"p\">[:,</span> <span class=\"p\">:,</span> <span class=\"mi\">10</span><span class=\"p\">]),</span> <span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">cm</span><span class=\"o\">.</span><span class=\"n\">bone</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">savefig</span><span class=\"p\">(</span><span class=\"s2\">&quot;anisotropic_power_map.png&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<div class=\"figure align-center\" id=\"id6\">\n<img alt=\"../../_images/anisotropic_power_map.png\" src=\"../../_images/anisotropic_power_map.png\" />\n<p class=\"caption\"><span class=\"caption-text\">Anisotropic Power Map (Axial Slice)</span><a class=\"headerlink\" href=\"#id6\" title=\"Permalink to this image\">\u00b6</a></p>\n</div>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ap</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>The above figure is a visualization of the axial slice of the Anisotropic\nPower Map. It can be treated as a pseudo-T1 for classification purposes\nusing the Hidden Markov Random Fields (HMRF) classifier, if the T1 image is not available.</p>\n<p>As we can see from the shape of the Anisotropic Power Map, it is 3D and can be\nused for tissue classification using HMRF. The\nHMRF needs the specification of the number of classes. For the case of MSMT-CSD\nthe <code class=\"docutils literal notranslate\"><span class=\"pre\">nclass</span></code> parameter needs to be <code class=\"docutils literal notranslate\"><span class=\"pre\">&gt;=2</span></code>. In our case, we set it to 3:\nnamely corticospinal fluid (csf), white matter (wm) and gray matter (gm).</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">nclass</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n</pre></div>\n</div>\n<p>Then, the smoothness factor of the segmentation. Good performance is achieved\nwith values between 0 and 0.5.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">beta</span> <span class=\"o\">=</span> <span class=\"mf\">0.1</span>\n</pre></div>\n</div>\n<p>We then call the <code class=\"docutils literal notranslate\"><span class=\"pre\">TissueClassifierHMRF</span></code> with the parameters specified as\nabove:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">hmrf</span> <span class=\"o\">=</span> <span class=\"n\">TissueClassifierHMRF</span><span class=\"p\">()</span>\n<span class=\"n\">initial_segmentation</span><span class=\"p\">,</span> <span class=\"n\">final_segmentation</span><span class=\"p\">,</span> <span class=\"n\">PVE</span> <span class=\"o\">=</span> <span class=\"n\">hmrf</span><span class=\"o\">.</span><span class=\"n\">classify</span><span class=\"p\">(</span><span class=\"n\">ap</span><span class=\"p\">,</span> <span class=\"n\">nclass</span><span class=\"p\">,</span> <span class=\"n\">beta</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">PVE</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Now that we have the segmentation step, we would like to classify the tissues\ninto <code class=\"docutils literal notranslate\"><span class=\"pre\">wm</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">gm</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">csf</span></code> We do\nso using the Fractional Anisotropy (FA) and Mean Diffusivity (MD) metrics\nobtained from the Diffusion Tensor Imaging Model (DTI) fit as follows:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># Construct the  DTI model</span>\n<span class=\"n\">tenmodel</span> <span class=\"o\">=</span> <span class=\"n\">dti</span><span class=\"o\">.</span><span class=\"n\">TensorModel</span><span class=\"p\">(</span><span class=\"n\">gtab</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># fit the denoised data with DTI model</span>\n<span class=\"n\">tenfit</span> <span class=\"o\">=</span> <span class=\"n\">tenmodel</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">denoised_arr</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># obtain the FA and MD metrics</span>\n<span class=\"n\">FA</span> <span class=\"o\">=</span> <span class=\"n\">tenfit</span><span class=\"o\">.</span><span class=\"n\">fa</span>\n<span class=\"n\">MD</span> <span class=\"o\">=</span> <span class=\"n\">tenfit</span><span class=\"o\">.</span><span class=\"n\">md</span>\n</pre></div>\n</div>\n<p>Now that we have the FA and the MD obtained from DTI, we use it to distinguish\nbetween the <code class=\"docutils literal notranslate\"><span class=\"pre\">wm</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">gm</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">csf</span></code>. As we can see\nfrom the shape of the PVE, the last dimension refers to the classification. We\nwill now index them as: 0 -&gt; <code class=\"docutils literal notranslate\"><span class=\"pre\">csf</span></code>, 1 -&gt; <code class=\"docutils literal notranslate\"><span class=\"pre\">gm</span></code> and 2 -&gt; <code class=\"docutils literal notranslate\"><span class=\"pre\">wm</span></code> as per their\nFA values and the confidence of prediction obtained from\n<code class=\"docutils literal notranslate\"><span class=\"pre\">TissueClassifierHMRF</span></code>.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">csf</span> <span class=\"o\">=</span> <span class=\"n\">PVE</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"n\">gm</span> <span class=\"o\">=</span> <span class=\"n\">PVE</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"n\">wm</span> <span class=\"o\">=</span> <span class=\"n\">PVE</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n\n<span class=\"n\">indices_csf</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(((</span><span class=\"n\">FA</span> <span class=\"o\">&lt;</span> <span class=\"mf\">0.2</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"p\">(</span><span class=\"n\">csf</span> <span class=\"o\">&gt;</span> <span class=\"mf\">0.95</span><span class=\"p\">)))</span>\n<span class=\"n\">indices_gm</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(((</span><span class=\"n\">FA</span> <span class=\"o\">&lt;</span> <span class=\"mf\">0.2</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"p\">(</span><span class=\"n\">gm</span> <span class=\"o\">&gt;</span> <span class=\"mf\">0.95</span><span class=\"p\">)))</span>\n\n<span class=\"n\">selected_csf</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"n\">FA</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">,</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"s1\">&#39;bool&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">selected_gm</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"n\">FA</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">,</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"s1\">&#39;bool&#39;</span><span class=\"p\">)</span>\n\n<span class=\"n\">selected_csf</span><span class=\"p\">[</span><span class=\"n\">indices_csf</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n<span class=\"n\">selected_gm</span><span class=\"p\">[</span><span class=\"n\">indices_gm</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n<span class=\"n\">csf_md</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">(</span><span class=\"n\">MD</span><span class=\"p\">[</span><span class=\"n\">selected_csf</span><span class=\"p\">])</span>\n<span class=\"n\">gm_md</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">(</span><span class=\"n\">MD</span><span class=\"p\">[</span><span class=\"n\">selected_gm</span><span class=\"p\">])</span>\n</pre></div>\n</div>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">auto_response</span></code> function will calculate FA for an ROI of radius equal to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">roi_radius</span></code> in the center of the volume and return the response function\nestimated in that region for the voxels with FA higher than 0.7.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">response</span><span class=\"p\">,</span> <span class=\"n\">ratio</span> <span class=\"o\">=</span> <span class=\"n\">auto_response</span><span class=\"p\">(</span><span class=\"n\">gtab</span><span class=\"p\">,</span> <span class=\"n\">denoised_arr</span><span class=\"p\">,</span> <span class=\"n\">roi_radius</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">fa_thr</span><span class=\"o\">=</span><span class=\"mf\">0.7</span><span class=\"p\">)</span>\n<span class=\"n\">evals_d</span> <span class=\"o\">=</span> <span class=\"n\">response</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n</pre></div>\n</div>\n<p>We will now use the evals obtained from the <code class=\"docutils literal notranslate\"><span class=\"pre\">auto_response</span></code> to generate the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">multi_shell_fiber_response</span></code> rquired by the MSMT-CSD model. Note that we\nmead diffusivities of <code class=\"docutils literal notranslate\"><span class=\"pre\">csf</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">gm</span></code> as inputs to generate th response.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">response_mcsd</span> <span class=\"o\">=</span> <span class=\"n\">multi_shell_fiber_response</span><span class=\"p\">(</span><span class=\"n\">sh_order</span><span class=\"o\">=</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"n\">bvals</span><span class=\"o\">=</span><span class=\"n\">bvals</span><span class=\"p\">,</span>\n                                           <span class=\"n\">evals</span><span class=\"o\">=</span><span class=\"n\">evals_d</span><span class=\"p\">,</span> <span class=\"n\">csf_md</span><span class=\"o\">=</span><span class=\"n\">csf_md</span><span class=\"p\">,</span>\n                                           <span class=\"n\">gm_md</span><span class=\"o\">=</span><span class=\"n\">gm_md</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Now we build the MSMT-CSD model with the <code class=\"docutils literal notranslate\"><span class=\"pre\">response_mcsd</span></code> as input. We then\ncall the <code class=\"docutils literal notranslate\"><span class=\"pre\">fit</span></code> function to fit one slice of the 3D data and visualize it.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">mcsd_model</span> <span class=\"o\">=</span> <span class=\"n\">MultiShellDeconvModel</span><span class=\"p\">(</span><span class=\"n\">gtab</span><span class=\"p\">,</span> <span class=\"n\">response_mcsd</span><span class=\"p\">)</span>\n<span class=\"n\">mcsd_fit</span> <span class=\"o\">=</span> <span class=\"n\">mcsd_model</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">denoised_arr</span><span class=\"p\">[:,</span> <span class=\"p\">:,</span> <span class=\"mi\">10</span><span class=\"p\">:</span><span class=\"mi\">11</span><span class=\"p\">])</span>\n</pre></div>\n</div>\n<p>From the fit obtained in the previous step, we generate the ODFs which can be\nvisualized as follows:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">mcsd_odf</span> <span class=\"o\">=</span> <span class=\"n\">mcsd_fit</span><span class=\"o\">.</span><span class=\"n\">odf</span><span class=\"p\">(</span><span class=\"n\">sphere</span><span class=\"p\">)</span>\n<span class=\"n\">fodf_spheres</span> <span class=\"o\">=</span> <span class=\"n\">actor</span><span class=\"o\">.</span><span class=\"n\">odf_slicer</span><span class=\"p\">(</span><span class=\"n\">mcsd_odf</span><span class=\"p\">,</span> <span class=\"n\">sphere</span><span class=\"o\">=</span><span class=\"n\">sphere</span><span class=\"p\">,</span> <span class=\"n\">scale</span><span class=\"o\">=</span><span class=\"mf\">0.01</span><span class=\"p\">,</span>\n                                <span class=\"n\">norm</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">colormap</span><span class=\"o\">=</span><span class=\"s1\">&#39;plasma&#39;</span><span class=\"p\">)</span>\n\n<span class=\"n\">interactive</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n<span class=\"n\">ren</span> <span class=\"o\">=</span> <span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">Renderer</span><span class=\"p\">()</span>\n<span class=\"n\">ren</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">fodf_spheres</span><span class=\"p\">)</span>\n<span class=\"n\">ren</span><span class=\"o\">.</span><span class=\"n\">reset_camera_tight</span><span class=\"p\">()</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Saving illustration as msdodf.png&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">record</span><span class=\"p\">(</span><span class=\"n\">ren</span><span class=\"p\">,</span> <span class=\"n\">out_path</span><span class=\"o\">=</span><span class=\"s1\">&#39;msdodf.png&#39;</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">600</span><span class=\"p\">,</span> <span class=\"mi\">600</span><span class=\"p\">))</span>\n\n<span class=\"k\">if</span> <span class=\"n\">interactive</span><span class=\"p\">:</span>\n    <span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">(</span><span class=\"n\">ren</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"figure align-center\" id=\"id7\">\n<img alt=\"../../_images/msdodf.png\" src=\"../../_images/msdodf.png\" />\n<p class=\"caption\"><span class=\"caption-text\">MSMT-CSD Peaks and ODFs.</span><a class=\"headerlink\" href=\"#id7\" title=\"Permalink to this image\">\u00b6</a></p>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<dl class=\"citation\">\n<dt class=\"label\" id=\"jeurissen2014\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id1\">Jeurissen2014</a></span></dt>\n<dd><p>B. Jeurissen, et al., \u201cMulti-tissue constrained spherical\ndeconvolution for improved analysis of multi-shell\ndiffusion MRI data.\u201d NeuroImage 103 (2014): 411-426.</p>\n</dd>\n<dt class=\"label\" id=\"tournier2007\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id2\">Tournier2007</a></span></dt>\n<dd><p>J-D. Tournier, F. Calamante and A. Connelly, \u201cRobust\ndetermination of the fibre orientation distribution in\ndiffusion MRI: Non-negativity constrained super-resolved\nspherical deconvolution\u201d, Neuroimage, vol. 35, no. 4,\npp. 1459-1472, (2007).</p>\n</dd>\n<dt class=\"label\" id=\"hansen2016\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id3\">Hansen2016</a></span></dt>\n<dd><p>B. Hansen and SN. Jespersen, \u201d Data for evaluation of fast\nkurtosis strategies, b-value optimization and exploration\nof diffusion MRI contrast\u201d, Scientific Data 3: 160072\ndoi:10.1038/sdata.2016.72, (2016)</p>\n</dd>\n<dt class=\"label\" id=\"dellacqua2014\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id4\">DellAcqua2014</a></span></dt>\n<dd><p>F. Dell\u2019Acqua, et. al., \u201cAnisotropic Power Maps: A\ndiffusion contrast to reveal low anisotropy tissues from\nHARDI data\u201d, Proceedings of International Society for\nMagnetic Resonance in Medicine. Milan, Italy, (2014).</p>\n</dd>\n</dl>\n<div class=\"admonition-example-source-code admonition\">\n<p class=\"admonition-title\">Example source code</p>\n<p>You can download <a class=\"reference download internal\" download=\"\" href=\"../../_downloads/65f2b2c59b7db5fdd42b553745f1102d/reconst_mcsd.py\"><code class=\"xref download docutils literal notranslate\"><span class=\"pre\">the</span> <span class=\"pre\">full</span> <span class=\"pre\">source</span> <span class=\"pre\">code</span> <span class=\"pre\">of</span> <span class=\"pre\">this</span> <span class=\"pre\">example</span></code></a>. This same script is also included in the dipy source distribution under the <code class=\"file docutils literal notranslate\"><span class=\"pre\">doc/examples/</span></code> directory.</p>\n</div>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"]], "sourcename": "examples_built/reconst_mcsd.rst.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Reconstruction with Multi-Shell Multi-Tissue CSD</a><ul>\n<li><a class=\"reference internal\" href=\"#references\">References</a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".rst", "current_page_name": "examples_built/reconst_mcsd", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.12"}